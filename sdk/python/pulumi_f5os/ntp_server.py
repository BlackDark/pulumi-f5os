# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NtpServerArgs', 'NtpServer']

@pulumi.input_type
class NtpServerArgs:
    def __init__(__self__, *,
                 server: pulumi.Input[builtins.str],
                 iburst: Optional[pulumi.Input[builtins.bool]] = None,
                 key_id: Optional[pulumi.Input[builtins.int]] = None,
                 ntp_authentication: Optional[pulumi.Input[builtins.bool]] = None,
                 ntp_service: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a NtpServer resource.
        :param pulumi.Input[builtins.str] server: IPv4/IPv6 address or FQDN of the NTP server.
        :param pulumi.Input[builtins.bool] iburst: Enable iburst for faster synchronization.
        :param pulumi.Input[builtins.int] key_id: Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        :param pulumi.Input[builtins.bool] ntp_authentication: Enable or disable NTP authentication.
        :param pulumi.Input[builtins.bool] ntp_service: Enable or disable the NTP service.
        :param pulumi.Input[builtins.bool] prefer: Set to true if this is the preferred server.
        """
        pulumi.set(__self__, "server", server)
        if iburst is not None:
            pulumi.set(__self__, "iburst", iburst)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if ntp_authentication is not None:
            pulumi.set(__self__, "ntp_authentication", ntp_authentication)
        if ntp_service is not None:
            pulumi.set(__self__, "ntp_service", ntp_service)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[builtins.str]:
        """
        IPv4/IPv6 address or FQDN of the NTP server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def iburst(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable iburst for faster synchronization.
        """
        return pulumi.get(self, "iburst")

    @iburst.setter
    def iburst(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "iburst", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="ntpAuthentication")
    def ntp_authentication(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable or disable NTP authentication.
        """
        return pulumi.get(self, "ntp_authentication")

    @ntp_authentication.setter
    def ntp_authentication(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ntp_authentication", value)

    @property
    @pulumi.getter(name="ntpService")
    def ntp_service(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable or disable the NTP service.
        """
        return pulumi.get(self, "ntp_service")

    @ntp_service.setter
    def ntp_service(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ntp_service", value)

    @property
    @pulumi.getter
    def prefer(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true if this is the preferred server.
        """
        return pulumi.get(self, "prefer")

    @prefer.setter
    def prefer(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prefer", value)


@pulumi.input_type
class _NtpServerState:
    def __init__(__self__, *,
                 iburst: Optional[pulumi.Input[builtins.bool]] = None,
                 key_id: Optional[pulumi.Input[builtins.int]] = None,
                 ntp_authentication: Optional[pulumi.Input[builtins.bool]] = None,
                 ntp_service: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer: Optional[pulumi.Input[builtins.bool]] = None,
                 server: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering NtpServer resources.
        :param pulumi.Input[builtins.bool] iburst: Enable iburst for faster synchronization.
        :param pulumi.Input[builtins.int] key_id: Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        :param pulumi.Input[builtins.bool] ntp_authentication: Enable or disable NTP authentication.
        :param pulumi.Input[builtins.bool] ntp_service: Enable or disable the NTP service.
        :param pulumi.Input[builtins.bool] prefer: Set to true if this is the preferred server.
        :param pulumi.Input[builtins.str] server: IPv4/IPv6 address or FQDN of the NTP server.
        """
        if iburst is not None:
            pulumi.set(__self__, "iburst", iburst)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if ntp_authentication is not None:
            pulumi.set(__self__, "ntp_authentication", ntp_authentication)
        if ntp_service is not None:
            pulumi.set(__self__, "ntp_service", ntp_service)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def iburst(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable iburst for faster synchronization.
        """
        return pulumi.get(self, "iburst")

    @iburst.setter
    def iburst(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "iburst", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="ntpAuthentication")
    def ntp_authentication(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable or disable NTP authentication.
        """
        return pulumi.get(self, "ntp_authentication")

    @ntp_authentication.setter
    def ntp_authentication(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ntp_authentication", value)

    @property
    @pulumi.getter(name="ntpService")
    def ntp_service(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable or disable the NTP service.
        """
        return pulumi.get(self, "ntp_service")

    @ntp_service.setter
    def ntp_service(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ntp_service", value)

    @property
    @pulumi.getter
    def prefer(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true if this is the preferred server.
        """
        return pulumi.get(self, "prefer")

    @prefer.setter
    def prefer(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prefer", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        IPv4/IPv6 address or FQDN of the NTP server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server", value)


@pulumi.type_token("f5os:index/ntpServer:NtpServer")
class NtpServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iburst: Optional[pulumi.Input[builtins.bool]] = None,
                 key_id: Optional[pulumi.Input[builtins.int]] = None,
                 ntp_authentication: Optional[pulumi.Input[builtins.bool]] = None,
                 ntp_service: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer: Optional[pulumi.Input[builtins.bool]] = None,
                 server: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Manage NTP servers on F5OS based systems (Velos controller or rSeries appliance).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        test = f5os.NtpServer("test",
            server="10.20.30.40",
            key_id=123,
            prefer=True,
            iburst=True,
            ntp_service=True,
            ntp_authentication=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] iburst: Enable iburst for faster synchronization.
        :param pulumi.Input[builtins.int] key_id: Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        :param pulumi.Input[builtins.bool] ntp_authentication: Enable or disable NTP authentication.
        :param pulumi.Input[builtins.bool] ntp_service: Enable or disable the NTP service.
        :param pulumi.Input[builtins.bool] prefer: Set to true if this is the preferred server.
        :param pulumi.Input[builtins.str] server: IPv4/IPv6 address or FQDN of the NTP server.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NtpServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage NTP servers on F5OS based systems (Velos controller or rSeries appliance).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        test = f5os.NtpServer("test",
            server="10.20.30.40",
            key_id=123,
            prefer=True,
            iburst=True,
            ntp_service=True,
            ntp_authentication=True)
        ```

        :param str resource_name: The name of the resource.
        :param NtpServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NtpServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iburst: Optional[pulumi.Input[builtins.bool]] = None,
                 key_id: Optional[pulumi.Input[builtins.int]] = None,
                 ntp_authentication: Optional[pulumi.Input[builtins.bool]] = None,
                 ntp_service: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer: Optional[pulumi.Input[builtins.bool]] = None,
                 server: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NtpServerArgs.__new__(NtpServerArgs)

            __props__.__dict__["iburst"] = iburst
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["ntp_authentication"] = ntp_authentication
            __props__.__dict__["ntp_service"] = ntp_service
            __props__.__dict__["prefer"] = prefer
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
        super(NtpServer, __self__).__init__(
            'f5os:index/ntpServer:NtpServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            iburst: Optional[pulumi.Input[builtins.bool]] = None,
            key_id: Optional[pulumi.Input[builtins.int]] = None,
            ntp_authentication: Optional[pulumi.Input[builtins.bool]] = None,
            ntp_service: Optional[pulumi.Input[builtins.bool]] = None,
            prefer: Optional[pulumi.Input[builtins.bool]] = None,
            server: Optional[pulumi.Input[builtins.str]] = None) -> 'NtpServer':
        """
        Get an existing NtpServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] iburst: Enable iburst for faster synchronization.
        :param pulumi.Input[builtins.int] key_id: Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        :param pulumi.Input[builtins.bool] ntp_authentication: Enable or disable NTP authentication.
        :param pulumi.Input[builtins.bool] ntp_service: Enable or disable the NTP service.
        :param pulumi.Input[builtins.bool] prefer: Set to true if this is the preferred server.
        :param pulumi.Input[builtins.str] server: IPv4/IPv6 address or FQDN of the NTP server.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NtpServerState.__new__(_NtpServerState)

        __props__.__dict__["iburst"] = iburst
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["ntp_authentication"] = ntp_authentication
        __props__.__dict__["ntp_service"] = ntp_service
        __props__.__dict__["prefer"] = prefer
        __props__.__dict__["server"] = server
        return NtpServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def iburst(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Enable iburst for faster synchronization.
        """
        return pulumi.get(self, "iburst")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="ntpAuthentication")
    def ntp_authentication(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Enable or disable NTP authentication.
        """
        return pulumi.get(self, "ntp_authentication")

    @property
    @pulumi.getter(name="ntpService")
    def ntp_service(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Enable or disable the NTP service.
        """
        return pulumi.get(self, "ntp_service")

    @property
    @pulumi.getter
    def prefer(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Set to true if this is the preferred server.
        """
        return pulumi.get(self, "prefer")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[builtins.str]:
        """
        IPv4/IPv6 address or FQDN of the NTP server.
        """
        return pulumi.get(self, "server")

