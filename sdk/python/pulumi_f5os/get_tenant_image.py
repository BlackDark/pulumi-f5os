# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTenantImageResult',
    'AwaitableGetTenantImageResult',
    'get_tenant_image',
    'get_tenant_image_output',
]

@pulumi.output_type
class GetTenantImageResult:
    """
    A collection of values returned by getTenantImage.
    """
    def __init__(__self__, id=None, image_name=None, image_status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_name and not isinstance(image_name, str):
            raise TypeError("Expected argument 'image_name' to be a str")
        pulumi.set(__self__, "image_name", image_name)
        if image_status and not isinstance(image_status, str):
            raise TypeError("Expected argument 'image_status' to be a str")
        pulumi.set(__self__, "image_status", image_status)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier of this data source
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> builtins.str:
        """
        Name of the tenant image to check
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageStatus")
    def image_status(self) -> builtins.str:
        """
        Status of Image on the F5OS Platforms
        """
        return pulumi.get(self, "image_status")


class AwaitableGetTenantImageResult(GetTenantImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantImageResult(
            id=self.id,
            image_name=self.image_name,
            image_status=self.image_status)


def get_tenant_image(image_name: Optional[builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantImageResult:
    """
    Get information about the tenant Image on f5os platform.

    Use this data source to get information, whether image available on platform or not

    ## Example Usage

    ```python
    import pulumi
    import pulumi_f5os as f5os

    test = f5os.get_tenant_image(image_name="BIGIP-17.1.0-0.0.16.ALL-F5OS.qcow2.zip.bundle")
    ```


    :param builtins.str image_name: Name of the tenant image to check
    """
    __args__ = dict()
    __args__['imageName'] = image_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('f5os:index/getTenantImage:getTenantImage', __args__, opts=opts, typ=GetTenantImageResult).value

    return AwaitableGetTenantImageResult(
        id=pulumi.get(__ret__, 'id'),
        image_name=pulumi.get(__ret__, 'image_name'),
        image_status=pulumi.get(__ret__, 'image_status'))
def get_tenant_image_output(image_name: Optional[pulumi.Input[builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTenantImageResult]:
    """
    Get information about the tenant Image on f5os platform.

    Use this data source to get information, whether image available on platform or not

    ## Example Usage

    ```python
    import pulumi
    import pulumi_f5os as f5os

    test = f5os.get_tenant_image(image_name="BIGIP-17.1.0-0.0.16.ALL-F5OS.qcow2.zip.bundle")
    ```


    :param builtins.str image_name: Name of the tenant image to check
    """
    __args__ = dict()
    __args__['imageName'] = image_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('f5os:index/getTenantImage:getTenantImage', __args__, opts=opts, typ=GetTenantImageResult)
    return __ret__.apply(lambda __response__: GetTenantImageResult(
        id=pulumi.get(__response__, 'id'),
        image_name=pulumi.get(__response__, 'image_name'),
        image_status=pulumi.get(__response__, 'image_status')))
