# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'LoggingCaBundle',
    'LoggingRemoteForwarding',
    'LoggingRemoteForwardingFile',
    'LoggingRemoteForwardingLog',
    'LoggingServer',
    'LoggingServerLog',
    'LoggingTls',
    'GetDeviceInfoControllerImageResult',
    'GetDeviceInfoInterfaceResult',
    'GetDeviceInfoPartitionImageResult',
    'GetDeviceInfoTenantImageResult',
    'GetDeviceInfoVlanResult',
]

@pulumi.output_type
class LoggingCaBundle(dict):
    def __init__(__self__, *,
                 content: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str content: The PEM-encoded content of the CA bundle.
        :param builtins.str name: The name of the CA bundle.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> builtins.str:
        """
        The PEM-encoded content of the CA bundle.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the CA bundle.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LoggingRemoteForwarding(dict):
    def __init__(__self__, *,
                 enabled: builtins.bool,
                 files: Optional[Sequence['outputs.LoggingRemoteForwardingFile']] = None,
                 logs: Optional[Sequence['outputs.LoggingRemoteForwardingLog']] = None):
        """
        :param builtins.bool enabled: Whether remote forwarding is enabled.
        :param Sequence['LoggingRemoteForwardingFileArgs'] files: List of files for remote forwarding output.
        :param Sequence['LoggingRemoteForwardingLogArgs'] logs: Log selectors for remote forwarding, specifying facility and severity.
        """
        pulumi.set(__self__, "enabled", enabled)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Whether remote forwarding is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.LoggingRemoteForwardingFile']]:
        """
        List of files for remote forwarding output.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def logs(self) -> Optional[Sequence['outputs.LoggingRemoteForwardingLog']]:
        """
        Log selectors for remote forwarding, specifying facility and severity.
        """
        return pulumi.get(self, "logs")


@pulumi.output_type
class LoggingRemoteForwardingFile(dict):
    def __init__(__self__, *,
                 name: builtins.str):
        """
        :param builtins.str name: The name of the file for log output.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the file for log output.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LoggingRemoteForwardingLog(dict):
    def __init__(__self__, *,
                 facility: builtins.str,
                 severity: builtins.str):
        """
        :param builtins.str facility: The syslog facility for remote forwarding (local0 or authpriv).
        :param builtins.str severity: The syslog severity for remote forwarding.
        """
        pulumi.set(__self__, "facility", facility)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> builtins.str:
        """
        The syslog facility for remote forwarding (local0 or authpriv).
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> builtins.str:
        """
        The syslog severity for remote forwarding.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class LoggingServer(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 port: builtins.int,
                 protocol: builtins.str,
                 authentication: Optional[builtins.bool] = None,
                 logs: Optional[Sequence['outputs.LoggingServerLog']] = None):
        """
        :param builtins.str address: The IP address or hostname of the remote logging server.
        :param builtins.int port: The port number for the remote logging server (1-65535).
        :param builtins.str protocol: The protocol used for logging (tcp or udp).
        :param builtins.bool authentication: Whether authentication is enabled for TCP protocol.
        :param Sequence['LoggingServerLogArgs'] logs: Log selectors for this server, specifying facility and severity.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The IP address or hostname of the remote logging server.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The port number for the remote logging server (1-65535).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The protocol used for logging (tcp or udp).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def authentication(self) -> Optional[builtins.bool]:
        """
        Whether authentication is enabled for TCP protocol.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def logs(self) -> Optional[Sequence['outputs.LoggingServerLog']]:
        """
        Log selectors for this server, specifying facility and severity.
        """
        return pulumi.get(self, "logs")


@pulumi.output_type
class LoggingServerLog(dict):
    def __init__(__self__, *,
                 facility: builtins.str,
                 severity: builtins.str):
        """
        :param builtins.str facility: The syslog facility (e.g., local0, authpriv).
        :param builtins.str severity: The syslog severity (e.g., debug, informational, notice, warning, error, critical, alert, emergency).
        """
        pulumi.set(__self__, "facility", facility)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> builtins.str:
        """
        The syslog facility (e.g., local0, authpriv).
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> builtins.str:
        """
        The syslog severity (e.g., debug, informational, notice, warning, error, critical, alert, emergency).
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class LoggingTls(dict):
    def __init__(__self__, *,
                 certificate: builtins.str,
                 key: builtins.str):
        """
        :param builtins.str certificate: TLS certificate for secure logging.
        :param builtins.str key: TLS private key for secure logging (sensitive).
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def certificate(self) -> builtins.str:
        """
        TLS certificate for secure logging.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        TLS private key for secure logging (sensitive).
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetDeviceInfoControllerImageResult(dict):
    def __init__(__self__, *,
                 os: builtins.str,
                 service: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str os: OS of the ISO image
        :param builtins.str service: Service number of the ISO image
        :param builtins.str version: Version of the ISO image
        """
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def os(self) -> builtins.str:
        """
        OS of the ISO image
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def service(self) -> builtins.str:
        """
        Service number of the ISO image
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Version of the ISO image
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeviceInfoInterfaceResult(dict):
    def __init__(__self__, *,
                 enabled: builtins.bool,
                 l3_counters: Mapping[str, builtins.str],
                 mtu: builtins.int,
                 name: builtins.str,
                 operational_status: builtins.str,
                 port_speed: builtins.str,
                 type: builtins.str):
        """
        :param builtins.bool enabled: Interface enabled
        :param builtins.int mtu: Interface mtu
        :param builtins.str name: Interface name
        :param builtins.str operational_status: Interface operational status
        :param builtins.str port_speed: Interface port speed
        :param builtins.str type: Interface type
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "l3_counters", l3_counters)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operational_status", operational_status)
        pulumi.set(__self__, "port_speed", port_speed)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Interface enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="l3Counters")
    def l3_counters(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "l3_counters")

    @property
    @pulumi.getter
    def mtu(self) -> builtins.int:
        """
        Interface mtu
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Interface name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> builtins.str:
        """
        Interface operational status
        """
        return pulumi.get(self, "operational_status")

    @property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> builtins.str:
        """
        Interface port speed
        """
        return pulumi.get(self, "port_speed")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Interface type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeviceInfoPartitionImageResult(dict):
    def __init__(__self__, *,
                 os: builtins.str,
                 service: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str os: OS of the ISO image
        :param builtins.str service: Service number of the ISO image
        :param builtins.str version: Version of the ISO image
        """
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def os(self) -> builtins.str:
        """
        OS of the ISO image
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def service(self) -> builtins.str:
        """
        Service number of the ISO image
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Version of the ISO image
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeviceInfoTenantImageResult(dict):
    def __init__(__self__, *,
                 date: builtins.str,
                 image_name: builtins.str,
                 in_use: builtins.bool,
                 size: builtins.str,
                 status: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str date: Image Date
        :param builtins.str image_name: Image name
        :param builtins.bool in_use: In use
        :param builtins.str size: Image Size
        :param builtins.str status: Image Status
        :param builtins.str type: Image Type
        """
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def date(self) -> builtins.str:
        """
        Image Date
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> builtins.str:
        """
        Image name
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="inUse")
    def in_use(self) -> builtins.bool:
        """
        In use
        """
        return pulumi.get(self, "in_use")

    @property
    @pulumi.getter
    def size(self) -> builtins.str:
        """
        Image Size
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Image Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Image Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeviceInfoVlanResult(dict):
    def __init__(__self__, *,
                 vlan_id: builtins.int,
                 vlan_name: builtins.str):
        """
        :param builtins.int vlan_id: Vlan id
        :param builtins.str vlan_name: Vlan name
        """
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> builtins.int:
        """
        Vlan id
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> builtins.str:
        """
        Vlan name
        """
        return pulumi.get(self, "vlan_name")


