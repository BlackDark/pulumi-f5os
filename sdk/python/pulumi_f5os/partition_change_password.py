# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PartitionChangePasswordArgs', 'PartitionChangePassword']

@pulumi.input_type
class PartitionChangePasswordArgs:
    def __init__(__self__, *,
                 new_password: pulumi.Input[builtins.str],
                 old_password: pulumi.Input[builtins.str],
                 user_name: pulumi.Input[builtins.str]):
        """
        The set of arguments for constructing a PartitionChangePassword resource.
        :param pulumi.Input[builtins.str] new_password: New password for the specified user account.
        :param pulumi.Input[builtins.str] old_password: Current password for the specified user account.
        :param pulumi.Input[builtins.str] user_name: Name of the chassis partition user account.
        """
        pulumi.set(__self__, "new_password", new_password)
        pulumi.set(__self__, "old_password", old_password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="newPassword")
    def new_password(self) -> pulumi.Input[builtins.str]:
        """
        New password for the specified user account.
        """
        return pulumi.get(self, "new_password")

    @new_password.setter
    def new_password(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "new_password", value)

    @property
    @pulumi.getter(name="oldPassword")
    def old_password(self) -> pulumi.Input[builtins.str]:
        """
        Current password for the specified user account.
        """
        return pulumi.get(self, "old_password")

    @old_password.setter
    def old_password(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "old_password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the chassis partition user account.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class _PartitionChangePasswordState:
    def __init__(__self__, *,
                 new_password: Optional[pulumi.Input[builtins.str]] = None,
                 old_password: Optional[pulumi.Input[builtins.str]] = None,
                 user_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering PartitionChangePassword resources.
        :param pulumi.Input[builtins.str] new_password: New password for the specified user account.
        :param pulumi.Input[builtins.str] old_password: Current password for the specified user account.
        :param pulumi.Input[builtins.str] user_name: Name of the chassis partition user account.
        """
        if new_password is not None:
            pulumi.set(__self__, "new_password", new_password)
        if old_password is not None:
            pulumi.set(__self__, "old_password", old_password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="newPassword")
    def new_password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        New password for the specified user account.
        """
        return pulumi.get(self, "new_password")

    @new_password.setter
    def new_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "new_password", value)

    @property
    @pulumi.getter(name="oldPassword")
    def old_password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Current password for the specified user account.
        """
        return pulumi.get(self, "old_password")

    @old_password.setter
    def old_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "old_password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the chassis partition user account.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_name", value)


@pulumi.type_token("f5os:index/partitionChangePassword:PartitionChangePassword")
class PartitionChangePassword(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 new_password: Optional[pulumi.Input[builtins.str]] = None,
                 old_password: Optional[pulumi.Input[builtins.str]] = None,
                 user_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Resource used to manage password of a specific user on a velos chassis partition.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manages Changing F5os Partition password
        changepass = f5os.PartitionChangePassword("changepass",
            user_name="xxxxx",
            old_password="xxxxxxxx",
            new_password="xxxxxx")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] new_password: New password for the specified user account.
        :param pulumi.Input[builtins.str] old_password: Current password for the specified user account.
        :param pulumi.Input[builtins.str] user_name: Name of the chassis partition user account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PartitionChangePasswordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource used to manage password of a specific user on a velos chassis partition.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manages Changing F5os Partition password
        changepass = f5os.PartitionChangePassword("changepass",
            user_name="xxxxx",
            old_password="xxxxxxxx",
            new_password="xxxxxx")
        ```

        :param str resource_name: The name of the resource.
        :param PartitionChangePasswordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PartitionChangePasswordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 new_password: Optional[pulumi.Input[builtins.str]] = None,
                 old_password: Optional[pulumi.Input[builtins.str]] = None,
                 user_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PartitionChangePasswordArgs.__new__(PartitionChangePasswordArgs)

            if new_password is None and not opts.urn:
                raise TypeError("Missing required property 'new_password'")
            __props__.__dict__["new_password"] = None if new_password is None else pulumi.Output.secret(new_password)
            if old_password is None and not opts.urn:
                raise TypeError("Missing required property 'old_password'")
            __props__.__dict__["old_password"] = None if old_password is None else pulumi.Output.secret(old_password)
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["newPassword", "oldPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(PartitionChangePassword, __self__).__init__(
            'f5os:index/partitionChangePassword:PartitionChangePassword',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            new_password: Optional[pulumi.Input[builtins.str]] = None,
            old_password: Optional[pulumi.Input[builtins.str]] = None,
            user_name: Optional[pulumi.Input[builtins.str]] = None) -> 'PartitionChangePassword':
        """
        Get an existing PartitionChangePassword resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] new_password: New password for the specified user account.
        :param pulumi.Input[builtins.str] old_password: Current password for the specified user account.
        :param pulumi.Input[builtins.str] user_name: Name of the chassis partition user account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PartitionChangePasswordState.__new__(_PartitionChangePasswordState)

        __props__.__dict__["new_password"] = new_password
        __props__.__dict__["old_password"] = old_password
        __props__.__dict__["user_name"] = user_name
        return PartitionChangePassword(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="newPassword")
    def new_password(self) -> pulumi.Output[builtins.str]:
        """
        New password for the specified user account.
        """
        return pulumi.get(self, "new_password")

    @property
    @pulumi.getter(name="oldPassword")
    def old_password(self) -> pulumi.Output[builtins.str]:
        """
        Current password for the specified user account.
        """
        return pulumi.get(self, "old_password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the chassis partition user account.
        """
        return pulumi.get(self, "user_name")

