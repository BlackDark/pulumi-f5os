# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PrimarykeyArgs', 'Primarykey']

@pulumi.input_type
class PrimarykeyArgs:
    def __init__(__self__, *,
                 passphrase: pulumi.Input[builtins.str],
                 salt: pulumi.Input[builtins.str],
                 force_update: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a Primarykey resource.
        :param pulumi.Input[builtins.str] passphrase: Specifies passphrase for generating primary key.
        :param pulumi.Input[builtins.str] salt: Specifies salt for generating primary key.
        :param pulumi.Input[builtins.bool] force_update: Force update the primary key on F5OS device.
        """
        pulumi.set(__self__, "passphrase", passphrase)
        pulumi.set(__self__, "salt", salt)
        if force_update is not None:
            pulumi.set(__self__, "force_update", force_update)

    @property
    @pulumi.getter
    def passphrase(self) -> pulumi.Input[builtins.str]:
        """
        Specifies passphrase for generating primary key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter
    def salt(self) -> pulumi.Input[builtins.str]:
        """
        Specifies salt for generating primary key.
        """
        return pulumi.get(self, "salt")

    @salt.setter
    def salt(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "salt", value)

    @property
    @pulumi.getter(name="forceUpdate")
    def force_update(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Force update the primary key on F5OS device.
        """
        return pulumi.get(self, "force_update")

    @force_update.setter
    def force_update(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_update", value)


@pulumi.input_type
class _PrimarykeyState:
    def __init__(__self__, *,
                 force_update: Optional[pulumi.Input[builtins.bool]] = None,
                 hash: Optional[pulumi.Input[builtins.str]] = None,
                 passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 salt: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Primarykey resources.
        :param pulumi.Input[builtins.bool] force_update: Force update the primary key on F5OS device.
        :param pulumi.Input[builtins.str] hash: Hash of the primary key as returned by the system.
        :param pulumi.Input[builtins.str] passphrase: Specifies passphrase for generating primary key.
        :param pulumi.Input[builtins.str] salt: Specifies salt for generating primary key.
        :param pulumi.Input[builtins.str] status: Status of primary key operation (e.g., COMPLETE)
        """
        if force_update is not None:
            pulumi.set(__self__, "force_update", force_update)
        if hash is not None:
            pulumi.set(__self__, "hash", hash)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="forceUpdate")
    def force_update(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Force update the primary key on F5OS device.
        """
        return pulumi.get(self, "force_update")

    @force_update.setter
    def force_update(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_update", value)

    @property
    @pulumi.getter
    def hash(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Hash of the primary key as returned by the system.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hash", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies passphrase for generating primary key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter
    def salt(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies salt for generating primary key.
        """
        return pulumi.get(self, "salt")

    @salt.setter
    def salt(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "salt", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Status of primary key operation (e.g., COMPLETE)
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("f5os:index/primarykey:Primarykey")
class Primarykey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_update: Optional[pulumi.Input[builtins.bool]] = None,
                 passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 salt: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Manage system primary-key using passphrase and salt on F5OS devices.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manages Primary key settings on F5OS platforms
        default = f5os.Primarykey("default",
            passphrase="test-pass",
            salt="test-salt",
            force_update=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] force_update: Force update the primary key on F5OS device.
        :param pulumi.Input[builtins.str] passphrase: Specifies passphrase for generating primary key.
        :param pulumi.Input[builtins.str] salt: Specifies salt for generating primary key.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrimarykeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage system primary-key using passphrase and salt on F5OS devices.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manages Primary key settings on F5OS platforms
        default = f5os.Primarykey("default",
            passphrase="test-pass",
            salt="test-salt",
            force_update=True)
        ```

        :param str resource_name: The name of the resource.
        :param PrimarykeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrimarykeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_update: Optional[pulumi.Input[builtins.bool]] = None,
                 passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 salt: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrimarykeyArgs.__new__(PrimarykeyArgs)

            __props__.__dict__["force_update"] = force_update
            if passphrase is None and not opts.urn:
                raise TypeError("Missing required property 'passphrase'")
            __props__.__dict__["passphrase"] = None if passphrase is None else pulumi.Output.secret(passphrase)
            if salt is None and not opts.urn:
                raise TypeError("Missing required property 'salt'")
            __props__.__dict__["salt"] = None if salt is None else pulumi.Output.secret(salt)
            __props__.__dict__["hash"] = None
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["passphrase", "salt"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Primarykey, __self__).__init__(
            'f5os:index/primarykey:Primarykey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            force_update: Optional[pulumi.Input[builtins.bool]] = None,
            hash: Optional[pulumi.Input[builtins.str]] = None,
            passphrase: Optional[pulumi.Input[builtins.str]] = None,
            salt: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None) -> 'Primarykey':
        """
        Get an existing Primarykey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] force_update: Force update the primary key on F5OS device.
        :param pulumi.Input[builtins.str] hash: Hash of the primary key as returned by the system.
        :param pulumi.Input[builtins.str] passphrase: Specifies passphrase for generating primary key.
        :param pulumi.Input[builtins.str] salt: Specifies salt for generating primary key.
        :param pulumi.Input[builtins.str] status: Status of primary key operation (e.g., COMPLETE)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrimarykeyState.__new__(_PrimarykeyState)

        __props__.__dict__["force_update"] = force_update
        __props__.__dict__["hash"] = hash
        __props__.__dict__["passphrase"] = passphrase
        __props__.__dict__["salt"] = salt
        __props__.__dict__["status"] = status
        return Primarykey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="forceUpdate")
    def force_update(self) -> pulumi.Output[builtins.bool]:
        """
        Force update the primary key on F5OS device.
        """
        return pulumi.get(self, "force_update")

    @property
    @pulumi.getter
    def hash(self) -> pulumi.Output[builtins.str]:
        """
        Hash of the primary key as returned by the system.
        """
        return pulumi.get(self, "hash")

    @property
    @pulumi.getter
    def passphrase(self) -> pulumi.Output[builtins.str]:
        """
        Specifies passphrase for generating primary key.
        """
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter
    def salt(self) -> pulumi.Output[builtins.str]:
        """
        Specifies salt for generating primary key.
        """
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        Status of primary key operation (e.g., COMPLETE)
        """
        return pulumi.get(self, "status")

