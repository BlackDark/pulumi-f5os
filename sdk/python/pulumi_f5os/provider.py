# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 disable_tls_verify: Optional[pulumi.Input[builtins.bool]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 teem_disable: Optional[pulumi.Input[builtins.bool]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[builtins.bool] disable_tls_verify: `disable_tls_verify` controls whether a client verifies the server's certificate chain and host name. default it is set
               to `true`. If `disable_tls_verify` is true, crypto/tls accepts any certificate presented by the server and any host name
               in that certificate. In this mode, TLS is susceptible to machine-in-the-middle attacks unless custom verification is
               used. can be provided by `DISABLE_TLS_VERIFY` environment variable. > **NOTE** If it is set to `false`, certificate/ca
               certificates should be added to `trusted store` of host where we are running this provider.
        :param pulumi.Input[builtins.str] host: URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
        :param pulumi.Input[builtins.str] password: Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
        :param pulumi.Input[builtins.int] port: Port Number to be used to make API calls to HOST
        :param pulumi.Input[builtins.bool] teem_disable: If this flag set to true,sending telemetry data to TEEM will be disabled,can be provided via `TEEM_DISABLE` environment
               variable.
        :param pulumi.Input[builtins.str] username: Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
               required permission as per
               [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
        """
        if disable_tls_verify is not None:
            pulumi.set(__self__, "disable_tls_verify", disable_tls_verify)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if teem_disable is not None:
            pulumi.set(__self__, "teem_disable", teem_disable)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="disableTlsVerify")
    def disable_tls_verify(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        `disable_tls_verify` controls whether a client verifies the server's certificate chain and host name. default it is set
        to `true`. If `disable_tls_verify` is true, crypto/tls accepts any certificate presented by the server and any host name
        in that certificate. In this mode, TLS is susceptible to machine-in-the-middle attacks unless custom verification is
        used. can be provided by `DISABLE_TLS_VERIFY` environment variable. > **NOTE** If it is set to `false`, certificate/ca
        certificates should be added to `trusted store` of host where we are running this provider.
        """
        return pulumi.get(self, "disable_tls_verify")

    @disable_tls_verify.setter
    def disable_tls_verify(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disable_tls_verify", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Port Number to be used to make API calls to HOST
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="teemDisable")
    def teem_disable(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If this flag set to true,sending telemetry data to TEEM will be disabled,can be provided via `TEEM_DISABLE` environment
        variable.
        """
        return pulumi.get(self, "teem_disable")

    @teem_disable.setter
    def teem_disable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "teem_disable", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
        required permission as per
        [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.type_token("pulumi:providers:f5os")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_tls_verify: Optional[pulumi.Input[builtins.bool]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 teem_disable: Optional[pulumi.Input[builtins.bool]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The provider type for the f5os package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] disable_tls_verify: `disable_tls_verify` controls whether a client verifies the server's certificate chain and host name. default it is set
               to `true`. If `disable_tls_verify` is true, crypto/tls accepts any certificate presented by the server and any host name
               in that certificate. In this mode, TLS is susceptible to machine-in-the-middle attacks unless custom verification is
               used. can be provided by `DISABLE_TLS_VERIFY` environment variable. > **NOTE** If it is set to `false`, certificate/ca
               certificates should be added to `trusted store` of host where we are running this provider.
        :param pulumi.Input[builtins.str] host: URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
        :param pulumi.Input[builtins.str] password: Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
        :param pulumi.Input[builtins.int] port: Port Number to be used to make API calls to HOST
        :param pulumi.Input[builtins.bool] teem_disable: If this flag set to true,sending telemetry data to TEEM will be disabled,can be provided via `TEEM_DISABLE` environment
               variable.
        :param pulumi.Input[builtins.str] username: Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
               required permission as per
               [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the f5os package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_tls_verify: Optional[pulumi.Input[builtins.bool]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 teem_disable: Optional[pulumi.Input[builtins.bool]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["disable_tls_verify"] = pulumi.Output.from_input(disable_tls_verify).apply(pulumi.runtime.to_json) if disable_tls_verify is not None else None
            __props__.__dict__["host"] = host
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["port"] = pulumi.Output.from_input(port).apply(pulumi.runtime.to_json) if port is not None else None
            __props__.__dict__["teem_disable"] = pulumi.Output.from_input(teem_disable).apply(pulumi.runtime.to_json) if teem_disable is not None else None
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'f5os',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
        required permission as per
        [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
        """
        return pulumi.get(self, "username")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:f5os/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult)

