# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ConfigBackupArgs', 'ConfigBackup']

@pulumi.input_type
class ConfigBackupArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[builtins.str],
                 remote_host: pulumi.Input[builtins.str],
                 remote_password: pulumi.Input[builtins.str],
                 remote_path: pulumi.Input[builtins.str],
                 remote_user: pulumi.Input[builtins.str],
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a ConfigBackup resource.
        :param pulumi.Input[builtins.str] protocol: Protocol for config backup file transfer.
        :param pulumi.Input[builtins.str] remote_host: The hostname or IP address of the remote server used for storing the config backup file.
        :param pulumi.Input[builtins.str] remote_password: User password for the remote server used for exporting the created config backup file.
        :param pulumi.Input[builtins.str] remote_path: The path on the remote server used for uploading the created config backup file.
        :param pulumi.Input[builtins.str] remote_user: User name for the remote server used for exporting the created config backup file.
        :param pulumi.Input[builtins.str] name: Name of the config backup file.
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_host", remote_host)
        pulumi.set(__self__, "remote_password", remote_password)
        pulumi.set(__self__, "remote_path", remote_path)
        pulumi.set(__self__, "remote_user", remote_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[builtins.str]:
        """
        Protocol for config backup file transfer.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="remoteHost")
    def remote_host(self) -> pulumi.Input[builtins.str]:
        """
        The hostname or IP address of the remote server used for storing the config backup file.
        """
        return pulumi.get(self, "remote_host")

    @remote_host.setter
    def remote_host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "remote_host", value)

    @property
    @pulumi.getter(name="remotePassword")
    def remote_password(self) -> pulumi.Input[builtins.str]:
        """
        User password for the remote server used for exporting the created config backup file.
        """
        return pulumi.get(self, "remote_password")

    @remote_password.setter
    def remote_password(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "remote_password", value)

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> pulumi.Input[builtins.str]:
        """
        The path on the remote server used for uploading the created config backup file.
        """
        return pulumi.get(self, "remote_path")

    @remote_path.setter
    def remote_path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "remote_path", value)

    @property
    @pulumi.getter(name="remoteUser")
    def remote_user(self) -> pulumi.Input[builtins.str]:
        """
        User name for the remote server used for exporting the created config backup file.
        """
        return pulumi.get(self, "remote_user")

    @remote_user.setter
    def remote_user(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "remote_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the config backup file.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class _ConfigBackupState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 remote_password: Optional[pulumi.Input[builtins.str]] = None,
                 remote_path: Optional[pulumi.Input[builtins.str]] = None,
                 remote_user: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None):
        """
        Input properties used for looking up and filtering ConfigBackup resources.
        :param pulumi.Input[builtins.str] name: Name of the config backup file.
        :param pulumi.Input[builtins.str] protocol: Protocol for config backup file transfer.
        :param pulumi.Input[builtins.str] remote_host: The hostname or IP address of the remote server used for storing the config backup file.
        :param pulumi.Input[builtins.str] remote_password: User password for the remote server used for exporting the created config backup file.
        :param pulumi.Input[builtins.str] remote_path: The path on the remote server used for uploading the created config backup file.
        :param pulumi.Input[builtins.str] remote_user: User name for the remote server used for exporting the created config backup file.
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote_host is not None:
            pulumi.set(__self__, "remote_host", remote_host)
        if remote_password is not None:
            pulumi.set(__self__, "remote_password", remote_password)
        if remote_path is not None:
            pulumi.set(__self__, "remote_path", remote_path)
        if remote_user is not None:
            pulumi.set(__self__, "remote_user", remote_user)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the config backup file.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Protocol for config backup file transfer.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="remoteHost")
    def remote_host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The hostname or IP address of the remote server used for storing the config backup file.
        """
        return pulumi.get(self, "remote_host")

    @remote_host.setter
    def remote_host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_host", value)

    @property
    @pulumi.getter(name="remotePassword")
    def remote_password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        User password for the remote server used for exporting the created config backup file.
        """
        return pulumi.get(self, "remote_password")

    @remote_password.setter
    def remote_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_password", value)

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The path on the remote server used for uploading the created config backup file.
        """
        return pulumi.get(self, "remote_path")

    @remote_path.setter
    def remote_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_path", value)

    @property
    @pulumi.getter(name="remoteUser")
    def remote_user(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        User name for the remote server used for exporting the created config backup file.
        """
        return pulumi.get(self, "remote_user")

    @remote_user.setter
    def remote_user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_user", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout", value)


@pulumi.type_token("f5os:index/configBackup:ConfigBackup")
class ConfigBackup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 remote_password: Optional[pulumi.Input[builtins.str]] = None,
                 remote_path: Optional[pulumi.Input[builtins.str]] = None,
                 remote_user: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Resource used to manage F5OS config backup

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        test = f5os.ConfigBackup("test",
            name="test_cfg_backup",
            remote_host="1.2.3.4",
            remote_user="corpuser",
            remote_password="password",
            remote_path="/upload/test_cfg_backup",
            protocol="https")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: Name of the config backup file.
        :param pulumi.Input[builtins.str] protocol: Protocol for config backup file transfer.
        :param pulumi.Input[builtins.str] remote_host: The hostname or IP address of the remote server used for storing the config backup file.
        :param pulumi.Input[builtins.str] remote_password: User password for the remote server used for exporting the created config backup file.
        :param pulumi.Input[builtins.str] remote_path: The path on the remote server used for uploading the created config backup file.
        :param pulumi.Input[builtins.str] remote_user: User name for the remote server used for exporting the created config backup file.
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigBackupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource used to manage F5OS config backup

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        test = f5os.ConfigBackup("test",
            name="test_cfg_backup",
            remote_host="1.2.3.4",
            remote_user="corpuser",
            remote_password="password",
            remote_path="/upload/test_cfg_backup",
            protocol="https")
        ```

        :param str resource_name: The name of the resource.
        :param ConfigBackupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigBackupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 remote_password: Optional[pulumi.Input[builtins.str]] = None,
                 remote_path: Optional[pulumi.Input[builtins.str]] = None,
                 remote_user: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigBackupArgs.__new__(ConfigBackupArgs)

            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if remote_host is None and not opts.urn:
                raise TypeError("Missing required property 'remote_host'")
            __props__.__dict__["remote_host"] = remote_host
            if remote_password is None and not opts.urn:
                raise TypeError("Missing required property 'remote_password'")
            __props__.__dict__["remote_password"] = None if remote_password is None else pulumi.Output.secret(remote_password)
            if remote_path is None and not opts.urn:
                raise TypeError("Missing required property 'remote_path'")
            __props__.__dict__["remote_path"] = remote_path
            if remote_user is None and not opts.urn:
                raise TypeError("Missing required property 'remote_user'")
            __props__.__dict__["remote_user"] = remote_user
            __props__.__dict__["timeout"] = timeout
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["remotePassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ConfigBackup, __self__).__init__(
            'f5os:index/configBackup:ConfigBackup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            protocol: Optional[pulumi.Input[builtins.str]] = None,
            remote_host: Optional[pulumi.Input[builtins.str]] = None,
            remote_password: Optional[pulumi.Input[builtins.str]] = None,
            remote_path: Optional[pulumi.Input[builtins.str]] = None,
            remote_user: Optional[pulumi.Input[builtins.str]] = None,
            timeout: Optional[pulumi.Input[builtins.int]] = None) -> 'ConfigBackup':
        """
        Get an existing ConfigBackup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: Name of the config backup file.
        :param pulumi.Input[builtins.str] protocol: Protocol for config backup file transfer.
        :param pulumi.Input[builtins.str] remote_host: The hostname or IP address of the remote server used for storing the config backup file.
        :param pulumi.Input[builtins.str] remote_password: User password for the remote server used for exporting the created config backup file.
        :param pulumi.Input[builtins.str] remote_path: The path on the remote server used for uploading the created config backup file.
        :param pulumi.Input[builtins.str] remote_user: User name for the remote server used for exporting the created config backup file.
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigBackupState.__new__(_ConfigBackupState)

        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["remote_host"] = remote_host
        __props__.__dict__["remote_password"] = remote_password
        __props__.__dict__["remote_path"] = remote_path
        __props__.__dict__["remote_user"] = remote_user
        __props__.__dict__["timeout"] = timeout
        return ConfigBackup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the config backup file.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[builtins.str]:
        """
        Protocol for config backup file transfer.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="remoteHost")
    def remote_host(self) -> pulumi.Output[builtins.str]:
        """
        The hostname or IP address of the remote server used for storing the config backup file.
        """
        return pulumi.get(self, "remote_host")

    @property
    @pulumi.getter(name="remotePassword")
    def remote_password(self) -> pulumi.Output[builtins.str]:
        """
        User password for the remote server used for exporting the created config backup file.
        """
        return pulumi.get(self, "remote_password")

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> pulumi.Output[builtins.str]:
        """
        The path on the remote server used for uploading the created config backup file.
        """
        return pulumi.get(self, "remote_path")

    @property
    @pulumi.getter(name="remoteUser")
    def remote_user(self) -> pulumi.Output[builtins.str]:
        """
        User name for the remote server used for exporting the created config backup file.
        """
        return pulumi.get(self, "remote_user")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[builtins.int]:
        """
        The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        """
        return pulumi.get(self, "timeout")

