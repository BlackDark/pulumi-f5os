# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDeviceInfoResult',
    'AwaitableGetDeviceInfoResult',
    'get_device_info',
    'get_device_info_output',
]

@pulumi.output_type
class GetDeviceInfoResult:
    """
    A collection of values returned by getDeviceInfo.
    """
    def __init__(__self__, controller_images=None, gather_info_ofs=None, id=None, interfaces=None, partition_images=None, tenant_images=None, vlans=None):
        if controller_images and not isinstance(controller_images, list):
            raise TypeError("Expected argument 'controller_images' to be a list")
        pulumi.set(__self__, "controller_images", controller_images)
        if gather_info_ofs and not isinstance(gather_info_ofs, list):
            raise TypeError("Expected argument 'gather_info_ofs' to be a list")
        pulumi.set(__self__, "gather_info_ofs", gather_info_ofs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interfaces and not isinstance(interfaces, list):
            raise TypeError("Expected argument 'interfaces' to be a list")
        pulumi.set(__self__, "interfaces", interfaces)
        if partition_images and not isinstance(partition_images, list):
            raise TypeError("Expected argument 'partition_images' to be a list")
        pulumi.set(__self__, "partition_images", partition_images)
        if tenant_images and not isinstance(tenant_images, list):
            raise TypeError("Expected argument 'tenant_images' to be a list")
        pulumi.set(__self__, "tenant_images", tenant_images)
        if vlans and not isinstance(vlans, list):
            raise TypeError("Expected argument 'vlans' to be a list")
        pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="controllerImages")
    def controller_images(self) -> Sequence['outputs.GetDeviceInfoControllerImageResult']:
        """
        Information about existing controller images
        """
        return pulumi.get(self, "controller_images")

    @property
    @pulumi.getter(name="gatherInfoOfs")
    def gather_info_ofs(self) -> Sequence[builtins.str]:
        """
        List of components for which to gather information. This attribute accept the following values:
        [`all`,`interfaces`,`vlans`,`tenant_images`,`partition_images`,`controller_images`,`!all`,`!interfaces`,`!vlans`,`!tenant_images`,`!partition_images`,`!controller_images`]
        """
        return pulumi.get(self, "gather_info_ofs")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Identifier for Device Info
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetDeviceInfoInterfaceResult']:
        """
        Information about existing interfaces
        """
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="partitionImages")
    def partition_images(self) -> Sequence['outputs.GetDeviceInfoPartitionImageResult']:
        """
        Device info
        """
        return pulumi.get(self, "partition_images")

    @property
    @pulumi.getter(name="tenantImages")
    def tenant_images(self) -> Sequence['outputs.GetDeviceInfoTenantImageResult']:
        """
        Information about existing tenant images
        """
        return pulumi.get(self, "tenant_images")

    @property
    @pulumi.getter
    def vlans(self) -> Sequence['outputs.GetDeviceInfoVlanResult']:
        """
        Information about existing vlans
        """
        return pulumi.get(self, "vlans")


class AwaitableGetDeviceInfoResult(GetDeviceInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceInfoResult(
            controller_images=self.controller_images,
            gather_info_ofs=self.gather_info_ofs,
            id=self.id,
            interfaces=self.interfaces,
            partition_images=self.partition_images,
            tenant_images=self.tenant_images,
            vlans=self.vlans)


def get_device_info(gather_info_ofs: Optional[Sequence[builtins.str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceInfoResult:
    """
    Get Information about the various components of F5OS device. Currently the various components whose information is fetched are `interfaces`, `vlans`, `tenant images`, `controller images` and `partition images`. Information about partition and controller images can only be fetched from the Velos controller so please set you provider block to point to a Velos controller when you want information for partition and controller images


    :param Sequence[builtins.str] gather_info_ofs: List of components for which to gather information. This attribute accept the following values:
           [`all`,`interfaces`,`vlans`,`tenant_images`,`partition_images`,`controller_images`,`!all`,`!interfaces`,`!vlans`,`!tenant_images`,`!partition_images`,`!controller_images`]
    """
    __args__ = dict()
    __args__['gatherInfoOfs'] = gather_info_ofs
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('f5os:index/getDeviceInfo:getDeviceInfo', __args__, opts=opts, typ=GetDeviceInfoResult).value

    return AwaitableGetDeviceInfoResult(
        controller_images=pulumi.get(__ret__, 'controller_images'),
        gather_info_ofs=pulumi.get(__ret__, 'gather_info_ofs'),
        id=pulumi.get(__ret__, 'id'),
        interfaces=pulumi.get(__ret__, 'interfaces'),
        partition_images=pulumi.get(__ret__, 'partition_images'),
        tenant_images=pulumi.get(__ret__, 'tenant_images'),
        vlans=pulumi.get(__ret__, 'vlans'))
def get_device_info_output(gather_info_ofs: Optional[pulumi.Input[Sequence[builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeviceInfoResult]:
    """
    Get Information about the various components of F5OS device. Currently the various components whose information is fetched are `interfaces`, `vlans`, `tenant images`, `controller images` and `partition images`. Information about partition and controller images can only be fetched from the Velos controller so please set you provider block to point to a Velos controller when you want information for partition and controller images


    :param Sequence[builtins.str] gather_info_ofs: List of components for which to gather information. This attribute accept the following values:
           [`all`,`interfaces`,`vlans`,`tenant_images`,`partition_images`,`controller_images`,`!all`,`!interfaces`,`!vlans`,`!tenant_images`,`!partition_images`,`!controller_images`]
    """
    __args__ = dict()
    __args__['gatherInfoOfs'] = gather_info_ofs
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('f5os:index/getDeviceInfo:getDeviceInfo', __args__, opts=opts, typ=GetDeviceInfoResult)
    return __ret__.apply(lambda __response__: GetDeviceInfoResult(
        controller_images=pulumi.get(__response__, 'controller_images'),
        gather_info_ofs=pulumi.get(__response__, 'gather_info_ofs'),
        id=pulumi.get(__response__, 'id'),
        interfaces=pulumi.get(__response__, 'interfaces'),
        partition_images=pulumi.get(__response__, 'partition_images'),
        tenant_images=pulumi.get(__response__, 'tenant_images'),
        vlans=pulumi.get(__response__, 'vlans')))
