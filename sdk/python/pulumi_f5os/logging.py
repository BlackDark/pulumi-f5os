# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoggingArgs', 'Logging']

@pulumi.input_type
class LoggingArgs:
    def __init__(__self__, *,
                 ca_bundles: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingCaBundleArgs']]]] = None,
                 include_hostname: Optional[pulumi.Input[builtins.bool]] = None,
                 remote_forwarding: Optional[pulumi.Input['LoggingRemoteForwardingArgs']] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingServerArgs']]]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 tls: Optional[pulumi.Input['LoggingTlsArgs']] = None):
        """
        The set of arguments for constructing a Logging resource.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingCaBundleArgs']]] ca_bundles: List of CA bundles for TLS validation.
        :param pulumi.Input[builtins.bool] include_hostname: Whether to include the hostname in log messages.
        :param pulumi.Input['LoggingRemoteForwardingArgs'] remote_forwarding: Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingServerArgs']]] servers: A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        :param pulumi.Input[builtins.str] state: Current state of the logging resource.
        :param pulumi.Input['LoggingTlsArgs'] tls: TLS configuration for secure logging.
        """
        if ca_bundles is not None:
            pulumi.set(__self__, "ca_bundles", ca_bundles)
        if include_hostname is not None:
            pulumi.set(__self__, "include_hostname", include_hostname)
        if remote_forwarding is not None:
            pulumi.set(__self__, "remote_forwarding", remote_forwarding)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="caBundles")
    def ca_bundles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingCaBundleArgs']]]]:
        """
        List of CA bundles for TLS validation.
        """
        return pulumi.get(self, "ca_bundles")

    @ca_bundles.setter
    def ca_bundles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingCaBundleArgs']]]]):
        pulumi.set(self, "ca_bundles", value)

    @property
    @pulumi.getter(name="includeHostname")
    def include_hostname(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to include the hostname in log messages.
        """
        return pulumi.get(self, "include_hostname")

    @include_hostname.setter
    def include_hostname(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "include_hostname", value)

    @property
    @pulumi.getter(name="remoteForwarding")
    def remote_forwarding(self) -> Optional[pulumi.Input['LoggingRemoteForwardingArgs']]:
        """
        Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        """
        return pulumi.get(self, "remote_forwarding")

    @remote_forwarding.setter
    def remote_forwarding(self, value: Optional[pulumi.Input['LoggingRemoteForwardingArgs']]):
        pulumi.set(self, "remote_forwarding", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingServerArgs']]]]:
        """
        A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Current state of the logging resource.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['LoggingTlsArgs']]:
        """
        TLS configuration for secure logging.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['LoggingTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class _LoggingState:
    def __init__(__self__, *,
                 ca_bundles: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingCaBundleArgs']]]] = None,
                 include_hostname: Optional[pulumi.Input[builtins.bool]] = None,
                 remote_forwarding: Optional[pulumi.Input['LoggingRemoteForwardingArgs']] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingServerArgs']]]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 tls: Optional[pulumi.Input['LoggingTlsArgs']] = None):
        """
        Input properties used for looking up and filtering Logging resources.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingCaBundleArgs']]] ca_bundles: List of CA bundles for TLS validation.
        :param pulumi.Input[builtins.bool] include_hostname: Whether to include the hostname in log messages.
        :param pulumi.Input['LoggingRemoteForwardingArgs'] remote_forwarding: Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingServerArgs']]] servers: A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        :param pulumi.Input[builtins.str] state: Current state of the logging resource.
        :param pulumi.Input['LoggingTlsArgs'] tls: TLS configuration for secure logging.
        """
        if ca_bundles is not None:
            pulumi.set(__self__, "ca_bundles", ca_bundles)
        if include_hostname is not None:
            pulumi.set(__self__, "include_hostname", include_hostname)
        if remote_forwarding is not None:
            pulumi.set(__self__, "remote_forwarding", remote_forwarding)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="caBundles")
    def ca_bundles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingCaBundleArgs']]]]:
        """
        List of CA bundles for TLS validation.
        """
        return pulumi.get(self, "ca_bundles")

    @ca_bundles.setter
    def ca_bundles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingCaBundleArgs']]]]):
        pulumi.set(self, "ca_bundles", value)

    @property
    @pulumi.getter(name="includeHostname")
    def include_hostname(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to include the hostname in log messages.
        """
        return pulumi.get(self, "include_hostname")

    @include_hostname.setter
    def include_hostname(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "include_hostname", value)

    @property
    @pulumi.getter(name="remoteForwarding")
    def remote_forwarding(self) -> Optional[pulumi.Input['LoggingRemoteForwardingArgs']]:
        """
        Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        """
        return pulumi.get(self, "remote_forwarding")

    @remote_forwarding.setter
    def remote_forwarding(self, value: Optional[pulumi.Input['LoggingRemoteForwardingArgs']]):
        pulumi.set(self, "remote_forwarding", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingServerArgs']]]]:
        """
        A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Current state of the logging resource.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['LoggingTlsArgs']]:
        """
        TLS configuration for secure logging.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['LoggingTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.type_token("f5os:index/logging:Logging")
class Logging(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_bundles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LoggingCaBundleArgs', 'LoggingCaBundleArgsDict']]]]] = None,
                 include_hostname: Optional[pulumi.Input[builtins.bool]] = None,
                 remote_forwarding: Optional[pulumi.Input[Union['LoggingRemoteForwardingArgs', 'LoggingRemoteForwardingArgsDict']]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LoggingServerArgs', 'LoggingServerArgsDict']]]]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 tls: Optional[pulumi.Input[Union['LoggingTlsArgs', 'LoggingTlsArgsDict']]] = None,
                 __props__=None):
        """
        The `Logging` resource manages logging configuration on F5OS devices, including remote servers, TLS, CA bundles, remote forwarding, and hostname inclusion.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        logging = f5os.Logging("logging",
            include_hostname=False,
            servers=[
                {
                    "address": "192.168.100.1",
                    "port": 514,
                    "protocol": "tcp",
                    "authentication": False,
                    "logs": [{
                        "facility": "local0",
                        "severity": "debug",
                    }],
                },
                {
                    "address": "192.168.100.2",
                    "port": 514,
                    "protocol": "tcp",
                    "authentication": False,
                    "logs": [{
                        "facility": "authpriv",
                        "severity": "emergency",
                    }],
                },
            ],
            remote_forwarding={
                "enabled": True,
                "logs": [
                    {
                        "facility": "local0",
                        "severity": "error",
                    },
                    {
                        "facility": "authpriv",
                        "severity": "critical",
                    },
                ],
                "files": [
                    {
                        "name": "rseries_debug.log",
                    },
                    {
                        "name": "rseries_audit.log",
                    },
                ],
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LoggingCaBundleArgs', 'LoggingCaBundleArgsDict']]]] ca_bundles: List of CA bundles for TLS validation.
        :param pulumi.Input[builtins.bool] include_hostname: Whether to include the hostname in log messages.
        :param pulumi.Input[Union['LoggingRemoteForwardingArgs', 'LoggingRemoteForwardingArgsDict']] remote_forwarding: Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LoggingServerArgs', 'LoggingServerArgsDict']]]] servers: A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        :param pulumi.Input[builtins.str] state: Current state of the logging resource.
        :param pulumi.Input[Union['LoggingTlsArgs', 'LoggingTlsArgsDict']] tls: TLS configuration for secure logging.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LoggingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The `Logging` resource manages logging configuration on F5OS devices, including remote servers, TLS, CA bundles, remote forwarding, and hostname inclusion.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        logging = f5os.Logging("logging",
            include_hostname=False,
            servers=[
                {
                    "address": "192.168.100.1",
                    "port": 514,
                    "protocol": "tcp",
                    "authentication": False,
                    "logs": [{
                        "facility": "local0",
                        "severity": "debug",
                    }],
                },
                {
                    "address": "192.168.100.2",
                    "port": 514,
                    "protocol": "tcp",
                    "authentication": False,
                    "logs": [{
                        "facility": "authpriv",
                        "severity": "emergency",
                    }],
                },
            ],
            remote_forwarding={
                "enabled": True,
                "logs": [
                    {
                        "facility": "local0",
                        "severity": "error",
                    },
                    {
                        "facility": "authpriv",
                        "severity": "critical",
                    },
                ],
                "files": [
                    {
                        "name": "rseries_debug.log",
                    },
                    {
                        "name": "rseries_audit.log",
                    },
                ],
            })
        ```

        :param str resource_name: The name of the resource.
        :param LoggingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoggingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_bundles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LoggingCaBundleArgs', 'LoggingCaBundleArgsDict']]]]] = None,
                 include_hostname: Optional[pulumi.Input[builtins.bool]] = None,
                 remote_forwarding: Optional[pulumi.Input[Union['LoggingRemoteForwardingArgs', 'LoggingRemoteForwardingArgsDict']]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LoggingServerArgs', 'LoggingServerArgsDict']]]]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 tls: Optional[pulumi.Input[Union['LoggingTlsArgs', 'LoggingTlsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoggingArgs.__new__(LoggingArgs)

            __props__.__dict__["ca_bundles"] = ca_bundles
            __props__.__dict__["include_hostname"] = include_hostname
            __props__.__dict__["remote_forwarding"] = remote_forwarding
            __props__.__dict__["servers"] = servers
            __props__.__dict__["state"] = state
            __props__.__dict__["tls"] = tls
        super(Logging, __self__).__init__(
            'f5os:index/logging:Logging',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ca_bundles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LoggingCaBundleArgs', 'LoggingCaBundleArgsDict']]]]] = None,
            include_hostname: Optional[pulumi.Input[builtins.bool]] = None,
            remote_forwarding: Optional[pulumi.Input[Union['LoggingRemoteForwardingArgs', 'LoggingRemoteForwardingArgsDict']]] = None,
            servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LoggingServerArgs', 'LoggingServerArgsDict']]]]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            tls: Optional[pulumi.Input[Union['LoggingTlsArgs', 'LoggingTlsArgsDict']]] = None) -> 'Logging':
        """
        Get an existing Logging resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LoggingCaBundleArgs', 'LoggingCaBundleArgsDict']]]] ca_bundles: List of CA bundles for TLS validation.
        :param pulumi.Input[builtins.bool] include_hostname: Whether to include the hostname in log messages.
        :param pulumi.Input[Union['LoggingRemoteForwardingArgs', 'LoggingRemoteForwardingArgsDict']] remote_forwarding: Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LoggingServerArgs', 'LoggingServerArgsDict']]]] servers: A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        :param pulumi.Input[builtins.str] state: Current state of the logging resource.
        :param pulumi.Input[Union['LoggingTlsArgs', 'LoggingTlsArgsDict']] tls: TLS configuration for secure logging.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoggingState.__new__(_LoggingState)

        __props__.__dict__["ca_bundles"] = ca_bundles
        __props__.__dict__["include_hostname"] = include_hostname
        __props__.__dict__["remote_forwarding"] = remote_forwarding
        __props__.__dict__["servers"] = servers
        __props__.__dict__["state"] = state
        __props__.__dict__["tls"] = tls
        return Logging(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="caBundles")
    def ca_bundles(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingCaBundle']]]:
        """
        List of CA bundles for TLS validation.
        """
        return pulumi.get(self, "ca_bundles")

    @property
    @pulumi.getter(name="includeHostname")
    def include_hostname(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Whether to include the hostname in log messages.
        """
        return pulumi.get(self, "include_hostname")

    @property
    @pulumi.getter(name="remoteForwarding")
    def remote_forwarding(self) -> pulumi.Output[Optional['outputs.LoggingRemoteForwarding']]:
        """
        Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        """
        return pulumi.get(self, "remote_forwarding")

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingServer']]]:
        """
        A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        Current state of the logging resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tls(self) -> pulumi.Output[Optional['outputs.LoggingTls']]:
        """
        TLS configuration for secure logging.
        """
        return pulumi.get(self, "tls")

