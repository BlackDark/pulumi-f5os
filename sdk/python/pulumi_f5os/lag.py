# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LagArgs', 'Lag']

@pulumi.input_type
class LagArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None):
        """
        The set of arguments for constructing a Lag resource.
        :param pulumi.Input[builtins.str] interval: The LACP interval of the interface to be created.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] members: List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
        :param pulumi.Input[builtins.str] mode: The LACP mode of the interface to be created.
        :param pulumi.Input[builtins.str] name: Name of the Link Aggregation Group interface (LAG) interface to configure
        :param pulumi.Input[builtins.int] native_vlan: Configures the VLAN ID to associate with LAG interface.
               The `native_vlan` parameter is used for untagged traffic.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] trunk_vlans: Configures multiple VLAN IDs to associate with the LAG interface.
               The `trunk_vlans` parameter is used for tagged traffic
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_vlan is not None:
            pulumi.set(__self__, "native_vlan", native_vlan)
        if trunk_vlans is not None:
            pulumi.set(__self__, "trunk_vlans", trunk_vlans)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The LACP interval of the interface to be created.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The LACP mode of the interface to be created.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Link Aggregation Group interface (LAG) interface to configure
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Configures the VLAN ID to associate with LAG interface.
        The `native_vlan` parameter is used for untagged traffic.
        """
        return pulumi.get(self, "native_vlan")

    @native_vlan.setter
    def native_vlan(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "native_vlan", value)

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        Configures multiple VLAN IDs to associate with the LAG interface.
        The `trunk_vlans` parameter is used for tagged traffic
        """
        return pulumi.get(self, "trunk_vlans")

    @trunk_vlans.setter
    def trunk_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "trunk_vlans", value)


@pulumi.input_type
class _LagState:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None):
        """
        Input properties used for looking up and filtering Lag resources.
        :param pulumi.Input[builtins.str] interval: The LACP interval of the interface to be created.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] members: List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
        :param pulumi.Input[builtins.str] mode: The LACP mode of the interface to be created.
        :param pulumi.Input[builtins.str] name: Name of the Link Aggregation Group interface (LAG) interface to configure
        :param pulumi.Input[builtins.int] native_vlan: Configures the VLAN ID to associate with LAG interface.
               The `native_vlan` parameter is used for untagged traffic.
        :param pulumi.Input[builtins.str] status: Operational state of the LAG interface.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] trunk_vlans: Configures multiple VLAN IDs to associate with the LAG interface.
               The `trunk_vlans` parameter is used for tagged traffic
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_vlan is not None:
            pulumi.set(__self__, "native_vlan", native_vlan)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trunk_vlans is not None:
            pulumi.set(__self__, "trunk_vlans", trunk_vlans)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The LACP interval of the interface to be created.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The LACP mode of the interface to be created.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Link Aggregation Group interface (LAG) interface to configure
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Configures the VLAN ID to associate with LAG interface.
        The `native_vlan` parameter is used for untagged traffic.
        """
        return pulumi.get(self, "native_vlan")

    @native_vlan.setter
    def native_vlan(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "native_vlan", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Operational state of the LAG interface.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        Configures multiple VLAN IDs to associate with the LAG interface.
        The `trunk_vlans` parameter is used for tagged traffic
        """
        return pulumi.get(self, "trunk_vlans")

    @trunk_vlans.setter
    def trunk_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "trunk_vlans", value)


@pulumi.type_token("f5os:index/lag:Lag")
class Lag(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 interval: Optional[pulumi.Input[builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 __props__=None):
        """
        Resource to Manage network Link Aggregation Group (LAG) interfaces on F5OS systems like VELOS chassis partitions or rSeries platforms

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        test_lag = f5os.Lag("test_lag",
            name="test_lag",
            members=["1.0"],
            native_vlan=5,
            trunk_vlans=[
                1,
                2,
                3,
            ])
        ```

        ## Import

        LAG Interface can be imported by specifying the LAG Interface name

        ```sh
        $ pulumi import f5os:index/lag:Lag test-import test-lag
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] interval: The LACP interval of the interface to be created.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] members: List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
        :param pulumi.Input[builtins.str] mode: The LACP mode of the interface to be created.
        :param pulumi.Input[builtins.str] name: Name of the Link Aggregation Group interface (LAG) interface to configure
        :param pulumi.Input[builtins.int] native_vlan: Configures the VLAN ID to associate with LAG interface.
               The `native_vlan` parameter is used for untagged traffic.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] trunk_vlans: Configures multiple VLAN IDs to associate with the LAG interface.
               The `trunk_vlans` parameter is used for tagged traffic
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LagArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource to Manage network Link Aggregation Group (LAG) interfaces on F5OS systems like VELOS chassis partitions or rSeries platforms

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        test_lag = f5os.Lag("test_lag",
            name="test_lag",
            members=["1.0"],
            native_vlan=5,
            trunk_vlans=[
                1,
                2,
                3,
            ])
        ```

        ## Import

        LAG Interface can be imported by specifying the LAG Interface name

        ```sh
        $ pulumi import f5os:index/lag:Lag test-import test-lag
        ```

        :param str resource_name: The name of the resource.
        :param LagArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LagArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 interval: Optional[pulumi.Input[builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LagArgs.__new__(LagArgs)

            __props__.__dict__["interval"] = interval
            __props__.__dict__["members"] = members
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["native_vlan"] = native_vlan
            __props__.__dict__["trunk_vlans"] = trunk_vlans
            __props__.__dict__["status"] = None
        super(Lag, __self__).__init__(
            'f5os:index/lag:Lag',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            interval: Optional[pulumi.Input[builtins.str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            mode: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            native_vlan: Optional[pulumi.Input[builtins.int]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None) -> 'Lag':
        """
        Get an existing Lag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] interval: The LACP interval of the interface to be created.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] members: List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
        :param pulumi.Input[builtins.str] mode: The LACP mode of the interface to be created.
        :param pulumi.Input[builtins.str] name: Name of the Link Aggregation Group interface (LAG) interface to configure
        :param pulumi.Input[builtins.int] native_vlan: Configures the VLAN ID to associate with LAG interface.
               The `native_vlan` parameter is used for untagged traffic.
        :param pulumi.Input[builtins.str] status: Operational state of the LAG interface.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] trunk_vlans: Configures multiple VLAN IDs to associate with the LAG interface.
               The `trunk_vlans` parameter is used for tagged traffic
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LagState.__new__(_LagState)

        __props__.__dict__["interval"] = interval
        __props__.__dict__["members"] = members
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["native_vlan"] = native_vlan
        __props__.__dict__["status"] = status
        __props__.__dict__["trunk_vlans"] = trunk_vlans
        return Lag(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[builtins.str]:
        """
        The LACP interval of the interface to be created.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[builtins.str]:
        """
        The LACP mode of the interface to be created.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Link Aggregation Group interface (LAG) interface to configure
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Configures the VLAN ID to associate with LAG interface.
        The `native_vlan` parameter is used for untagged traffic.
        """
        return pulumi.get(self, "native_vlan")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        Operational state of the LAG interface.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        """
        Configures multiple VLAN IDs to associate with the LAG interface.
        The `trunk_vlans` parameter is used for tagged traffic
        """
        return pulumi.get(self, "trunk_vlans")

