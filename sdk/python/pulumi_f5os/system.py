# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SystemArgs', 'System']

@pulumi.input_type
class SystemArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[builtins.str],
                 cli_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 httpd_ciphersuite: Optional[pulumi.Input[builtins.str]] = None,
                 login_banner: Optional[pulumi.Input[builtins.str]] = None,
                 motd: Optional[pulumi.Input[builtins.str]] = None,
                 sshd_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_hkey_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_idle_timeout: Optional[pulumi.Input[builtins.str]] = None,
                 sshd_kex_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_mac_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[builtins.str]] = None,
                 token_lifetime: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a System resource.
        :param pulumi.Input[builtins.str] hostname: System Hostname
        :param pulumi.Input[builtins.int] cli_timeout: CLI idle timeout
        :param pulumi.Input[builtins.str] httpd_ciphersuite: HTTPS Ciphersuite in OpenSSL format
        :param pulumi.Input[builtins.str] login_banner: Login Banner
        :param pulumi.Input[builtins.str] motd: Message of the day
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_ciphers: List of httpd ciphersuite in OpenSSL format
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_hkey_algs: List of the sshd host key algorithms in OpenSSH format
        :param pulumi.Input[builtins.str] sshd_idle_timeout: SSH Idle timeout
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_kex_algs: List of sshd key exchange algorithms in OpenSSH format
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_mac_algs: List of sshd Mac algorithms in OpenSSH format
        :param pulumi.Input[builtins.str] timezone: Timezone for the system per TZ database name
        :param pulumi.Input[builtins.int] token_lifetime: Token lifetime length in minutes
        """
        pulumi.set(__self__, "hostname", hostname)
        if cli_timeout is not None:
            pulumi.set(__self__, "cli_timeout", cli_timeout)
        if httpd_ciphersuite is not None:
            pulumi.set(__self__, "httpd_ciphersuite", httpd_ciphersuite)
        if login_banner is not None:
            pulumi.set(__self__, "login_banner", login_banner)
        if motd is not None:
            pulumi.set(__self__, "motd", motd)
        if sshd_ciphers is not None:
            pulumi.set(__self__, "sshd_ciphers", sshd_ciphers)
        if sshd_hkey_algs is not None:
            pulumi.set(__self__, "sshd_hkey_algs", sshd_hkey_algs)
        if sshd_idle_timeout is not None:
            pulumi.set(__self__, "sshd_idle_timeout", sshd_idle_timeout)
        if sshd_kex_algs is not None:
            pulumi.set(__self__, "sshd_kex_algs", sshd_kex_algs)
        if sshd_mac_algs is not None:
            pulumi.set(__self__, "sshd_mac_algs", sshd_mac_algs)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if token_lifetime is not None:
            pulumi.set(__self__, "token_lifetime", token_lifetime)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[builtins.str]:
        """
        System Hostname
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="cliTimeout")
    def cli_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        CLI idle timeout
        """
        return pulumi.get(self, "cli_timeout")

    @cli_timeout.setter
    def cli_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cli_timeout", value)

    @property
    @pulumi.getter(name="httpdCiphersuite")
    def httpd_ciphersuite(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        HTTPS Ciphersuite in OpenSSL format
        """
        return pulumi.get(self, "httpd_ciphersuite")

    @httpd_ciphersuite.setter
    def httpd_ciphersuite(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "httpd_ciphersuite", value)

    @property
    @pulumi.getter(name="loginBanner")
    def login_banner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Login Banner
        """
        return pulumi.get(self, "login_banner")

    @login_banner.setter
    def login_banner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "login_banner", value)

    @property
    @pulumi.getter
    def motd(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Message of the day
        """
        return pulumi.get(self, "motd")

    @motd.setter
    def motd(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "motd", value)

    @property
    @pulumi.getter(name="sshdCiphers")
    def sshd_ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of httpd ciphersuite in OpenSSL format
        """
        return pulumi.get(self, "sshd_ciphers")

    @sshd_ciphers.setter
    def sshd_ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sshd_ciphers", value)

    @property
    @pulumi.getter(name="sshdHkeyAlgs")
    def sshd_hkey_algs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of the sshd host key algorithms in OpenSSH format
        """
        return pulumi.get(self, "sshd_hkey_algs")

    @sshd_hkey_algs.setter
    def sshd_hkey_algs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sshd_hkey_algs", value)

    @property
    @pulumi.getter(name="sshdIdleTimeout")
    def sshd_idle_timeout(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        SSH Idle timeout
        """
        return pulumi.get(self, "sshd_idle_timeout")

    @sshd_idle_timeout.setter
    def sshd_idle_timeout(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sshd_idle_timeout", value)

    @property
    @pulumi.getter(name="sshdKexAlgs")
    def sshd_kex_algs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of sshd key exchange algorithms in OpenSSH format
        """
        return pulumi.get(self, "sshd_kex_algs")

    @sshd_kex_algs.setter
    def sshd_kex_algs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sshd_kex_algs", value)

    @property
    @pulumi.getter(name="sshdMacAlgs")
    def sshd_mac_algs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of sshd Mac algorithms in OpenSSH format
        """
        return pulumi.get(self, "sshd_mac_algs")

    @sshd_mac_algs.setter
    def sshd_mac_algs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sshd_mac_algs", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Timezone for the system per TZ database name
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="tokenLifetime")
    def token_lifetime(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Token lifetime length in minutes
        """
        return pulumi.get(self, "token_lifetime")

    @token_lifetime.setter
    def token_lifetime(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "token_lifetime", value)


@pulumi.input_type
class _SystemState:
    def __init__(__self__, *,
                 cli_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 httpd_ciphersuite: Optional[pulumi.Input[builtins.str]] = None,
                 login_banner: Optional[pulumi.Input[builtins.str]] = None,
                 motd: Optional[pulumi.Input[builtins.str]] = None,
                 sshd_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_hkey_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_idle_timeout: Optional[pulumi.Input[builtins.str]] = None,
                 sshd_kex_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_mac_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[builtins.str]] = None,
                 token_lifetime: Optional[pulumi.Input[builtins.int]] = None):
        """
        Input properties used for looking up and filtering System resources.
        :param pulumi.Input[builtins.int] cli_timeout: CLI idle timeout
        :param pulumi.Input[builtins.str] hostname: System Hostname
        :param pulumi.Input[builtins.str] httpd_ciphersuite: HTTPS Ciphersuite in OpenSSL format
        :param pulumi.Input[builtins.str] login_banner: Login Banner
        :param pulumi.Input[builtins.str] motd: Message of the day
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_ciphers: List of httpd ciphersuite in OpenSSL format
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_hkey_algs: List of the sshd host key algorithms in OpenSSH format
        :param pulumi.Input[builtins.str] sshd_idle_timeout: SSH Idle timeout
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_kex_algs: List of sshd key exchange algorithms in OpenSSH format
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_mac_algs: List of sshd Mac algorithms in OpenSSH format
        :param pulumi.Input[builtins.str] timezone: Timezone for the system per TZ database name
        :param pulumi.Input[builtins.int] token_lifetime: Token lifetime length in minutes
        """
        if cli_timeout is not None:
            pulumi.set(__self__, "cli_timeout", cli_timeout)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if httpd_ciphersuite is not None:
            pulumi.set(__self__, "httpd_ciphersuite", httpd_ciphersuite)
        if login_banner is not None:
            pulumi.set(__self__, "login_banner", login_banner)
        if motd is not None:
            pulumi.set(__self__, "motd", motd)
        if sshd_ciphers is not None:
            pulumi.set(__self__, "sshd_ciphers", sshd_ciphers)
        if sshd_hkey_algs is not None:
            pulumi.set(__self__, "sshd_hkey_algs", sshd_hkey_algs)
        if sshd_idle_timeout is not None:
            pulumi.set(__self__, "sshd_idle_timeout", sshd_idle_timeout)
        if sshd_kex_algs is not None:
            pulumi.set(__self__, "sshd_kex_algs", sshd_kex_algs)
        if sshd_mac_algs is not None:
            pulumi.set(__self__, "sshd_mac_algs", sshd_mac_algs)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if token_lifetime is not None:
            pulumi.set(__self__, "token_lifetime", token_lifetime)

    @property
    @pulumi.getter(name="cliTimeout")
    def cli_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        CLI idle timeout
        """
        return pulumi.get(self, "cli_timeout")

    @cli_timeout.setter
    def cli_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cli_timeout", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        System Hostname
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="httpdCiphersuite")
    def httpd_ciphersuite(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        HTTPS Ciphersuite in OpenSSL format
        """
        return pulumi.get(self, "httpd_ciphersuite")

    @httpd_ciphersuite.setter
    def httpd_ciphersuite(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "httpd_ciphersuite", value)

    @property
    @pulumi.getter(name="loginBanner")
    def login_banner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Login Banner
        """
        return pulumi.get(self, "login_banner")

    @login_banner.setter
    def login_banner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "login_banner", value)

    @property
    @pulumi.getter
    def motd(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Message of the day
        """
        return pulumi.get(self, "motd")

    @motd.setter
    def motd(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "motd", value)

    @property
    @pulumi.getter(name="sshdCiphers")
    def sshd_ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of httpd ciphersuite in OpenSSL format
        """
        return pulumi.get(self, "sshd_ciphers")

    @sshd_ciphers.setter
    def sshd_ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sshd_ciphers", value)

    @property
    @pulumi.getter(name="sshdHkeyAlgs")
    def sshd_hkey_algs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of the sshd host key algorithms in OpenSSH format
        """
        return pulumi.get(self, "sshd_hkey_algs")

    @sshd_hkey_algs.setter
    def sshd_hkey_algs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sshd_hkey_algs", value)

    @property
    @pulumi.getter(name="sshdIdleTimeout")
    def sshd_idle_timeout(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        SSH Idle timeout
        """
        return pulumi.get(self, "sshd_idle_timeout")

    @sshd_idle_timeout.setter
    def sshd_idle_timeout(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sshd_idle_timeout", value)

    @property
    @pulumi.getter(name="sshdKexAlgs")
    def sshd_kex_algs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of sshd key exchange algorithms in OpenSSH format
        """
        return pulumi.get(self, "sshd_kex_algs")

    @sshd_kex_algs.setter
    def sshd_kex_algs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sshd_kex_algs", value)

    @property
    @pulumi.getter(name="sshdMacAlgs")
    def sshd_mac_algs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of sshd Mac algorithms in OpenSSH format
        """
        return pulumi.get(self, "sshd_mac_algs")

    @sshd_mac_algs.setter
    def sshd_mac_algs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sshd_mac_algs", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Timezone for the system per TZ database name
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="tokenLifetime")
    def token_lifetime(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Token lifetime length in minutes
        """
        return pulumi.get(self, "token_lifetime")

    @token_lifetime.setter
    def token_lifetime(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "token_lifetime", value)


@pulumi.type_token("f5os:index/system:System")
class System(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cli_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 httpd_ciphersuite: Optional[pulumi.Input[builtins.str]] = None,
                 login_banner: Optional[pulumi.Input[builtins.str]] = None,
                 motd: Optional[pulumi.Input[builtins.str]] = None,
                 sshd_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_hkey_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_idle_timeout: Optional[pulumi.Input[builtins.str]] = None,
                 sshd_kex_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_mac_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[builtins.str]] = None,
                 token_lifetime: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Resource to manage generic system settings

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manages System settings on F5OS platforms
        system_settings = f5os.System("system_settings",
            hostname="system.example.net",
            motd="Todays weather is great!",
            login_banner="Welcome to the system.",
            timezone="UTC",
            cli_timeout=3600,
            token_lifetime=15,
            sshd_idle_timeout="1800",
            httpd_ciphersuite="ECDHE-RSA-AES256-GCM-SHA384",
            sshd_ciphers=[
                "aes256-ctr",
                "aes256-gcm@openssh.com",
            ],
            sshd_kex_algs=["ecdh-sha2-nistp384"],
            sshd_mac_algs=["hmac-sha1-96"],
            sshd_hkey_algs=["ssh-rsa"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] cli_timeout: CLI idle timeout
        :param pulumi.Input[builtins.str] hostname: System Hostname
        :param pulumi.Input[builtins.str] httpd_ciphersuite: HTTPS Ciphersuite in OpenSSL format
        :param pulumi.Input[builtins.str] login_banner: Login Banner
        :param pulumi.Input[builtins.str] motd: Message of the day
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_ciphers: List of httpd ciphersuite in OpenSSL format
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_hkey_algs: List of the sshd host key algorithms in OpenSSH format
        :param pulumi.Input[builtins.str] sshd_idle_timeout: SSH Idle timeout
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_kex_algs: List of sshd key exchange algorithms in OpenSSH format
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_mac_algs: List of sshd Mac algorithms in OpenSSH format
        :param pulumi.Input[builtins.str] timezone: Timezone for the system per TZ database name
        :param pulumi.Input[builtins.int] token_lifetime: Token lifetime length in minutes
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource to manage generic system settings

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manages System settings on F5OS platforms
        system_settings = f5os.System("system_settings",
            hostname="system.example.net",
            motd="Todays weather is great!",
            login_banner="Welcome to the system.",
            timezone="UTC",
            cli_timeout=3600,
            token_lifetime=15,
            sshd_idle_timeout="1800",
            httpd_ciphersuite="ECDHE-RSA-AES256-GCM-SHA384",
            sshd_ciphers=[
                "aes256-ctr",
                "aes256-gcm@openssh.com",
            ],
            sshd_kex_algs=["ecdh-sha2-nistp384"],
            sshd_mac_algs=["hmac-sha1-96"],
            sshd_hkey_algs=["ssh-rsa"])
        ```

        :param str resource_name: The name of the resource.
        :param SystemArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cli_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 httpd_ciphersuite: Optional[pulumi.Input[builtins.str]] = None,
                 login_banner: Optional[pulumi.Input[builtins.str]] = None,
                 motd: Optional[pulumi.Input[builtins.str]] = None,
                 sshd_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_hkey_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_idle_timeout: Optional[pulumi.Input[builtins.str]] = None,
                 sshd_kex_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sshd_mac_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[builtins.str]] = None,
                 token_lifetime: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemArgs.__new__(SystemArgs)

            __props__.__dict__["cli_timeout"] = cli_timeout
            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["httpd_ciphersuite"] = httpd_ciphersuite
            __props__.__dict__["login_banner"] = login_banner
            __props__.__dict__["motd"] = motd
            __props__.__dict__["sshd_ciphers"] = sshd_ciphers
            __props__.__dict__["sshd_hkey_algs"] = sshd_hkey_algs
            __props__.__dict__["sshd_idle_timeout"] = sshd_idle_timeout
            __props__.__dict__["sshd_kex_algs"] = sshd_kex_algs
            __props__.__dict__["sshd_mac_algs"] = sshd_mac_algs
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["token_lifetime"] = token_lifetime
        super(System, __self__).__init__(
            'f5os:index/system:System',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cli_timeout: Optional[pulumi.Input[builtins.int]] = None,
            hostname: Optional[pulumi.Input[builtins.str]] = None,
            httpd_ciphersuite: Optional[pulumi.Input[builtins.str]] = None,
            login_banner: Optional[pulumi.Input[builtins.str]] = None,
            motd: Optional[pulumi.Input[builtins.str]] = None,
            sshd_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            sshd_hkey_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            sshd_idle_timeout: Optional[pulumi.Input[builtins.str]] = None,
            sshd_kex_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            sshd_mac_algs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            timezone: Optional[pulumi.Input[builtins.str]] = None,
            token_lifetime: Optional[pulumi.Input[builtins.int]] = None) -> 'System':
        """
        Get an existing System resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] cli_timeout: CLI idle timeout
        :param pulumi.Input[builtins.str] hostname: System Hostname
        :param pulumi.Input[builtins.str] httpd_ciphersuite: HTTPS Ciphersuite in OpenSSL format
        :param pulumi.Input[builtins.str] login_banner: Login Banner
        :param pulumi.Input[builtins.str] motd: Message of the day
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_ciphers: List of httpd ciphersuite in OpenSSL format
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_hkey_algs: List of the sshd host key algorithms in OpenSSH format
        :param pulumi.Input[builtins.str] sshd_idle_timeout: SSH Idle timeout
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_kex_algs: List of sshd key exchange algorithms in OpenSSH format
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sshd_mac_algs: List of sshd Mac algorithms in OpenSSH format
        :param pulumi.Input[builtins.str] timezone: Timezone for the system per TZ database name
        :param pulumi.Input[builtins.int] token_lifetime: Token lifetime length in minutes
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemState.__new__(_SystemState)

        __props__.__dict__["cli_timeout"] = cli_timeout
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["httpd_ciphersuite"] = httpd_ciphersuite
        __props__.__dict__["login_banner"] = login_banner
        __props__.__dict__["motd"] = motd
        __props__.__dict__["sshd_ciphers"] = sshd_ciphers
        __props__.__dict__["sshd_hkey_algs"] = sshd_hkey_algs
        __props__.__dict__["sshd_idle_timeout"] = sshd_idle_timeout
        __props__.__dict__["sshd_kex_algs"] = sshd_kex_algs
        __props__.__dict__["sshd_mac_algs"] = sshd_mac_algs
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["token_lifetime"] = token_lifetime
        return System(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cliTimeout")
    def cli_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        CLI idle timeout
        """
        return pulumi.get(self, "cli_timeout")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[builtins.str]:
        """
        System Hostname
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="httpdCiphersuite")
    def httpd_ciphersuite(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        HTTPS Ciphersuite in OpenSSL format
        """
        return pulumi.get(self, "httpd_ciphersuite")

    @property
    @pulumi.getter(name="loginBanner")
    def login_banner(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Login Banner
        """
        return pulumi.get(self, "login_banner")

    @property
    @pulumi.getter
    def motd(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Message of the day
        """
        return pulumi.get(self, "motd")

    @property
    @pulumi.getter(name="sshdCiphers")
    def sshd_ciphers(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        List of httpd ciphersuite in OpenSSL format
        """
        return pulumi.get(self, "sshd_ciphers")

    @property
    @pulumi.getter(name="sshdHkeyAlgs")
    def sshd_hkey_algs(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        List of the sshd host key algorithms in OpenSSH format
        """
        return pulumi.get(self, "sshd_hkey_algs")

    @property
    @pulumi.getter(name="sshdIdleTimeout")
    def sshd_idle_timeout(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        SSH Idle timeout
        """
        return pulumi.get(self, "sshd_idle_timeout")

    @property
    @pulumi.getter(name="sshdKexAlgs")
    def sshd_kex_algs(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        List of sshd key exchange algorithms in OpenSSH format
        """
        return pulumi.get(self, "sshd_kex_algs")

    @property
    @pulumi.getter(name="sshdMacAlgs")
    def sshd_mac_algs(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        List of sshd Mac algorithms in OpenSSH format
        """
        return pulumi.get(self, "sshd_mac_algs")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Timezone for the system per TZ database name
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="tokenLifetime")
    def token_lifetime(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Token lifetime length in minutes
        """
        return pulumi.get(self, "token_lifetime")

