# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LicenseArgs', 'License']

@pulumi.input_type
class LicenseArgs:
    def __init__(__self__, *,
                 registration_key: pulumi.Input[builtins.str],
                 addon_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 license_server: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a License resource.
        :param pulumi.Input[builtins.str] registration_key: The Base registration key from a license server for the device license activation.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] addon_keys: The additional registration keys from a license server for the device license activation.
        :param pulumi.Input[builtins.str] license_server: The license server url.
        """
        pulumi.set(__self__, "registration_key", registration_key)
        if addon_keys is not None:
            pulumi.set(__self__, "addon_keys", addon_keys)
        if license_server is not None:
            pulumi.set(__self__, "license_server", license_server)

    @property
    @pulumi.getter(name="registrationKey")
    def registration_key(self) -> pulumi.Input[builtins.str]:
        """
        The Base registration key from a license server for the device license activation.
        """
        return pulumi.get(self, "registration_key")

    @registration_key.setter
    def registration_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "registration_key", value)

    @property
    @pulumi.getter(name="addonKeys")
    def addon_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The additional registration keys from a license server for the device license activation.
        """
        return pulumi.get(self, "addon_keys")

    @addon_keys.setter
    def addon_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "addon_keys", value)

    @property
    @pulumi.getter(name="licenseServer")
    def license_server(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The license server url.
        """
        return pulumi.get(self, "license_server")

    @license_server.setter
    def license_server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "license_server", value)


@pulumi.input_type
class _LicenseState:
    def __init__(__self__, *,
                 addon_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 license_server: Optional[pulumi.Input[builtins.str]] = None,
                 registration_key: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering License resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] addon_keys: The additional registration keys from a license server for the device license activation.
        :param pulumi.Input[builtins.str] license_server: The license server url.
        :param pulumi.Input[builtins.str] registration_key: The Base registration key from a license server for the device license activation.
        """
        if addon_keys is not None:
            pulumi.set(__self__, "addon_keys", addon_keys)
        if license_server is not None:
            pulumi.set(__self__, "license_server", license_server)
        if registration_key is not None:
            pulumi.set(__self__, "registration_key", registration_key)

    @property
    @pulumi.getter(name="addonKeys")
    def addon_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The additional registration keys from a license server for the device license activation.
        """
        return pulumi.get(self, "addon_keys")

    @addon_keys.setter
    def addon_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "addon_keys", value)

    @property
    @pulumi.getter(name="licenseServer")
    def license_server(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The license server url.
        """
        return pulumi.get(self, "license_server")

    @license_server.setter
    def license_server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "license_server", value)

    @property
    @pulumi.getter(name="registrationKey")
    def registration_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Base registration key from a license server for the device license activation.
        """
        return pulumi.get(self, "registration_key")

    @registration_key.setter
    def registration_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "registration_key", value)


@pulumi.type_token("f5os:index/license:License")
class License(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 license_server: Optional[pulumi.Input[builtins.str]] = None,
                 registration_key: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Resource to manage license activation and deactivation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        dummy_license = f5os.License("dummy_license",
            registration_key="W9XXX-8YYYZ-8KKK7-7PPP2-ZZZZZZ",
            addon_keys=[
                "NNNWWWW-9PPPPKK",
                "WWWWXXX-4ZZZYYY",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] addon_keys: The additional registration keys from a license server for the device license activation.
        :param pulumi.Input[builtins.str] license_server: The license server url.
        :param pulumi.Input[builtins.str] registration_key: The Base registration key from a license server for the device license activation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LicenseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource to manage license activation and deactivation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        dummy_license = f5os.License("dummy_license",
            registration_key="W9XXX-8YYYZ-8KKK7-7PPP2-ZZZZZZ",
            addon_keys=[
                "NNNWWWW-9PPPPKK",
                "WWWWXXX-4ZZZYYY",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param LicenseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LicenseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 license_server: Optional[pulumi.Input[builtins.str]] = None,
                 registration_key: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LicenseArgs.__new__(LicenseArgs)

            __props__.__dict__["addon_keys"] = None if addon_keys is None else pulumi.Output.secret(addon_keys)
            __props__.__dict__["license_server"] = license_server
            if registration_key is None and not opts.urn:
                raise TypeError("Missing required property 'registration_key'")
            __props__.__dict__["registration_key"] = None if registration_key is None else pulumi.Output.secret(registration_key)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["addonKeys", "registrationKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(License, __self__).__init__(
            'f5os:index/license:License',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addon_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            license_server: Optional[pulumi.Input[builtins.str]] = None,
            registration_key: Optional[pulumi.Input[builtins.str]] = None) -> 'License':
        """
        Get an existing License resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] addon_keys: The additional registration keys from a license server for the device license activation.
        :param pulumi.Input[builtins.str] license_server: The license server url.
        :param pulumi.Input[builtins.str] registration_key: The Base registration key from a license server for the device license activation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LicenseState.__new__(_LicenseState)

        __props__.__dict__["addon_keys"] = addon_keys
        __props__.__dict__["license_server"] = license_server
        __props__.__dict__["registration_key"] = registration_key
        return License(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addonKeys")
    def addon_keys(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        The additional registration keys from a license server for the device license activation.
        """
        return pulumi.get(self, "addon_keys")

    @property
    @pulumi.getter(name="licenseServer")
    def license_server(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The license server url.
        """
        return pulumi.get(self, "license_server")

    @property
    @pulumi.getter(name="registrationKey")
    def registration_key(self) -> pulumi.Output[builtins.str]:
        """
        The Base registration key from a license server for the device license activation.
        """
        return pulumi.get(self, "registration_key")

