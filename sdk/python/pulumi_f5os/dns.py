# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DnsArgs', 'Dns']

@pulumi.input_type
class DnsArgs:
    def __init__(__self__, *,
                 dns_servers: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a Dns resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: List of DNS server IP addresses. Example: `["8.8.8.8", "1.1.1.1"]`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_domains: List of DNS search domains. Example: `["internal.domain"]`
        """
        pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_domains is not None:
            pulumi.set(__self__, "dns_domains", dns_domains)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        List of DNS server IP addresses. Example: `["8.8.8.8", "1.1.1.1"]`
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsDomains")
    def dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of DNS search domains. Example: `["internal.domain"]`
        """
        return pulumi.get(self, "dns_domains")

    @dns_domains.setter
    def dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_domains", value)


@pulumi.input_type
class _DnsState:
    def __init__(__self__, *,
                 dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering Dns resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_domains: List of DNS search domains. Example: `["internal.domain"]`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: List of DNS server IP addresses. Example: `["8.8.8.8", "1.1.1.1"]`
        """
        if dns_domains is not None:
            pulumi.set(__self__, "dns_domains", dns_domains)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)

    @property
    @pulumi.getter(name="dnsDomains")
    def dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of DNS search domains. Example: `["internal.domain"]`
        """
        return pulumi.get(self, "dns_domains")

    @dns_domains.setter
    def dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_domains", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of DNS server IP addresses. Example: `["8.8.8.8", "1.1.1.1"]`
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_servers", value)


@pulumi.type_token("f5os:index/dns:Dns")
class Dns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Resource used to configure DNS settings (servers and domains) on F5OS systems (VELOS or rSeries).

        > **NOTE:** The `Dns` resource updates DNS servers and search domains on the F5OS platforms using Open API

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manages DNS servers and search domains on F5OS platforms
        test = f5os.Dns("test",
            dns_servers=["8.8.8.8"],
            dns_domains=["internal.domain"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_domains: List of DNS search domains. Example: `["internal.domain"]`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: List of DNS server IP addresses. Example: `["8.8.8.8", "1.1.1.1"]`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource used to configure DNS settings (servers and domains) on F5OS systems (VELOS or rSeries).

        > **NOTE:** The `Dns` resource updates DNS servers and search domains on the F5OS platforms using Open API

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manages DNS servers and search domains on F5OS platforms
        test = f5os.Dns("test",
            dns_servers=["8.8.8.8"],
            dns_domains=["internal.domain"])
        ```

        :param str resource_name: The name of the resource.
        :param DnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsArgs.__new__(DnsArgs)

            __props__.__dict__["dns_domains"] = dns_domains
            if dns_servers is None and not opts.urn:
                raise TypeError("Missing required property 'dns_servers'")
            __props__.__dict__["dns_servers"] = dns_servers
        super(Dns, __self__).__init__(
            'f5os:index/dns:Dns',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None) -> 'Dns':
        """
        Get an existing Dns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_domains: List of DNS search domains. Example: `["internal.domain"]`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: List of DNS server IP addresses. Example: `["8.8.8.8", "1.1.1.1"]`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsState.__new__(_DnsState)

        __props__.__dict__["dns_domains"] = dns_domains
        __props__.__dict__["dns_servers"] = dns_servers
        return Dns(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dnsDomains")
    def dns_domains(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of DNS search domains. Example: `["internal.domain"]`
        """
        return pulumi.get(self, "dns_domains")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of DNS server IP addresses. Example: `["8.8.8.8", "1.1.1.1"]`
        """
        return pulumi.get(self, "dns_servers")

