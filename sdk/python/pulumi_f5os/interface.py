# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['InterfaceArgs', 'Interface']

@pulumi.input_type
class InterfaceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None):
        """
        The set of arguments for constructing a Interface resource.
        :param pulumi.Input[builtins.bool] enabled: Enables or disables interface.
        :param pulumi.Input[builtins.str] name: Name of the interface to configure.
               For VELOS partitions blade/port format is required e.g. `1/1.0`
        :param pulumi.Input[builtins.int] native_vlan: Configures the VLAN ID to associate with the interface.
               The `native_vlan` parameter is used for untagged traffic.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] trunk_vlans: Configures multiple VLAN IDs to associate with the interface.
               The `trunk_vlans` parameter is used for tagged traffic
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_vlan is not None:
            pulumi.set(__self__, "native_vlan", native_vlan)
        if trunk_vlans is not None:
            pulumi.set(__self__, "trunk_vlans", trunk_vlans)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables or disables interface.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the interface to configure.
        For VELOS partitions blade/port format is required e.g. `1/1.0`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Configures the VLAN ID to associate with the interface.
        The `native_vlan` parameter is used for untagged traffic.
        """
        return pulumi.get(self, "native_vlan")

    @native_vlan.setter
    def native_vlan(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "native_vlan", value)

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        Configures multiple VLAN IDs to associate with the interface.
        The `trunk_vlans` parameter is used for tagged traffic
        """
        return pulumi.get(self, "trunk_vlans")

    @trunk_vlans.setter
    def trunk_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "trunk_vlans", value)


@pulumi.input_type
class _InterfaceState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None):
        """
        Input properties used for looking up and filtering Interface resources.
        :param pulumi.Input[builtins.bool] enabled: Enables or disables interface.
        :param pulumi.Input[builtins.str] name: Name of the interface to configure.
               For VELOS partitions blade/port format is required e.g. `1/1.0`
        :param pulumi.Input[builtins.int] native_vlan: Configures the VLAN ID to associate with the interface.
               The `native_vlan` parameter is used for untagged traffic.
        :param pulumi.Input[builtins.str] status: Operational state of the interface.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] trunk_vlans: Configures multiple VLAN IDs to associate with the interface.
               The `trunk_vlans` parameter is used for tagged traffic
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_vlan is not None:
            pulumi.set(__self__, "native_vlan", native_vlan)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trunk_vlans is not None:
            pulumi.set(__self__, "trunk_vlans", trunk_vlans)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables or disables interface.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the interface to configure.
        For VELOS partitions blade/port format is required e.g. `1/1.0`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Configures the VLAN ID to associate with the interface.
        The `native_vlan` parameter is used for untagged traffic.
        """
        return pulumi.get(self, "native_vlan")

    @native_vlan.setter
    def native_vlan(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "native_vlan", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Operational state of the interface.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        Configures multiple VLAN IDs to associate with the interface.
        The `trunk_vlans` parameter is used for tagged traffic
        """
        return pulumi.get(self, "trunk_vlans")

    @trunk_vlans.setter
    def trunk_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "trunk_vlans", value)


@pulumi.type_token("f5os:index/interface:Interface")
class Interface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 __props__=None):
        """
        Resource to Manage network interfaces on F5OS systems like VELOS chassis partitions or rSeries platforms

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        test_interface = f5os.Interface("test_interface",
            enabled=True,
            name="1.0",
            native_vlan=5,
            trunk_vlans=[
                1,
                2,
                3,
            ])
        ```

        ## Import

        Interface can be imported by specifying the Interface name

        ```sh
        $ pulumi import f5os:index/interface:Interface test-import 1.0
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] enabled: Enables or disables interface.
        :param pulumi.Input[builtins.str] name: Name of the interface to configure.
               For VELOS partitions blade/port format is required e.g. `1/1.0`
        :param pulumi.Input[builtins.int] native_vlan: Configures the VLAN ID to associate with the interface.
               The `native_vlan` parameter is used for untagged traffic.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] trunk_vlans: Configures multiple VLAN IDs to associate with the interface.
               The `trunk_vlans` parameter is used for tagged traffic
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InterfaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource to Manage network interfaces on F5OS systems like VELOS chassis partitions or rSeries platforms

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        test_interface = f5os.Interface("test_interface",
            enabled=True,
            name="1.0",
            native_vlan=5,
            trunk_vlans=[
                1,
                2,
                3,
            ])
        ```

        ## Import

        Interface can be imported by specifying the Interface name

        ```sh
        $ pulumi import f5os:index/interface:Interface test-import 1.0
        ```

        :param str resource_name: The name of the resource.
        :param InterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterfaceArgs.__new__(InterfaceArgs)

            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["native_vlan"] = native_vlan
            __props__.__dict__["trunk_vlans"] = trunk_vlans
            __props__.__dict__["status"] = None
        super(Interface, __self__).__init__(
            'f5os:index/interface:Interface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            native_vlan: Optional[pulumi.Input[builtins.int]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            trunk_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None) -> 'Interface':
        """
        Get an existing Interface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] enabled: Enables or disables interface.
        :param pulumi.Input[builtins.str] name: Name of the interface to configure.
               For VELOS partitions blade/port format is required e.g. `1/1.0`
        :param pulumi.Input[builtins.int] native_vlan: Configures the VLAN ID to associate with the interface.
               The `native_vlan` parameter is used for untagged traffic.
        :param pulumi.Input[builtins.str] status: Operational state of the interface.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] trunk_vlans: Configures multiple VLAN IDs to associate with the interface.
               The `trunk_vlans` parameter is used for tagged traffic
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterfaceState.__new__(_InterfaceState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["native_vlan"] = native_vlan
        __props__.__dict__["status"] = status
        __props__.__dict__["trunk_vlans"] = trunk_vlans
        return Interface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Enables or disables interface.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the interface to configure.
        For VELOS partitions blade/port format is required e.g. `1/1.0`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Configures the VLAN ID to associate with the interface.
        The `native_vlan` parameter is used for untagged traffic.
        """
        return pulumi.get(self, "native_vlan")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        Operational state of the interface.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        """
        Configures multiple VLAN IDs to associate with the interface.
        The `trunk_vlans` parameter is used for tagged traffic
        """
        return pulumi.get(self, "trunk_vlans")

