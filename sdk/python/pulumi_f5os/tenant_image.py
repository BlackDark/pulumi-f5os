# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['TenantImageArgs', 'TenantImage']

@pulumi.input_type
class TenantImageArgs:
    def __init__(__self__, *,
                 image_name: pulumi.Input[builtins.str],
                 local_path: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 remote_password: Optional[pulumi.Input[builtins.str]] = None,
                 remote_path: Optional[pulumi.Input[builtins.str]] = None,
                 remote_port: Optional[pulumi.Input[builtins.int]] = None,
                 remote_user: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 upload_from_path: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a TenantImage resource.
        :param pulumi.Input[builtins.str] image_name: Name of the tenant image.
        :param pulumi.Input[builtins.str] local_path: The path on the F5OS where the the tenant image is to be imported to.
        :param pulumi.Input[builtins.str] protocol: Protocol for image transfer.
        :param pulumi.Input[builtins.str] remote_host: The hostname or IP address of the remote server on which the tenant image is stored.
               The server must make the image accessible via the specified protocol.
        :param pulumi.Input[builtins.str] remote_password: Password for the user on the remote server on which the tenant image is stored.
        :param pulumi.Input[builtins.str] remote_path: The path to the tenant image on the remote server.
        :param pulumi.Input[builtins.int] remote_port: The port on the remote host to which you want to connect.
               If the port is not provided, a default port for the selected protocol is used.
        :param pulumi.Input[builtins.str] remote_user: User name for the remote server on which the tenant image is stored.
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for image import to finish.
        :param pulumi.Input[builtins.str] upload_from_path: The path to image on the local machine which is to be uploaded
        """
        pulumi.set(__self__, "image_name", image_name)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote_host is not None:
            pulumi.set(__self__, "remote_host", remote_host)
        if remote_password is not None:
            pulumi.set(__self__, "remote_password", remote_password)
        if remote_path is not None:
            pulumi.set(__self__, "remote_path", remote_path)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if remote_user is not None:
            pulumi.set(__self__, "remote_user", remote_user)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if upload_from_path is not None:
            pulumi.set(__self__, "upload_from_path", upload_from_path)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the tenant image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The path on the F5OS where the the tenant image is to be imported to.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Protocol for image transfer.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="remoteHost")
    def remote_host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The hostname or IP address of the remote server on which the tenant image is stored.
        The server must make the image accessible via the specified protocol.
        """
        return pulumi.get(self, "remote_host")

    @remote_host.setter
    def remote_host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_host", value)

    @property
    @pulumi.getter(name="remotePassword")
    def remote_password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Password for the user on the remote server on which the tenant image is stored.
        """
        return pulumi.get(self, "remote_password")

    @remote_password.setter
    def remote_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_password", value)

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The path to the tenant image on the remote server.
        """
        return pulumi.get(self, "remote_path")

    @remote_path.setter
    def remote_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_path", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on the remote host to which you want to connect.
        If the port is not provided, a default port for the selected protocol is used.
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="remoteUser")
    def remote_user(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        User name for the remote server on which the tenant image is stored.
        """
        return pulumi.get(self, "remote_user")

    @remote_user.setter
    def remote_user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_user", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of seconds to wait for image import to finish.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="uploadFromPath")
    def upload_from_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The path to image on the local machine which is to be uploaded
        """
        return pulumi.get(self, "upload_from_path")

    @upload_from_path.setter
    def upload_from_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "upload_from_path", value)


@pulumi.input_type
class _TenantImageState:
    def __init__(__self__, *,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 local_path: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 remote_password: Optional[pulumi.Input[builtins.str]] = None,
                 remote_path: Optional[pulumi.Input[builtins.str]] = None,
                 remote_port: Optional[pulumi.Input[builtins.int]] = None,
                 remote_user: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 upload_from_path: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering TenantImage resources.
        :param pulumi.Input[builtins.str] image_name: Name of the tenant image.
        :param pulumi.Input[builtins.str] local_path: The path on the F5OS where the the tenant image is to be imported to.
        :param pulumi.Input[builtins.str] protocol: Protocol for image transfer.
        :param pulumi.Input[builtins.str] remote_host: The hostname or IP address of the remote server on which the tenant image is stored.
               The server must make the image accessible via the specified protocol.
        :param pulumi.Input[builtins.str] remote_password: Password for the user on the remote server on which the tenant image is stored.
        :param pulumi.Input[builtins.str] remote_path: The path to the tenant image on the remote server.
        :param pulumi.Input[builtins.int] remote_port: The port on the remote host to which you want to connect.
               If the port is not provided, a default port for the selected protocol is used.
        :param pulumi.Input[builtins.str] remote_user: User name for the remote server on which the tenant image is stored.
        :param pulumi.Input[builtins.str] status: Status of Imported Image
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for image import to finish.
        :param pulumi.Input[builtins.str] upload_from_path: The path to image on the local machine which is to be uploaded
        """
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote_host is not None:
            pulumi.set(__self__, "remote_host", remote_host)
        if remote_password is not None:
            pulumi.set(__self__, "remote_password", remote_password)
        if remote_path is not None:
            pulumi.set(__self__, "remote_path", remote_path)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if remote_user is not None:
            pulumi.set(__self__, "remote_user", remote_user)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if upload_from_path is not None:
            pulumi.set(__self__, "upload_from_path", upload_from_path)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the tenant image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The path on the F5OS where the the tenant image is to be imported to.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Protocol for image transfer.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="remoteHost")
    def remote_host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The hostname or IP address of the remote server on which the tenant image is stored.
        The server must make the image accessible via the specified protocol.
        """
        return pulumi.get(self, "remote_host")

    @remote_host.setter
    def remote_host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_host", value)

    @property
    @pulumi.getter(name="remotePassword")
    def remote_password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Password for the user on the remote server on which the tenant image is stored.
        """
        return pulumi.get(self, "remote_password")

    @remote_password.setter
    def remote_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_password", value)

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The path to the tenant image on the remote server.
        """
        return pulumi.get(self, "remote_path")

    @remote_path.setter
    def remote_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_path", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on the remote host to which you want to connect.
        If the port is not provided, a default port for the selected protocol is used.
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="remoteUser")
    def remote_user(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        User name for the remote server on which the tenant image is stored.
        """
        return pulumi.get(self, "remote_user")

    @remote_user.setter
    def remote_user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_user", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Status of Imported Image
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of seconds to wait for image import to finish.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="uploadFromPath")
    def upload_from_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The path to image on the local machine which is to be uploaded
        """
        return pulumi.get(self, "upload_from_path")

    @upload_from_path.setter
    def upload_from_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "upload_from_path", value)


@pulumi.type_token("f5os:index/tenantImage:TenantImage")
class TenantImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 local_path: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 remote_password: Optional[pulumi.Input[builtins.str]] = None,
                 remote_path: Optional[pulumi.Input[builtins.str]] = None,
                 remote_port: Optional[pulumi.Input[builtins.int]] = None,
                 remote_user: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 upload_from_path: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Resource used for Manage F5OS tenant images

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Resource for tenant image copy
        test = f5os.TenantImage("test",
            image_name="BIGIP-17.1.0-0.0.16.ALL-F5OS.qcow2.zip.bundle",
            remote_host="xxxxx",
            remote_path="v17.1.0/daily/current/VM",
            local_path="images",
            timeout=360)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] image_name: Name of the tenant image.
        :param pulumi.Input[builtins.str] local_path: The path on the F5OS where the the tenant image is to be imported to.
        :param pulumi.Input[builtins.str] protocol: Protocol for image transfer.
        :param pulumi.Input[builtins.str] remote_host: The hostname or IP address of the remote server on which the tenant image is stored.
               The server must make the image accessible via the specified protocol.
        :param pulumi.Input[builtins.str] remote_password: Password for the user on the remote server on which the tenant image is stored.
        :param pulumi.Input[builtins.str] remote_path: The path to the tenant image on the remote server.
        :param pulumi.Input[builtins.int] remote_port: The port on the remote host to which you want to connect.
               If the port is not provided, a default port for the selected protocol is used.
        :param pulumi.Input[builtins.str] remote_user: User name for the remote server on which the tenant image is stored.
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for image import to finish.
        :param pulumi.Input[builtins.str] upload_from_path: The path to image on the local machine which is to be uploaded
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TenantImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource used for Manage F5OS tenant images

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Resource for tenant image copy
        test = f5os.TenantImage("test",
            image_name="BIGIP-17.1.0-0.0.16.ALL-F5OS.qcow2.zip.bundle",
            remote_host="xxxxx",
            remote_path="v17.1.0/daily/current/VM",
            local_path="images",
            timeout=360)
        ```

        :param str resource_name: The name of the resource.
        :param TenantImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TenantImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 local_path: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 remote_password: Optional[pulumi.Input[builtins.str]] = None,
                 remote_path: Optional[pulumi.Input[builtins.str]] = None,
                 remote_port: Optional[pulumi.Input[builtins.int]] = None,
                 remote_user: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 upload_from_path: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TenantImageArgs.__new__(TenantImageArgs)

            if image_name is None and not opts.urn:
                raise TypeError("Missing required property 'image_name'")
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["local_path"] = local_path
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["remote_host"] = remote_host
            __props__.__dict__["remote_password"] = None if remote_password is None else pulumi.Output.secret(remote_password)
            __props__.__dict__["remote_path"] = remote_path
            __props__.__dict__["remote_port"] = remote_port
            __props__.__dict__["remote_user"] = remote_user
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["upload_from_path"] = upload_from_path
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["remotePassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(TenantImage, __self__).__init__(
            'f5os:index/tenantImage:TenantImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            image_name: Optional[pulumi.Input[builtins.str]] = None,
            local_path: Optional[pulumi.Input[builtins.str]] = None,
            protocol: Optional[pulumi.Input[builtins.str]] = None,
            remote_host: Optional[pulumi.Input[builtins.str]] = None,
            remote_password: Optional[pulumi.Input[builtins.str]] = None,
            remote_path: Optional[pulumi.Input[builtins.str]] = None,
            remote_port: Optional[pulumi.Input[builtins.int]] = None,
            remote_user: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            timeout: Optional[pulumi.Input[builtins.int]] = None,
            upload_from_path: Optional[pulumi.Input[builtins.str]] = None) -> 'TenantImage':
        """
        Get an existing TenantImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] image_name: Name of the tenant image.
        :param pulumi.Input[builtins.str] local_path: The path on the F5OS where the the tenant image is to be imported to.
        :param pulumi.Input[builtins.str] protocol: Protocol for image transfer.
        :param pulumi.Input[builtins.str] remote_host: The hostname or IP address of the remote server on which the tenant image is stored.
               The server must make the image accessible via the specified protocol.
        :param pulumi.Input[builtins.str] remote_password: Password for the user on the remote server on which the tenant image is stored.
        :param pulumi.Input[builtins.str] remote_path: The path to the tenant image on the remote server.
        :param pulumi.Input[builtins.int] remote_port: The port on the remote host to which you want to connect.
               If the port is not provided, a default port for the selected protocol is used.
        :param pulumi.Input[builtins.str] remote_user: User name for the remote server on which the tenant image is stored.
        :param pulumi.Input[builtins.str] status: Status of Imported Image
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for image import to finish.
        :param pulumi.Input[builtins.str] upload_from_path: The path to image on the local machine which is to be uploaded
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TenantImageState.__new__(_TenantImageState)

        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["local_path"] = local_path
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["remote_host"] = remote_host
        __props__.__dict__["remote_password"] = remote_password
        __props__.__dict__["remote_path"] = remote_path
        __props__.__dict__["remote_port"] = remote_port
        __props__.__dict__["remote_user"] = remote_user
        __props__.__dict__["status"] = status
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["upload_from_path"] = upload_from_path
        return TenantImage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the tenant image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The path on the F5OS where the the tenant image is to be imported to.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Protocol for image transfer.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="remoteHost")
    def remote_host(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The hostname or IP address of the remote server on which the tenant image is stored.
        The server must make the image accessible via the specified protocol.
        """
        return pulumi.get(self, "remote_host")

    @property
    @pulumi.getter(name="remotePassword")
    def remote_password(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Password for the user on the remote server on which the tenant image is stored.
        """
        return pulumi.get(self, "remote_password")

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The path to the tenant image on the remote server.
        """
        return pulumi.get(self, "remote_path")

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The port on the remote host to which you want to connect.
        If the port is not provided, a default port for the selected protocol is used.
        """
        return pulumi.get(self, "remote_port")

    @property
    @pulumi.getter(name="remoteUser")
    def remote_user(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        User name for the remote server on which the tenant image is stored.
        """
        return pulumi.get(self, "remote_user")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        Status of Imported Image
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[builtins.int]:
        """
        The number of seconds to wait for image import to finish.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="uploadFromPath")
    def upload_from_path(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The path to image on the local machine which is to be uploaded
        """
        return pulumi.get(self, "upload_from_path")

