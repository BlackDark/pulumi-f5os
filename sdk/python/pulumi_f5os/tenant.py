# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['TenantArgs', 'Tenant']

@pulumi.input_type
class TenantArgs:
    def __init__(__self__, *,
                 cpu_cores: pulumi.Input[builtins.int],
                 image_name: pulumi.Input[builtins.str],
                 mgmt_gateway: pulumi.Input[builtins.str],
                 mgmt_ip: pulumi.Input[builtins.str],
                 mgmt_prefix: pulumi.Input[builtins.int],
                 virtual_disk_size: pulumi.Input[builtins.int],
                 cryptos: Optional[pulumi.Input[builtins.str]] = None,
                 dag_ipv6_prefix_length: Optional[pulumi.Input[builtins.int]] = None,
                 deployment_file: Optional[pulumi.Input[builtins.str]] = None,
                 mac_block_size: Optional[pulumi.Input[builtins.str]] = None,
                 memory: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 running_state: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None):
        """
        The set of arguments for constructing a Tenant resource.
        :param pulumi.Input[builtins.int] cpu_cores: The number of vCPUs that should be added to the tenant.
               Required for create operations.
        :param pulumi.Input[builtins.str] image_name: Name of the tenant image to be used.
               Required for create operations
        :param pulumi.Input[builtins.str] mgmt_gateway: Tenant management gateway.
        :param pulumi.Input[builtins.str] mgmt_ip: IP address used to connect to the deployed tenant.
               Required for create operations.
        :param pulumi.Input[builtins.int] mgmt_prefix: Tenant management CIDR prefix.
        :param pulumi.Input[builtins.int] virtual_disk_size: Minimum virtual disk size required for Tenant deployment
        :param pulumi.Input[builtins.str] cryptos: Whether crypto and compression hardware offload should be enabled on the tenant.
               We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
        :param pulumi.Input[builtins.int] dag_ipv6_prefix_length: Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
        :param pulumi.Input[builtins.str] deployment_file: Deployment file used for BIG-IP-Next .
               Required for if `type` is `BIG-IP-Next`.
        :param pulumi.Input[builtins.str] mac_block_size: Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
               Default value is `one`.
        :param pulumi.Input[builtins.int] memory: The amount of memory that should be provided to the tenant in MB.
               More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
        :param pulumi.Input[builtins.str] name: Name of the tenant.
               The first character must be a letter.
               Only lowercase alphanumeric characters are allowed.
               No special or extended characters are allowed except for hyphens.
               The name cannot exceed 50 characters.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] nodes: List of integers. Specifies on which blades nodes the tenants are deployed.
               Required for create operations.
               For single blade platforms like rSeries only the value of 1 should be provided.
        :param pulumi.Input[builtins.str] running_state: Desired running_state of the tenant.
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for image import to finish.
        :param pulumi.Input[builtins.str] type: Name of the tenant image to be used.
               Required for create operations
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] vlans: The existing VLAN IDs in the chassis partition that should be added to the tenant.
               The order of these VLANs is ignored.
               This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
               Required for create operations
        """
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "mgmt_gateway", mgmt_gateway)
        pulumi.set(__self__, "mgmt_ip", mgmt_ip)
        pulumi.set(__self__, "mgmt_prefix", mgmt_prefix)
        pulumi.set(__self__, "virtual_disk_size", virtual_disk_size)
        if cryptos is not None:
            pulumi.set(__self__, "cryptos", cryptos)
        if dag_ipv6_prefix_length is not None:
            pulumi.set(__self__, "dag_ipv6_prefix_length", dag_ipv6_prefix_length)
        if deployment_file is not None:
            pulumi.set(__self__, "deployment_file", deployment_file)
        if mac_block_size is not None:
            pulumi.set(__self__, "mac_block_size", mac_block_size)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if running_state is not None:
            pulumi.set(__self__, "running_state", running_state)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> pulumi.Input[builtins.int]:
        """
        The number of vCPUs that should be added to the tenant.
        Required for create operations.
        """
        return pulumi.get(self, "cpu_cores")

    @cpu_cores.setter
    def cpu_cores(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "cpu_cores", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the tenant image to be used.
        Required for create operations
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="mgmtGateway")
    def mgmt_gateway(self) -> pulumi.Input[builtins.str]:
        """
        Tenant management gateway.
        """
        return pulumi.get(self, "mgmt_gateway")

    @mgmt_gateway.setter
    def mgmt_gateway(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mgmt_gateway", value)

    @property
    @pulumi.getter(name="mgmtIp")
    def mgmt_ip(self) -> pulumi.Input[builtins.str]:
        """
        IP address used to connect to the deployed tenant.
        Required for create operations.
        """
        return pulumi.get(self, "mgmt_ip")

    @mgmt_ip.setter
    def mgmt_ip(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mgmt_ip", value)

    @property
    @pulumi.getter(name="mgmtPrefix")
    def mgmt_prefix(self) -> pulumi.Input[builtins.int]:
        """
        Tenant management CIDR prefix.
        """
        return pulumi.get(self, "mgmt_prefix")

    @mgmt_prefix.setter
    def mgmt_prefix(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "mgmt_prefix", value)

    @property
    @pulumi.getter(name="virtualDiskSize")
    def virtual_disk_size(self) -> pulumi.Input[builtins.int]:
        """
        Minimum virtual disk size required for Tenant deployment
        """
        return pulumi.get(self, "virtual_disk_size")

    @virtual_disk_size.setter
    def virtual_disk_size(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "virtual_disk_size", value)

    @property
    @pulumi.getter
    def cryptos(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Whether crypto and compression hardware offload should be enabled on the tenant.
        We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
        """
        return pulumi.get(self, "cryptos")

    @cryptos.setter
    def cryptos(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cryptos", value)

    @property
    @pulumi.getter(name="dagIpv6PrefixLength")
    def dag_ipv6_prefix_length(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
        """
        return pulumi.get(self, "dag_ipv6_prefix_length")

    @dag_ipv6_prefix_length.setter
    def dag_ipv6_prefix_length(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dag_ipv6_prefix_length", value)

    @property
    @pulumi.getter(name="deploymentFile")
    def deployment_file(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Deployment file used for BIG-IP-Next .
        Required for if `type` is `BIG-IP-Next`.
        """
        return pulumi.get(self, "deployment_file")

    @deployment_file.setter
    def deployment_file(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "deployment_file", value)

    @property
    @pulumi.getter(name="macBlockSize")
    def mac_block_size(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
        Default value is `one`.
        """
        return pulumi.get(self, "mac_block_size")

    @mac_block_size.setter
    def mac_block_size(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac_block_size", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of memory that should be provided to the tenant in MB.
        More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the tenant.
        The first character must be a letter.
        Only lowercase alphanumeric characters are allowed.
        No special or extended characters are allowed except for hyphens.
        The name cannot exceed 50 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        List of integers. Specifies on which blades nodes the tenants are deployed.
        Required for create operations.
        For single blade platforms like rSeries only the value of 1 should be provided.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="runningState")
    def running_state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Desired running_state of the tenant.
        """
        return pulumi.get(self, "running_state")

    @running_state.setter
    def running_state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "running_state", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of seconds to wait for image import to finish.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the tenant image to be used.
        Required for create operations
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        The existing VLAN IDs in the chassis partition that should be added to the tenant.
        The order of these VLANs is ignored.
        This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
        Required for create operations
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "vlans", value)


@pulumi.input_type
class _TenantState:
    def __init__(__self__, *,
                 cpu_cores: Optional[pulumi.Input[builtins.int]] = None,
                 cryptos: Optional[pulumi.Input[builtins.str]] = None,
                 dag_ipv6_prefix_length: Optional[pulumi.Input[builtins.int]] = None,
                 deployment_file: Optional[pulumi.Input[builtins.str]] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 mac_block_size: Optional[pulumi.Input[builtins.str]] = None,
                 memory: Optional[pulumi.Input[builtins.int]] = None,
                 mgmt_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 mgmt_ip: Optional[pulumi.Input[builtins.str]] = None,
                 mgmt_prefix: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 running_state: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_disk_size: Optional[pulumi.Input[builtins.int]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None):
        """
        Input properties used for looking up and filtering Tenant resources.
        :param pulumi.Input[builtins.int] cpu_cores: The number of vCPUs that should be added to the tenant.
               Required for create operations.
        :param pulumi.Input[builtins.str] cryptos: Whether crypto and compression hardware offload should be enabled on the tenant.
               We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
        :param pulumi.Input[builtins.int] dag_ipv6_prefix_length: Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
        :param pulumi.Input[builtins.str] deployment_file: Deployment file used for BIG-IP-Next .
               Required for if `type` is `BIG-IP-Next`.
        :param pulumi.Input[builtins.str] image_name: Name of the tenant image to be used.
               Required for create operations
        :param pulumi.Input[builtins.str] mac_block_size: Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
               Default value is `one`.
        :param pulumi.Input[builtins.int] memory: The amount of memory that should be provided to the tenant in MB.
               More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
        :param pulumi.Input[builtins.str] mgmt_gateway: Tenant management gateway.
        :param pulumi.Input[builtins.str] mgmt_ip: IP address used to connect to the deployed tenant.
               Required for create operations.
        :param pulumi.Input[builtins.int] mgmt_prefix: Tenant management CIDR prefix.
        :param pulumi.Input[builtins.str] name: Name of the tenant.
               The first character must be a letter.
               Only lowercase alphanumeric characters are allowed.
               No special or extended characters are allowed except for hyphens.
               The name cannot exceed 50 characters.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] nodes: List of integers. Specifies on which blades nodes the tenants are deployed.
               Required for create operations.
               For single blade platforms like rSeries only the value of 1 should be provided.
        :param pulumi.Input[builtins.str] running_state: Desired running_state of the tenant.
        :param pulumi.Input[builtins.str] status: Tenant status
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for image import to finish.
        :param pulumi.Input[builtins.str] type: Name of the tenant image to be used.
               Required for create operations
        :param pulumi.Input[builtins.int] virtual_disk_size: Minimum virtual disk size required for Tenant deployment
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] vlans: The existing VLAN IDs in the chassis partition that should be added to the tenant.
               The order of these VLANs is ignored.
               This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
               Required for create operations
        """
        if cpu_cores is not None:
            pulumi.set(__self__, "cpu_cores", cpu_cores)
        if cryptos is not None:
            pulumi.set(__self__, "cryptos", cryptos)
        if dag_ipv6_prefix_length is not None:
            pulumi.set(__self__, "dag_ipv6_prefix_length", dag_ipv6_prefix_length)
        if deployment_file is not None:
            pulumi.set(__self__, "deployment_file", deployment_file)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if mac_block_size is not None:
            pulumi.set(__self__, "mac_block_size", mac_block_size)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if mgmt_gateway is not None:
            pulumi.set(__self__, "mgmt_gateway", mgmt_gateway)
        if mgmt_ip is not None:
            pulumi.set(__self__, "mgmt_ip", mgmt_ip)
        if mgmt_prefix is not None:
            pulumi.set(__self__, "mgmt_prefix", mgmt_prefix)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if running_state is not None:
            pulumi.set(__self__, "running_state", running_state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_disk_size is not None:
            pulumi.set(__self__, "virtual_disk_size", virtual_disk_size)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of vCPUs that should be added to the tenant.
        Required for create operations.
        """
        return pulumi.get(self, "cpu_cores")

    @cpu_cores.setter
    def cpu_cores(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cpu_cores", value)

    @property
    @pulumi.getter
    def cryptos(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Whether crypto and compression hardware offload should be enabled on the tenant.
        We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
        """
        return pulumi.get(self, "cryptos")

    @cryptos.setter
    def cryptos(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cryptos", value)

    @property
    @pulumi.getter(name="dagIpv6PrefixLength")
    def dag_ipv6_prefix_length(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
        """
        return pulumi.get(self, "dag_ipv6_prefix_length")

    @dag_ipv6_prefix_length.setter
    def dag_ipv6_prefix_length(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dag_ipv6_prefix_length", value)

    @property
    @pulumi.getter(name="deploymentFile")
    def deployment_file(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Deployment file used for BIG-IP-Next .
        Required for if `type` is `BIG-IP-Next`.
        """
        return pulumi.get(self, "deployment_file")

    @deployment_file.setter
    def deployment_file(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "deployment_file", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the tenant image to be used.
        Required for create operations
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="macBlockSize")
    def mac_block_size(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
        Default value is `one`.
        """
        return pulumi.get(self, "mac_block_size")

    @mac_block_size.setter
    def mac_block_size(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac_block_size", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of memory that should be provided to the tenant in MB.
        More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="mgmtGateway")
    def mgmt_gateway(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Tenant management gateway.
        """
        return pulumi.get(self, "mgmt_gateway")

    @mgmt_gateway.setter
    def mgmt_gateway(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mgmt_gateway", value)

    @property
    @pulumi.getter(name="mgmtIp")
    def mgmt_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        IP address used to connect to the deployed tenant.
        Required for create operations.
        """
        return pulumi.get(self, "mgmt_ip")

    @mgmt_ip.setter
    def mgmt_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mgmt_ip", value)

    @property
    @pulumi.getter(name="mgmtPrefix")
    def mgmt_prefix(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Tenant management CIDR prefix.
        """
        return pulumi.get(self, "mgmt_prefix")

    @mgmt_prefix.setter
    def mgmt_prefix(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "mgmt_prefix", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the tenant.
        The first character must be a letter.
        Only lowercase alphanumeric characters are allowed.
        No special or extended characters are allowed except for hyphens.
        The name cannot exceed 50 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        List of integers. Specifies on which blades nodes the tenants are deployed.
        Required for create operations.
        For single blade platforms like rSeries only the value of 1 should be provided.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="runningState")
    def running_state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Desired running_state of the tenant.
        """
        return pulumi.get(self, "running_state")

    @running_state.setter
    def running_state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "running_state", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Tenant status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of seconds to wait for image import to finish.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the tenant image to be used.
        Required for create operations
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualDiskSize")
    def virtual_disk_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Minimum virtual disk size required for Tenant deployment
        """
        return pulumi.get(self, "virtual_disk_size")

    @virtual_disk_size.setter
    def virtual_disk_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "virtual_disk_size", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        The existing VLAN IDs in the chassis partition that should be added to the tenant.
        The order of these VLANs is ignored.
        This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
        Required for create operations
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "vlans", value)


@pulumi.type_token("f5os:index/tenant:Tenant")
class Tenant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_cores: Optional[pulumi.Input[builtins.int]] = None,
                 cryptos: Optional[pulumi.Input[builtins.str]] = None,
                 dag_ipv6_prefix_length: Optional[pulumi.Input[builtins.int]] = None,
                 deployment_file: Optional[pulumi.Input[builtins.str]] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 mac_block_size: Optional[pulumi.Input[builtins.str]] = None,
                 memory: Optional[pulumi.Input[builtins.int]] = None,
                 mgmt_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 mgmt_ip: Optional[pulumi.Input[builtins.str]] = None,
                 mgmt_prefix: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 running_state: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_disk_size: Optional[pulumi.Input[builtins.int]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 __props__=None):
        """
        Resource used for Manage F5OS tenant on chassis partition/rSeries Appliance

        > **NOTE** `Tenant` resource is used with chassis partition/rSeries appliance, More info on [Tenant](https://techdocs.f5.com/en-us/velos-1-5-0/velos-systems-administration-configuration/title-tenant-management.html#title-tenant-management).
        Provider `f5os` credentials will be chassis partition/rSeries appliance `host`,`username` and `password`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manage F5OS Tenant
        test3 = f5os.Tenant("test3",
            name="testtenant-ecosys3",
            image_name="BIGIP-17.1.0-0.0.16.ALL-F5OS.qcow2.zip.bundle",
            mgmt_ip="10.100.100.26",
            mgmt_gateway="10.100.100.1",
            mgmt_prefix=24,
            type="BIG-IP",
            cpu_cores=8,
            nodes=[1],
            vlans=[
                1,
                2,
            ],
            running_state="deployed",
            virtual_disk_size=82)
        ```

        ## Import

        Tenant can be imported by specifying the tenant Name identifier.

        ```sh
        $ pulumi import f5os:index/tenant:Tenant tenant-import testtenant
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] cpu_cores: The number of vCPUs that should be added to the tenant.
               Required for create operations.
        :param pulumi.Input[builtins.str] cryptos: Whether crypto and compression hardware offload should be enabled on the tenant.
               We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
        :param pulumi.Input[builtins.int] dag_ipv6_prefix_length: Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
        :param pulumi.Input[builtins.str] deployment_file: Deployment file used for BIG-IP-Next .
               Required for if `type` is `BIG-IP-Next`.
        :param pulumi.Input[builtins.str] image_name: Name of the tenant image to be used.
               Required for create operations
        :param pulumi.Input[builtins.str] mac_block_size: Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
               Default value is `one`.
        :param pulumi.Input[builtins.int] memory: The amount of memory that should be provided to the tenant in MB.
               More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
        :param pulumi.Input[builtins.str] mgmt_gateway: Tenant management gateway.
        :param pulumi.Input[builtins.str] mgmt_ip: IP address used to connect to the deployed tenant.
               Required for create operations.
        :param pulumi.Input[builtins.int] mgmt_prefix: Tenant management CIDR prefix.
        :param pulumi.Input[builtins.str] name: Name of the tenant.
               The first character must be a letter.
               Only lowercase alphanumeric characters are allowed.
               No special or extended characters are allowed except for hyphens.
               The name cannot exceed 50 characters.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] nodes: List of integers. Specifies on which blades nodes the tenants are deployed.
               Required for create operations.
               For single blade platforms like rSeries only the value of 1 should be provided.
        :param pulumi.Input[builtins.str] running_state: Desired running_state of the tenant.
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for image import to finish.
        :param pulumi.Input[builtins.str] type: Name of the tenant image to be used.
               Required for create operations
        :param pulumi.Input[builtins.int] virtual_disk_size: Minimum virtual disk size required for Tenant deployment
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] vlans: The existing VLAN IDs in the chassis partition that should be added to the tenant.
               The order of these VLANs is ignored.
               This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
               Required for create operations
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TenantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource used for Manage F5OS tenant on chassis partition/rSeries Appliance

        > **NOTE** `Tenant` resource is used with chassis partition/rSeries appliance, More info on [Tenant](https://techdocs.f5.com/en-us/velos-1-5-0/velos-systems-administration-configuration/title-tenant-management.html#title-tenant-management).
        Provider `f5os` credentials will be chassis partition/rSeries appliance `host`,`username` and `password`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        # Manage F5OS Tenant
        test3 = f5os.Tenant("test3",
            name="testtenant-ecosys3",
            image_name="BIGIP-17.1.0-0.0.16.ALL-F5OS.qcow2.zip.bundle",
            mgmt_ip="10.100.100.26",
            mgmt_gateway="10.100.100.1",
            mgmt_prefix=24,
            type="BIG-IP",
            cpu_cores=8,
            nodes=[1],
            vlans=[
                1,
                2,
            ],
            running_state="deployed",
            virtual_disk_size=82)
        ```

        ## Import

        Tenant can be imported by specifying the tenant Name identifier.

        ```sh
        $ pulumi import f5os:index/tenant:Tenant tenant-import testtenant
        ```

        :param str resource_name: The name of the resource.
        :param TenantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TenantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_cores: Optional[pulumi.Input[builtins.int]] = None,
                 cryptos: Optional[pulumi.Input[builtins.str]] = None,
                 dag_ipv6_prefix_length: Optional[pulumi.Input[builtins.int]] = None,
                 deployment_file: Optional[pulumi.Input[builtins.str]] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 mac_block_size: Optional[pulumi.Input[builtins.str]] = None,
                 memory: Optional[pulumi.Input[builtins.int]] = None,
                 mgmt_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 mgmt_ip: Optional[pulumi.Input[builtins.str]] = None,
                 mgmt_prefix: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 running_state: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_disk_size: Optional[pulumi.Input[builtins.int]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TenantArgs.__new__(TenantArgs)

            if cpu_cores is None and not opts.urn:
                raise TypeError("Missing required property 'cpu_cores'")
            __props__.__dict__["cpu_cores"] = cpu_cores
            __props__.__dict__["cryptos"] = cryptos
            __props__.__dict__["dag_ipv6_prefix_length"] = dag_ipv6_prefix_length
            __props__.__dict__["deployment_file"] = deployment_file
            if image_name is None and not opts.urn:
                raise TypeError("Missing required property 'image_name'")
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["mac_block_size"] = mac_block_size
            __props__.__dict__["memory"] = memory
            if mgmt_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'mgmt_gateway'")
            __props__.__dict__["mgmt_gateway"] = mgmt_gateway
            if mgmt_ip is None and not opts.urn:
                raise TypeError("Missing required property 'mgmt_ip'")
            __props__.__dict__["mgmt_ip"] = mgmt_ip
            if mgmt_prefix is None and not opts.urn:
                raise TypeError("Missing required property 'mgmt_prefix'")
            __props__.__dict__["mgmt_prefix"] = mgmt_prefix
            __props__.__dict__["name"] = name
            __props__.__dict__["nodes"] = nodes
            __props__.__dict__["running_state"] = running_state
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["type"] = type
            if virtual_disk_size is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_disk_size'")
            __props__.__dict__["virtual_disk_size"] = virtual_disk_size
            __props__.__dict__["vlans"] = vlans
            __props__.__dict__["status"] = None
        super(Tenant, __self__).__init__(
            'f5os:index/tenant:Tenant',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cpu_cores: Optional[pulumi.Input[builtins.int]] = None,
            cryptos: Optional[pulumi.Input[builtins.str]] = None,
            dag_ipv6_prefix_length: Optional[pulumi.Input[builtins.int]] = None,
            deployment_file: Optional[pulumi.Input[builtins.str]] = None,
            image_name: Optional[pulumi.Input[builtins.str]] = None,
            mac_block_size: Optional[pulumi.Input[builtins.str]] = None,
            memory: Optional[pulumi.Input[builtins.int]] = None,
            mgmt_gateway: Optional[pulumi.Input[builtins.str]] = None,
            mgmt_ip: Optional[pulumi.Input[builtins.str]] = None,
            mgmt_prefix: Optional[pulumi.Input[builtins.int]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
            running_state: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            timeout: Optional[pulumi.Input[builtins.int]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            virtual_disk_size: Optional[pulumi.Input[builtins.int]] = None,
            vlans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None) -> 'Tenant':
        """
        Get an existing Tenant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] cpu_cores: The number of vCPUs that should be added to the tenant.
               Required for create operations.
        :param pulumi.Input[builtins.str] cryptos: Whether crypto and compression hardware offload should be enabled on the tenant.
               We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
        :param pulumi.Input[builtins.int] dag_ipv6_prefix_length: Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
        :param pulumi.Input[builtins.str] deployment_file: Deployment file used for BIG-IP-Next .
               Required for if `type` is `BIG-IP-Next`.
        :param pulumi.Input[builtins.str] image_name: Name of the tenant image to be used.
               Required for create operations
        :param pulumi.Input[builtins.str] mac_block_size: Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
               Default value is `one`.
        :param pulumi.Input[builtins.int] memory: The amount of memory that should be provided to the tenant in MB.
               More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
        :param pulumi.Input[builtins.str] mgmt_gateway: Tenant management gateway.
        :param pulumi.Input[builtins.str] mgmt_ip: IP address used to connect to the deployed tenant.
               Required for create operations.
        :param pulumi.Input[builtins.int] mgmt_prefix: Tenant management CIDR prefix.
        :param pulumi.Input[builtins.str] name: Name of the tenant.
               The first character must be a letter.
               Only lowercase alphanumeric characters are allowed.
               No special or extended characters are allowed except for hyphens.
               The name cannot exceed 50 characters.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] nodes: List of integers. Specifies on which blades nodes the tenants are deployed.
               Required for create operations.
               For single blade platforms like rSeries only the value of 1 should be provided.
        :param pulumi.Input[builtins.str] running_state: Desired running_state of the tenant.
        :param pulumi.Input[builtins.str] status: Tenant status
        :param pulumi.Input[builtins.int] timeout: The number of seconds to wait for image import to finish.
        :param pulumi.Input[builtins.str] type: Name of the tenant image to be used.
               Required for create operations
        :param pulumi.Input[builtins.int] virtual_disk_size: Minimum virtual disk size required for Tenant deployment
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] vlans: The existing VLAN IDs in the chassis partition that should be added to the tenant.
               The order of these VLANs is ignored.
               This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
               Required for create operations
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TenantState.__new__(_TenantState)

        __props__.__dict__["cpu_cores"] = cpu_cores
        __props__.__dict__["cryptos"] = cryptos
        __props__.__dict__["dag_ipv6_prefix_length"] = dag_ipv6_prefix_length
        __props__.__dict__["deployment_file"] = deployment_file
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["mac_block_size"] = mac_block_size
        __props__.__dict__["memory"] = memory
        __props__.__dict__["mgmt_gateway"] = mgmt_gateway
        __props__.__dict__["mgmt_ip"] = mgmt_ip
        __props__.__dict__["mgmt_prefix"] = mgmt_prefix
        __props__.__dict__["name"] = name
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["running_state"] = running_state
        __props__.__dict__["status"] = status
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["type"] = type
        __props__.__dict__["virtual_disk_size"] = virtual_disk_size
        __props__.__dict__["vlans"] = vlans
        return Tenant(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> pulumi.Output[builtins.int]:
        """
        The number of vCPUs that should be added to the tenant.
        Required for create operations.
        """
        return pulumi.get(self, "cpu_cores")

    @property
    @pulumi.getter
    def cryptos(self) -> pulumi.Output[builtins.str]:
        """
        Whether crypto and compression hardware offload should be enabled on the tenant.
        We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
        """
        return pulumi.get(self, "cryptos")

    @property
    @pulumi.getter(name="dagIpv6PrefixLength")
    def dag_ipv6_prefix_length(self) -> pulumi.Output[builtins.int]:
        """
        Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
        """
        return pulumi.get(self, "dag_ipv6_prefix_length")

    @property
    @pulumi.getter(name="deploymentFile")
    def deployment_file(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Deployment file used for BIG-IP-Next .
        Required for if `type` is `BIG-IP-Next`.
        """
        return pulumi.get(self, "deployment_file")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the tenant image to be used.
        Required for create operations
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="macBlockSize")
    def mac_block_size(self) -> pulumi.Output[builtins.str]:
        """
        Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
        Default value is `one`.
        """
        return pulumi.get(self, "mac_block_size")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The amount of memory that should be provided to the tenant in MB.
        More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="mgmtGateway")
    def mgmt_gateway(self) -> pulumi.Output[builtins.str]:
        """
        Tenant management gateway.
        """
        return pulumi.get(self, "mgmt_gateway")

    @property
    @pulumi.getter(name="mgmtIp")
    def mgmt_ip(self) -> pulumi.Output[builtins.str]:
        """
        IP address used to connect to the deployed tenant.
        Required for create operations.
        """
        return pulumi.get(self, "mgmt_ip")

    @property
    @pulumi.getter(name="mgmtPrefix")
    def mgmt_prefix(self) -> pulumi.Output[builtins.int]:
        """
        Tenant management CIDR prefix.
        """
        return pulumi.get(self, "mgmt_prefix")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the tenant.
        The first character must be a letter.
        Only lowercase alphanumeric characters are allowed.
        No special or extended characters are allowed except for hyphens.
        The name cannot exceed 50 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence[builtins.int]]:
        """
        List of integers. Specifies on which blades nodes the tenants are deployed.
        Required for create operations.
        For single blade platforms like rSeries only the value of 1 should be provided.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="runningState")
    def running_state(self) -> pulumi.Output[builtins.str]:
        """
        Desired running_state of the tenant.
        """
        return pulumi.get(self, "running_state")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        Tenant status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[builtins.int]:
        """
        The number of seconds to wait for image import to finish.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        Name of the tenant image to be used.
        Required for create operations
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDiskSize")
    def virtual_disk_size(self) -> pulumi.Output[builtins.int]:
        """
        Minimum virtual disk size required for Tenant deployment
        """
        return pulumi.get(self, "virtual_disk_size")

    @property
    @pulumi.getter
    def vlans(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        """
        The existing VLAN IDs in the chassis partition that should be added to the tenant.
        The order of these VLANs is ignored.
        This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
        Required for create operations
        """
        return pulumi.get(self, "vlans")

