# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['TlsCertKeyArgs', 'TlsCertKey']

@pulumi.input_type
class TlsCertKeyArgs:
    def __init__(__self__, *,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 confirm_key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 country: Optional[pulumi.Input[builtins.str]] = None,
                 days_valid: Optional[pulumi.Input[builtins.int]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 key_curve: Optional[pulumi.Input[builtins.str]] = None,
                 key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 key_size: Optional[pulumi.Input[builtins.int]] = None,
                 key_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 organization: Optional[pulumi.Input[builtins.str]] = None,
                 province: Optional[pulumi.Input[builtins.str]] = None,
                 subject_alternative_name: Optional[pulumi.Input[builtins.str]] = None,
                 unit: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a TlsCertKey resource.
        :param pulumi.Input[builtins.str] city: The residing cty of the certificate holder.
        :param pulumi.Input[builtins.str] confirm_key_passphrase: This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.str] country: The residing country of the certificate holder.
        :param pulumi.Input[builtins.int] days_valid: The number of days for which the certificate is valid, the default value is 30 days
        :param pulumi.Input[builtins.str] email: The email address of the certificate holder.
        :param pulumi.Input[builtins.str] key_curve: This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.str] key_passphrase: This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.int] key_size: This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        :param pulumi.Input[builtins.str] key_type: The type of the tls key
        :param pulumi.Input[builtins.str] name: Name of the tls certificate.
        :param pulumi.Input[builtins.str] organization: The organization of the certificate holder
        :param pulumi.Input[builtins.str] province: The residing province of the certificate holder.
        :param pulumi.Input[builtins.str] subject_alternative_name: The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        :param pulumi.Input[builtins.str] unit: The organizational unit of the certificate holder.
        :param pulumi.Input[builtins.int] version: The version of the certificate
        """
        if city is not None:
            pulumi.set(__self__, "city", city)
        if confirm_key_passphrase is not None:
            pulumi.set(__self__, "confirm_key_passphrase", confirm_key_passphrase)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if days_valid is not None:
            pulumi.set(__self__, "days_valid", days_valid)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if key_curve is not None:
            pulumi.set(__self__, "key_curve", key_curve)
        if key_passphrase is not None:
            pulumi.set(__self__, "key_passphrase", key_passphrase)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if subject_alternative_name is not None:
            pulumi.set(__self__, "subject_alternative_name", subject_alternative_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The residing cty of the certificate holder.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="confirmKeyPassphrase")
    def confirm_key_passphrase(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        """
        return pulumi.get(self, "confirm_key_passphrase")

    @confirm_key_passphrase.setter
    def confirm_key_passphrase(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "confirm_key_passphrase", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The residing country of the certificate holder.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="daysValid")
    def days_valid(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of days for which the certificate is valid, the default value is 30 days
        """
        return pulumi.get(self, "days_valid")

    @days_valid.setter
    def days_valid(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "days_valid", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address of the certificate holder.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="keyCurve")
    def key_curve(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        """
        return pulumi.get(self, "key_curve")

    @key_curve.setter
    def key_curve(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_curve", value)

    @property
    @pulumi.getter(name="keyPassphrase")
    def key_passphrase(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        """
        return pulumi.get(self, "key_passphrase")

    @key_passphrase.setter
    def key_passphrase(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_passphrase", value)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        """
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "key_size", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the tls key
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the tls certificate.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The organization of the certificate holder
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def province(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The residing province of the certificate holder.
        """
        return pulumi.get(self, "province")

    @province.setter
    def province(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "province", value)

    @property
    @pulumi.getter(name="subjectAlternativeName")
    def subject_alternative_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        """
        return pulumi.get(self, "subject_alternative_name")

    @subject_alternative_name.setter
    def subject_alternative_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subject_alternative_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The organizational unit of the certificate holder.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The version of the certificate
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _TlsCertKeyState:
    def __init__(__self__, *,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 confirm_key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 country: Optional[pulumi.Input[builtins.str]] = None,
                 days_valid: Optional[pulumi.Input[builtins.int]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 key_curve: Optional[pulumi.Input[builtins.str]] = None,
                 key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 key_size: Optional[pulumi.Input[builtins.int]] = None,
                 key_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 organization: Optional[pulumi.Input[builtins.str]] = None,
                 province: Optional[pulumi.Input[builtins.str]] = None,
                 subject_alternative_name: Optional[pulumi.Input[builtins.str]] = None,
                 unit: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.int]] = None):
        """
        Input properties used for looking up and filtering TlsCertKey resources.
        :param pulumi.Input[builtins.str] city: The residing cty of the certificate holder.
        :param pulumi.Input[builtins.str] confirm_key_passphrase: This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.str] country: The residing country of the certificate holder.
        :param pulumi.Input[builtins.int] days_valid: The number of days for which the certificate is valid, the default value is 30 days
        :param pulumi.Input[builtins.str] email: The email address of the certificate holder.
        :param pulumi.Input[builtins.str] key_curve: This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.str] key_passphrase: This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.int] key_size: This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        :param pulumi.Input[builtins.str] key_type: The type of the tls key
        :param pulumi.Input[builtins.str] name: Name of the tls certificate.
        :param pulumi.Input[builtins.str] organization: The organization of the certificate holder
        :param pulumi.Input[builtins.str] province: The residing province of the certificate holder.
        :param pulumi.Input[builtins.str] subject_alternative_name: The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        :param pulumi.Input[builtins.str] unit: The organizational unit of the certificate holder.
        :param pulumi.Input[builtins.int] version: The version of the certificate
        """
        if city is not None:
            pulumi.set(__self__, "city", city)
        if confirm_key_passphrase is not None:
            pulumi.set(__self__, "confirm_key_passphrase", confirm_key_passphrase)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if days_valid is not None:
            pulumi.set(__self__, "days_valid", days_valid)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if key_curve is not None:
            pulumi.set(__self__, "key_curve", key_curve)
        if key_passphrase is not None:
            pulumi.set(__self__, "key_passphrase", key_passphrase)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if subject_alternative_name is not None:
            pulumi.set(__self__, "subject_alternative_name", subject_alternative_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The residing cty of the certificate holder.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="confirmKeyPassphrase")
    def confirm_key_passphrase(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        """
        return pulumi.get(self, "confirm_key_passphrase")

    @confirm_key_passphrase.setter
    def confirm_key_passphrase(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "confirm_key_passphrase", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The residing country of the certificate holder.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="daysValid")
    def days_valid(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of days for which the certificate is valid, the default value is 30 days
        """
        return pulumi.get(self, "days_valid")

    @days_valid.setter
    def days_valid(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "days_valid", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address of the certificate holder.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="keyCurve")
    def key_curve(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        """
        return pulumi.get(self, "key_curve")

    @key_curve.setter
    def key_curve(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_curve", value)

    @property
    @pulumi.getter(name="keyPassphrase")
    def key_passphrase(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        """
        return pulumi.get(self, "key_passphrase")

    @key_passphrase.setter
    def key_passphrase(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_passphrase", value)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        """
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "key_size", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the tls key
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the tls certificate.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The organization of the certificate holder
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def province(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The residing province of the certificate holder.
        """
        return pulumi.get(self, "province")

    @province.setter
    def province(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "province", value)

    @property
    @pulumi.getter(name="subjectAlternativeName")
    def subject_alternative_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        """
        return pulumi.get(self, "subject_alternative_name")

    @subject_alternative_name.setter
    def subject_alternative_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subject_alternative_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The organizational unit of the certificate holder.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The version of the certificate
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("f5os:index/tlsCertKey:TlsCertKey")
class TlsCertKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 confirm_key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 country: Optional[pulumi.Input[builtins.str]] = None,
                 days_valid: Optional[pulumi.Input[builtins.int]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 key_curve: Optional[pulumi.Input[builtins.str]] = None,
                 key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 key_size: Optional[pulumi.Input[builtins.int]] = None,
                 key_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 organization: Optional[pulumi.Input[builtins.str]] = None,
                 province: Optional[pulumi.Input[builtins.str]] = None,
                 subject_alternative_name: Optional[pulumi.Input[builtins.str]] = None,
                 unit: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Resource used to manage tls cert and key on F5OS partitions

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        testcert = f5os.TlsCertKey("testcert",
            name="testcert",
            days_valid=40,
            email="user@org.com",
            city="Hyd",
            province="Telangana",
            country="IN",
            organization="F7",
            unit="IT",
            key_type="encrypted-rsa",
            key_size=2048,
            key_passphrase="test123",
            confirm_key_passphrase="test123")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] city: The residing cty of the certificate holder.
        :param pulumi.Input[builtins.str] confirm_key_passphrase: This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.str] country: The residing country of the certificate holder.
        :param pulumi.Input[builtins.int] days_valid: The number of days for which the certificate is valid, the default value is 30 days
        :param pulumi.Input[builtins.str] email: The email address of the certificate holder.
        :param pulumi.Input[builtins.str] key_curve: This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.str] key_passphrase: This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.int] key_size: This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        :param pulumi.Input[builtins.str] key_type: The type of the tls key
        :param pulumi.Input[builtins.str] name: Name of the tls certificate.
        :param pulumi.Input[builtins.str] organization: The organization of the certificate holder
        :param pulumi.Input[builtins.str] province: The residing province of the certificate holder.
        :param pulumi.Input[builtins.str] subject_alternative_name: The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        :param pulumi.Input[builtins.str] unit: The organizational unit of the certificate holder.
        :param pulumi.Input[builtins.int] version: The version of the certificate
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TlsCertKeyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource used to manage tls cert and key on F5OS partitions

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5os as f5os

        testcert = f5os.TlsCertKey("testcert",
            name="testcert",
            days_valid=40,
            email="user@org.com",
            city="Hyd",
            province="Telangana",
            country="IN",
            organization="F7",
            unit="IT",
            key_type="encrypted-rsa",
            key_size=2048,
            key_passphrase="test123",
            confirm_key_passphrase="test123")
        ```

        :param str resource_name: The name of the resource.
        :param TlsCertKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TlsCertKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 confirm_key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 country: Optional[pulumi.Input[builtins.str]] = None,
                 days_valid: Optional[pulumi.Input[builtins.int]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 key_curve: Optional[pulumi.Input[builtins.str]] = None,
                 key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 key_size: Optional[pulumi.Input[builtins.int]] = None,
                 key_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 organization: Optional[pulumi.Input[builtins.str]] = None,
                 province: Optional[pulumi.Input[builtins.str]] = None,
                 subject_alternative_name: Optional[pulumi.Input[builtins.str]] = None,
                 unit: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TlsCertKeyArgs.__new__(TlsCertKeyArgs)

            __props__.__dict__["city"] = city
            __props__.__dict__["confirm_key_passphrase"] = None if confirm_key_passphrase is None else pulumi.Output.secret(confirm_key_passphrase)
            __props__.__dict__["country"] = country
            __props__.__dict__["days_valid"] = days_valid
            __props__.__dict__["email"] = email
            __props__.__dict__["key_curve"] = key_curve
            __props__.__dict__["key_passphrase"] = None if key_passphrase is None else pulumi.Output.secret(key_passphrase)
            __props__.__dict__["key_size"] = key_size
            __props__.__dict__["key_type"] = key_type
            __props__.__dict__["name"] = name
            __props__.__dict__["organization"] = organization
            __props__.__dict__["province"] = province
            __props__.__dict__["subject_alternative_name"] = subject_alternative_name
            __props__.__dict__["unit"] = unit
            __props__.__dict__["version"] = version
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["confirmKeyPassphrase", "keyPassphrase"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(TlsCertKey, __self__).__init__(
            'f5os:index/tlsCertKey:TlsCertKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            city: Optional[pulumi.Input[builtins.str]] = None,
            confirm_key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
            country: Optional[pulumi.Input[builtins.str]] = None,
            days_valid: Optional[pulumi.Input[builtins.int]] = None,
            email: Optional[pulumi.Input[builtins.str]] = None,
            key_curve: Optional[pulumi.Input[builtins.str]] = None,
            key_passphrase: Optional[pulumi.Input[builtins.str]] = None,
            key_size: Optional[pulumi.Input[builtins.int]] = None,
            key_type: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            organization: Optional[pulumi.Input[builtins.str]] = None,
            province: Optional[pulumi.Input[builtins.str]] = None,
            subject_alternative_name: Optional[pulumi.Input[builtins.str]] = None,
            unit: Optional[pulumi.Input[builtins.str]] = None,
            version: Optional[pulumi.Input[builtins.int]] = None) -> 'TlsCertKey':
        """
        Get an existing TlsCertKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] city: The residing cty of the certificate holder.
        :param pulumi.Input[builtins.str] confirm_key_passphrase: This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.str] country: The residing country of the certificate holder.
        :param pulumi.Input[builtins.int] days_valid: The number of days for which the certificate is valid, the default value is 30 days
        :param pulumi.Input[builtins.str] email: The email address of the certificate holder.
        :param pulumi.Input[builtins.str] key_curve: This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.str] key_passphrase: This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        :param pulumi.Input[builtins.int] key_size: This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        :param pulumi.Input[builtins.str] key_type: The type of the tls key
        :param pulumi.Input[builtins.str] name: Name of the tls certificate.
        :param pulumi.Input[builtins.str] organization: The organization of the certificate holder
        :param pulumi.Input[builtins.str] province: The residing province of the certificate holder.
        :param pulumi.Input[builtins.str] subject_alternative_name: The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        :param pulumi.Input[builtins.str] unit: The organizational unit of the certificate holder.
        :param pulumi.Input[builtins.int] version: The version of the certificate
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TlsCertKeyState.__new__(_TlsCertKeyState)

        __props__.__dict__["city"] = city
        __props__.__dict__["confirm_key_passphrase"] = confirm_key_passphrase
        __props__.__dict__["country"] = country
        __props__.__dict__["days_valid"] = days_valid
        __props__.__dict__["email"] = email
        __props__.__dict__["key_curve"] = key_curve
        __props__.__dict__["key_passphrase"] = key_passphrase
        __props__.__dict__["key_size"] = key_size
        __props__.__dict__["key_type"] = key_type
        __props__.__dict__["name"] = name
        __props__.__dict__["organization"] = organization
        __props__.__dict__["province"] = province
        __props__.__dict__["subject_alternative_name"] = subject_alternative_name
        __props__.__dict__["unit"] = unit
        __props__.__dict__["version"] = version
        return TlsCertKey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The residing cty of the certificate holder.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="confirmKeyPassphrase")
    def confirm_key_passphrase(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        """
        return pulumi.get(self, "confirm_key_passphrase")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The residing country of the certificate holder.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="daysValid")
    def days_valid(self) -> pulumi.Output[builtins.int]:
        """
        The number of days for which the certificate is valid, the default value is 30 days
        """
        return pulumi.get(self, "days_valid")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The email address of the certificate holder.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="keyCurve")
    def key_curve(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        """
        return pulumi.get(self, "key_curve")

    @property
    @pulumi.getter(name="keyPassphrase")
    def key_passphrase(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        """
        return pulumi.get(self, "key_passphrase")

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        """
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The type of the tls key
        """
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the tls certificate.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The organization of the certificate holder
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def province(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The residing province of the certificate holder.
        """
        return pulumi.get(self, "province")

    @property
    @pulumi.getter(name="subjectAlternativeName")
    def subject_alternative_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        """
        return pulumi.get(self, "subject_alternative_name")

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The organizational unit of the certificate holder.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.int]:
        """
        The version of the certificate
        """
        return pulumi.get(self, "version")

