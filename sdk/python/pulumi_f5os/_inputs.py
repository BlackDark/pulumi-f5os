# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'LoggingCaBundleArgs',
    'LoggingCaBundleArgsDict',
    'LoggingRemoteForwardingArgs',
    'LoggingRemoteForwardingArgsDict',
    'LoggingRemoteForwardingFileArgs',
    'LoggingRemoteForwardingFileArgsDict',
    'LoggingRemoteForwardingLogArgs',
    'LoggingRemoteForwardingLogArgsDict',
    'LoggingServerArgs',
    'LoggingServerArgsDict',
    'LoggingServerLogArgs',
    'LoggingServerLogArgsDict',
    'LoggingTlsArgs',
    'LoggingTlsArgsDict',
]

MYPY = False

if not MYPY:
    class LoggingCaBundleArgsDict(TypedDict):
        content: pulumi.Input[builtins.str]
        """
        The PEM-encoded content of the CA bundle.
        """
        name: pulumi.Input[builtins.str]
        """
        The name of the CA bundle.
        """
elif False:
    LoggingCaBundleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoggingCaBundleArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] content: The PEM-encoded content of the CA bundle.
        :param pulumi.Input[builtins.str] name: The name of the CA bundle.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[builtins.str]:
        """
        The PEM-encoded content of the CA bundle.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the CA bundle.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class LoggingRemoteForwardingArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Whether remote forwarding is enabled.
        """
        files: NotRequired[pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingFileArgsDict']]]]
        """
        List of files for remote forwarding output.
        """
        logs: NotRequired[pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingLogArgsDict']]]]
        """
        Log selectors for remote forwarding, specifying facility and severity.
        """
elif False:
    LoggingRemoteForwardingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoggingRemoteForwardingArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 files: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingFileArgs']]]] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingLogArgs']]]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Whether remote forwarding is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingFileArgs']]] files: List of files for remote forwarding output.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingLogArgs']]] logs: Log selectors for remote forwarding, specifying facility and severity.
        """
        pulumi.set(__self__, "enabled", enabled)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Whether remote forwarding is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingFileArgs']]]]:
        """
        List of files for remote forwarding output.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingFileArgs']]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingLogArgs']]]]:
        """
        Log selectors for remote forwarding, specifying facility and severity.
        """
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingRemoteForwardingLogArgs']]]]):
        pulumi.set(self, "logs", value)


if not MYPY:
    class LoggingRemoteForwardingFileArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        The name of the file for log output.
        """
elif False:
    LoggingRemoteForwardingFileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoggingRemoteForwardingFileArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: The name of the file for log output.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the file for log output.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class LoggingRemoteForwardingLogArgsDict(TypedDict):
        facility: pulumi.Input[builtins.str]
        """
        The syslog facility for remote forwarding (local0 or authpriv).
        """
        severity: pulumi.Input[builtins.str]
        """
        The syslog severity for remote forwarding.
        """
elif False:
    LoggingRemoteForwardingLogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoggingRemoteForwardingLogArgs:
    def __init__(__self__, *,
                 facility: pulumi.Input[builtins.str],
                 severity: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] facility: The syslog facility for remote forwarding (local0 or authpriv).
        :param pulumi.Input[builtins.str] severity: The syslog severity for remote forwarding.
        """
        pulumi.set(__self__, "facility", facility)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> pulumi.Input[builtins.str]:
        """
        The syslog facility for remote forwarding (local0 or authpriv).
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[builtins.str]:
        """
        The syslog severity for remote forwarding.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class LoggingServerArgsDict(TypedDict):
        address: pulumi.Input[builtins.str]
        """
        The IP address or hostname of the remote logging server.
        """
        port: pulumi.Input[builtins.int]
        """
        The port number for the remote logging server (1-65535).
        """
        protocol: pulumi.Input[builtins.str]
        """
        The protocol used for logging (tcp or udp).
        """
        authentication: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether authentication is enabled for TCP protocol.
        """
        logs: NotRequired[pulumi.Input[Sequence[pulumi.Input['LoggingServerLogArgsDict']]]]
        """
        Log selectors for this server, specifying facility and severity.
        """
elif False:
    LoggingServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoggingServerArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[builtins.str],
                 port: pulumi.Input[builtins.int],
                 protocol: pulumi.Input[builtins.str],
                 authentication: Optional[pulumi.Input[builtins.bool]] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingServerLogArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] address: The IP address or hostname of the remote logging server.
        :param pulumi.Input[builtins.int] port: The port number for the remote logging server (1-65535).
        :param pulumi.Input[builtins.str] protocol: The protocol used for logging (tcp or udp).
        :param pulumi.Input[builtins.bool] authentication: Whether authentication is enabled for TCP protocol.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingServerLogArgs']]] logs: Log selectors for this server, specifying facility and severity.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[builtins.str]:
        """
        The IP address or hostname of the remote logging server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[builtins.int]:
        """
        The port number for the remote logging server (1-65535).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[builtins.str]:
        """
        The protocol used for logging (tcp or udp).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether authentication is enabled for TCP protocol.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingServerLogArgs']]]]:
        """
        Log selectors for this server, specifying facility and severity.
        """
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingServerLogArgs']]]]):
        pulumi.set(self, "logs", value)


if not MYPY:
    class LoggingServerLogArgsDict(TypedDict):
        facility: pulumi.Input[builtins.str]
        """
        The syslog facility (e.g., local0, authpriv).
        """
        severity: pulumi.Input[builtins.str]
        """
        The syslog severity (e.g., debug, informational, notice, warning, error, critical, alert, emergency).
        """
elif False:
    LoggingServerLogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoggingServerLogArgs:
    def __init__(__self__, *,
                 facility: pulumi.Input[builtins.str],
                 severity: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] facility: The syslog facility (e.g., local0, authpriv).
        :param pulumi.Input[builtins.str] severity: The syslog severity (e.g., debug, informational, notice, warning, error, critical, alert, emergency).
        """
        pulumi.set(__self__, "facility", facility)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> pulumi.Input[builtins.str]:
        """
        The syslog facility (e.g., local0, authpriv).
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[builtins.str]:
        """
        The syslog severity (e.g., debug, informational, notice, warning, error, critical, alert, emergency).
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class LoggingTlsArgsDict(TypedDict):
        certificate: pulumi.Input[builtins.str]
        """
        TLS certificate for secure logging.
        """
        key: pulumi.Input[builtins.str]
        """
        TLS private key for secure logging (sensitive).
        """
elif False:
    LoggingTlsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoggingTlsArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[builtins.str],
                 key: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] certificate: TLS certificate for secure logging.
        :param pulumi.Input[builtins.str] key: TLS private key for secure logging (sensitive).
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[builtins.str]:
        """
        TLS certificate for secure logging.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        TLS private key for secure logging (sensitive).
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)


