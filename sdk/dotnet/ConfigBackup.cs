// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5os
{
    /// <summary>
    /// Resource used to manage F5OS config backup
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5os = Pulumi.F5os;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new F5os.ConfigBackup("test", new()
    ///     {
    ///         Name = "test_cfg_backup",
    ///         RemoteHost = "1.2.3.4",
    ///         RemoteUser = "corpuser",
    ///         RemotePassword = "password",
    ///         RemotePath = "/upload/test_cfg_backup",
    ///         Protocol = "https",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5osResourceType("f5os:index/configBackup:ConfigBackup")]
    public partial class ConfigBackup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the config backup file.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Protocol for config backup file transfer.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The hostname or IP address of the remote server used for storing the config backup file.
        /// </summary>
        [Output("remoteHost")]
        public Output<string> RemoteHost { get; private set; } = null!;

        /// <summary>
        /// User password for the remote server used for exporting the created config backup file.
        /// </summary>
        [Output("remotePassword")]
        public Output<string> RemotePassword { get; private set; } = null!;

        /// <summary>
        /// The path on the remote server used for uploading the created config backup file.
        /// </summary>
        [Output("remotePath")]
        public Output<string> RemotePath { get; private set; } = null!;

        /// <summary>
        /// User name for the remote server used for exporting the created config backup file.
        /// </summary>
        [Output("remoteUser")]
        public Output<string> RemoteUser { get; private set; } = null!;

        /// <summary>
        /// The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        /// </summary>
        [Output("timeout")]
        public Output<int> Timeout { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigBackup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigBackup(string name, ConfigBackupArgs args, CustomResourceOptions? options = null)
            : base("f5os:index/configBackup:ConfigBackup", name, args ?? new ConfigBackupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigBackup(string name, Input<string> id, ConfigBackupState? state = null, CustomResourceOptions? options = null)
            : base("f5os:index/configBackup:ConfigBackup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "remotePassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigBackup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigBackup Get(string name, Input<string> id, ConfigBackupState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigBackup(name, id, state, options);
        }
    }

    public sealed class ConfigBackupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the config backup file.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Protocol for config backup file transfer.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The hostname or IP address of the remote server used for storing the config backup file.
        /// </summary>
        [Input("remoteHost", required: true)]
        public Input<string> RemoteHost { get; set; } = null!;

        [Input("remotePassword", required: true)]
        private Input<string>? _remotePassword;

        /// <summary>
        /// User password for the remote server used for exporting the created config backup file.
        /// </summary>
        public Input<string>? RemotePassword
        {
            get => _remotePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _remotePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The path on the remote server used for uploading the created config backup file.
        /// </summary>
        [Input("remotePath", required: true)]
        public Input<string> RemotePath { get; set; } = null!;

        /// <summary>
        /// User name for the remote server used for exporting the created config backup file.
        /// </summary>
        [Input("remoteUser", required: true)]
        public Input<string> RemoteUser { get; set; } = null!;

        /// <summary>
        /// The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public ConfigBackupArgs()
        {
        }
        public static new ConfigBackupArgs Empty => new ConfigBackupArgs();
    }

    public sealed class ConfigBackupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the config backup file.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Protocol for config backup file transfer.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The hostname or IP address of the remote server used for storing the config backup file.
        /// </summary>
        [Input("remoteHost")]
        public Input<string>? RemoteHost { get; set; }

        [Input("remotePassword")]
        private Input<string>? _remotePassword;

        /// <summary>
        /// User password for the remote server used for exporting the created config backup file.
        /// </summary>
        public Input<string>? RemotePassword
        {
            get => _remotePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _remotePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The path on the remote server used for uploading the created config backup file.
        /// </summary>
        [Input("remotePath")]
        public Input<string>? RemotePath { get; set; }

        /// <summary>
        /// User name for the remote server used for exporting the created config backup file.
        /// </summary>
        [Input("remoteUser")]
        public Input<string>? RemoteUser { get; set; }

        /// <summary>
        /// The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public ConfigBackupState()
        {
        }
        public static new ConfigBackupState Empty => new ConfigBackupState();
    }
}
