// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5os
{
    /// <summary>
    /// Manage NTP servers on F5OS based systems (Velos controller or rSeries appliance).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5os = Pulumi.F5os;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new F5os.NtpServer("test", new()
    ///     {
    ///         Server = "10.20.30.40",
    ///         KeyId = 123,
    ///         Prefer = true,
    ///         Iburst = true,
    ///         NtpService = true,
    ///         NtpAuthentication = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5osResourceType("f5os:index/ntpServer:NtpServer")]
    public partial class NtpServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable iburst for faster synchronization.
        /// </summary>
        [Output("iburst")]
        public Output<bool?> Iburst { get; private set; } = null!;

        /// <summary>
        /// Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        /// </summary>
        [Output("keyId")]
        public Output<int?> KeyId { get; private set; } = null!;

        /// <summary>
        /// Enable or disable NTP authentication.
        /// </summary>
        [Output("ntpAuthentication")]
        public Output<bool?> NtpAuthentication { get; private set; } = null!;

        /// <summary>
        /// Enable or disable the NTP service.
        /// </summary>
        [Output("ntpService")]
        public Output<bool?> NtpService { get; private set; } = null!;

        /// <summary>
        /// Set to true if this is the preferred server.
        /// </summary>
        [Output("prefer")]
        public Output<bool?> Prefer { get; private set; } = null!;

        /// <summary>
        /// IPv4/IPv6 address or FQDN of the NTP server.
        /// </summary>
        [Output("server")]
        public Output<string> Server { get; private set; } = null!;


        /// <summary>
        /// Create a NtpServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NtpServer(string name, NtpServerArgs args, CustomResourceOptions? options = null)
            : base("f5os:index/ntpServer:NtpServer", name, args ?? new NtpServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NtpServer(string name, Input<string> id, NtpServerState? state = null, CustomResourceOptions? options = null)
            : base("f5os:index/ntpServer:NtpServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NtpServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NtpServer Get(string name, Input<string> id, NtpServerState? state = null, CustomResourceOptions? options = null)
        {
            return new NtpServer(name, id, state, options);
        }
    }

    public sealed class NtpServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable iburst for faster synchronization.
        /// </summary>
        [Input("iburst")]
        public Input<bool>? Iburst { get; set; }

        /// <summary>
        /// Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        /// </summary>
        [Input("keyId")]
        public Input<int>? KeyId { get; set; }

        /// <summary>
        /// Enable or disable NTP authentication.
        /// </summary>
        [Input("ntpAuthentication")]
        public Input<bool>? NtpAuthentication { get; set; }

        /// <summary>
        /// Enable or disable the NTP service.
        /// </summary>
        [Input("ntpService")]
        public Input<bool>? NtpService { get; set; }

        /// <summary>
        /// Set to true if this is the preferred server.
        /// </summary>
        [Input("prefer")]
        public Input<bool>? Prefer { get; set; }

        /// <summary>
        /// IPv4/IPv6 address or FQDN of the NTP server.
        /// </summary>
        [Input("server", required: true)]
        public Input<string> Server { get; set; } = null!;

        public NtpServerArgs()
        {
        }
        public static new NtpServerArgs Empty => new NtpServerArgs();
    }

    public sealed class NtpServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable iburst for faster synchronization.
        /// </summary>
        [Input("iburst")]
        public Input<bool>? Iburst { get; set; }

        /// <summary>
        /// Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
        /// </summary>
        [Input("keyId")]
        public Input<int>? KeyId { get; set; }

        /// <summary>
        /// Enable or disable NTP authentication.
        /// </summary>
        [Input("ntpAuthentication")]
        public Input<bool>? NtpAuthentication { get; set; }

        /// <summary>
        /// Enable or disable the NTP service.
        /// </summary>
        [Input("ntpService")]
        public Input<bool>? NtpService { get; set; }

        /// <summary>
        /// Set to true if this is the preferred server.
        /// </summary>
        [Input("prefer")]
        public Input<bool>? Prefer { get; set; }

        /// <summary>
        /// IPv4/IPv6 address or FQDN of the NTP server.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        public NtpServerState()
        {
        }
        public static new NtpServerState Empty => new NtpServerState();
    }
}
