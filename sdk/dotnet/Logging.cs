// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5os
{
    /// <summary>
    /// The `f5os.Logging` resource manages logging configuration on F5OS devices, including remote servers, TLS, CA bundles, remote forwarding, and hostname inclusion.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5os = Pulumi.F5os;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var logging = new F5os.Logging("logging", new()
    ///     {
    ///         IncludeHostname = false,
    ///         Servers = new[]
    ///         {
    ///             new F5os.Inputs.LoggingServerArgs
    ///             {
    ///                 Address = "192.168.100.1",
    ///                 Port = 514,
    ///                 Protocol = "tcp",
    ///                 Authentication = false,
    ///                 Logs = new[]
    ///                 {
    ///                     new F5os.Inputs.LoggingServerLogArgs
    ///                     {
    ///                         Facility = "local0",
    ///                         Severity = "debug",
    ///                     },
    ///                 },
    ///             },
    ///             new F5os.Inputs.LoggingServerArgs
    ///             {
    ///                 Address = "192.168.100.2",
    ///                 Port = 514,
    ///                 Protocol = "tcp",
    ///                 Authentication = false,
    ///                 Logs = new[]
    ///                 {
    ///                     new F5os.Inputs.LoggingServerLogArgs
    ///                     {
    ///                         Facility = "authpriv",
    ///                         Severity = "emergency",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         RemoteForwarding = new F5os.Inputs.LoggingRemoteForwardingArgs
    ///         {
    ///             Enabled = true,
    ///             Logs = new[]
    ///             {
    ///                 new F5os.Inputs.LoggingRemoteForwardingLogArgs
    ///                 {
    ///                     Facility = "local0",
    ///                     Severity = "error",
    ///                 },
    ///                 new F5os.Inputs.LoggingRemoteForwardingLogArgs
    ///                 {
    ///                     Facility = "authpriv",
    ///                     Severity = "critical",
    ///                 },
    ///             },
    ///             Files = new[]
    ///             {
    ///                 new F5os.Inputs.LoggingRemoteForwardingFileArgs
    ///                 {
    ///                     Name = "rseries_debug.log",
    ///                 },
    ///                 new F5os.Inputs.LoggingRemoteForwardingFileArgs
    ///                 {
    ///                     Name = "rseries_audit.log",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5osResourceType("f5os:index/logging:Logging")]
    public partial class Logging : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of CA bundles for TLS validation.
        /// </summary>
        [Output("caBundles")]
        public Output<ImmutableArray<Outputs.LoggingCaBundle>> CaBundles { get; private set; } = null!;

        /// <summary>
        /// Whether to include the hostname in log messages.
        /// </summary>
        [Output("includeHostname")]
        public Output<bool?> IncludeHostname { get; private set; } = null!;

        /// <summary>
        /// Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        /// </summary>
        [Output("remoteForwarding")]
        public Output<Outputs.LoggingRemoteForwarding?> RemoteForwarding { get; private set; } = null!;

        /// <summary>
        /// A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.LoggingServer>> Servers { get; private set; } = null!;

        /// <summary>
        /// Current state of the logging resource.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// TLS configuration for secure logging.
        /// </summary>
        [Output("tls")]
        public Output<Outputs.LoggingTls?> Tls { get; private set; } = null!;


        /// <summary>
        /// Create a Logging resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Logging(string name, LoggingArgs? args = null, CustomResourceOptions? options = null)
            : base("f5os:index/logging:Logging", name, args ?? new LoggingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Logging(string name, Input<string> id, LoggingState? state = null, CustomResourceOptions? options = null)
            : base("f5os:index/logging:Logging", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Logging resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Logging Get(string name, Input<string> id, LoggingState? state = null, CustomResourceOptions? options = null)
        {
            return new Logging(name, id, state, options);
        }
    }

    public sealed class LoggingArgs : global::Pulumi.ResourceArgs
    {
        [Input("caBundles")]
        private InputList<Inputs.LoggingCaBundleArgs>? _caBundles;

        /// <summary>
        /// List of CA bundles for TLS validation.
        /// </summary>
        public InputList<Inputs.LoggingCaBundleArgs> CaBundles
        {
            get => _caBundles ?? (_caBundles = new InputList<Inputs.LoggingCaBundleArgs>());
            set => _caBundles = value;
        }

        /// <summary>
        /// Whether to include the hostname in log messages.
        /// </summary>
        [Input("includeHostname")]
        public Input<bool>? IncludeHostname { get; set; }

        /// <summary>
        /// Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        /// </summary>
        [Input("remoteForwarding")]
        public Input<Inputs.LoggingRemoteForwardingArgs>? RemoteForwarding { get; set; }

        [Input("servers")]
        private InputList<Inputs.LoggingServerArgs>? _servers;

        /// <summary>
        /// A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        /// </summary>
        public InputList<Inputs.LoggingServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.LoggingServerArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// Current state of the logging resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// TLS configuration for secure logging.
        /// </summary>
        [Input("tls")]
        public Input<Inputs.LoggingTlsArgs>? Tls { get; set; }

        public LoggingArgs()
        {
        }
        public static new LoggingArgs Empty => new LoggingArgs();
    }

    public sealed class LoggingState : global::Pulumi.ResourceArgs
    {
        [Input("caBundles")]
        private InputList<Inputs.LoggingCaBundleGetArgs>? _caBundles;

        /// <summary>
        /// List of CA bundles for TLS validation.
        /// </summary>
        public InputList<Inputs.LoggingCaBundleGetArgs> CaBundles
        {
            get => _caBundles ?? (_caBundles = new InputList<Inputs.LoggingCaBundleGetArgs>());
            set => _caBundles = value;
        }

        /// <summary>
        /// Whether to include the hostname in log messages.
        /// </summary>
        [Input("includeHostname")]
        public Input<bool>? IncludeHostname { get; set; }

        /// <summary>
        /// Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
        /// </summary>
        [Input("remoteForwarding")]
        public Input<Inputs.LoggingRemoteForwardingGetArgs>? RemoteForwarding { get; set; }

        [Input("servers")]
        private InputList<Inputs.LoggingServerGetArgs>? _servers;

        /// <summary>
        /// A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
        /// </summary>
        public InputList<Inputs.LoggingServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.LoggingServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// Current state of the logging resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// TLS configuration for secure logging.
        /// </summary>
        [Input("tls")]
        public Input<Inputs.LoggingTlsGetArgs>? Tls { get; set; }

        public LoggingState()
        {
        }
        public static new LoggingState Empty => new LoggingState();
    }
}
