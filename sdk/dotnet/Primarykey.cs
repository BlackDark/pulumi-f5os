// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5os
{
    /// <summary>
    /// Manage system primary-key using passphrase and salt on F5OS devices.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5os = Pulumi.F5os;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Manages Primary key settings on F5OS platforms
    ///     var @default = new F5os.Primarykey("default", new()
    ///     {
    ///         Passphrase = "test-pass",
    ///         Salt = "test-salt",
    ///         ForceUpdate = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5osResourceType("f5os:index/primarykey:Primarykey")]
    public partial class Primarykey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Force update the primary key on F5OS device.
        /// </summary>
        [Output("forceUpdate")]
        public Output<bool> ForceUpdate { get; private set; } = null!;

        /// <summary>
        /// Hash of the primary key as returned by the system.
        /// </summary>
        [Output("hash")]
        public Output<string> Hash { get; private set; } = null!;

        /// <summary>
        /// Specifies passphrase for generating primary key.
        /// </summary>
        [Output("passphrase")]
        public Output<string> Passphrase { get; private set; } = null!;

        /// <summary>
        /// Specifies salt for generating primary key.
        /// </summary>
        [Output("salt")]
        public Output<string> Salt { get; private set; } = null!;

        /// <summary>
        /// Status of primary key operation (e.g., COMPLETE)
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Primarykey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Primarykey(string name, PrimarykeyArgs args, CustomResourceOptions? options = null)
            : base("f5os:index/primarykey:Primarykey", name, args ?? new PrimarykeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Primarykey(string name, Input<string> id, PrimarykeyState? state = null, CustomResourceOptions? options = null)
            : base("f5os:index/primarykey:Primarykey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "passphrase",
                    "salt",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Primarykey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Primarykey Get(string name, Input<string> id, PrimarykeyState? state = null, CustomResourceOptions? options = null)
        {
            return new Primarykey(name, id, state, options);
        }
    }

    public sealed class PrimarykeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Force update the primary key on F5OS device.
        /// </summary>
        [Input("forceUpdate")]
        public Input<bool>? ForceUpdate { get; set; }

        [Input("passphrase", required: true)]
        private Input<string>? _passphrase;

        /// <summary>
        /// Specifies passphrase for generating primary key.
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("salt", required: true)]
        private Input<string>? _salt;

        /// <summary>
        /// Specifies salt for generating primary key.
        /// </summary>
        public Input<string>? Salt
        {
            get => _salt;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _salt = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public PrimarykeyArgs()
        {
        }
        public static new PrimarykeyArgs Empty => new PrimarykeyArgs();
    }

    public sealed class PrimarykeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Force update the primary key on F5OS device.
        /// </summary>
        [Input("forceUpdate")]
        public Input<bool>? ForceUpdate { get; set; }

        /// <summary>
        /// Hash of the primary key as returned by the system.
        /// </summary>
        [Input("hash")]
        public Input<string>? Hash { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// Specifies passphrase for generating primary key.
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("salt")]
        private Input<string>? _salt;

        /// <summary>
        /// Specifies salt for generating primary key.
        /// </summary>
        public Input<string>? Salt
        {
            get => _salt;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _salt = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Status of primary key operation (e.g., COMPLETE)
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public PrimarykeyState()
        {
        }
        public static new PrimarykeyState Empty => new PrimarykeyState();
    }
}
