// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5os
{
    /// <summary>
    /// Resource used to manage password of a specific user on a velos chassis partition.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5os = Pulumi.F5os;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Manages Changing F5os Partition password
    ///     var changepass = new F5os.PartitionChangePassword("changepass", new()
    ///     {
    ///         UserName = "xxxxx",
    ///         OldPassword = "xxxxxxxx",
    ///         NewPassword = "xxxxxx",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5osResourceType("f5os:index/partitionChangePassword:PartitionChangePassword")]
    public partial class PartitionChangePassword : global::Pulumi.CustomResource
    {
        /// <summary>
        /// New password for the specified user account.
        /// </summary>
        [Output("newPassword")]
        public Output<string> NewPassword { get; private set; } = null!;

        /// <summary>
        /// Current password for the specified user account.
        /// </summary>
        [Output("oldPassword")]
        public Output<string> OldPassword { get; private set; } = null!;

        /// <summary>
        /// Name of the chassis partition user account.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a PartitionChangePassword resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PartitionChangePassword(string name, PartitionChangePasswordArgs args, CustomResourceOptions? options = null)
            : base("f5os:index/partitionChangePassword:PartitionChangePassword", name, args ?? new PartitionChangePasswordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PartitionChangePassword(string name, Input<string> id, PartitionChangePasswordState? state = null, CustomResourceOptions? options = null)
            : base("f5os:index/partitionChangePassword:PartitionChangePassword", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "newPassword",
                    "oldPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PartitionChangePassword resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PartitionChangePassword Get(string name, Input<string> id, PartitionChangePasswordState? state = null, CustomResourceOptions? options = null)
        {
            return new PartitionChangePassword(name, id, state, options);
        }
    }

    public sealed class PartitionChangePasswordArgs : global::Pulumi.ResourceArgs
    {
        [Input("newPassword", required: true)]
        private Input<string>? _newPassword;

        /// <summary>
        /// New password for the specified user account.
        /// </summary>
        public Input<string>? NewPassword
        {
            get => _newPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _newPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("oldPassword", required: true)]
        private Input<string>? _oldPassword;

        /// <summary>
        /// Current password for the specified user account.
        /// </summary>
        public Input<string>? OldPassword
        {
            get => _oldPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oldPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the chassis partition user account.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public PartitionChangePasswordArgs()
        {
        }
        public static new PartitionChangePasswordArgs Empty => new PartitionChangePasswordArgs();
    }

    public sealed class PartitionChangePasswordState : global::Pulumi.ResourceArgs
    {
        [Input("newPassword")]
        private Input<string>? _newPassword;

        /// <summary>
        /// New password for the specified user account.
        /// </summary>
        public Input<string>? NewPassword
        {
            get => _newPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _newPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("oldPassword")]
        private Input<string>? _oldPassword;

        /// <summary>
        /// Current password for the specified user account.
        /// </summary>
        public Input<string>? OldPassword
        {
            get => _oldPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oldPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the chassis partition user account.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public PartitionChangePasswordState()
        {
        }
        public static new PartitionChangePasswordState Empty => new PartitionChangePasswordState();
    }
}
