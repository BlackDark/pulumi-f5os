// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5os
{
    /// <summary>
    /// Resource used to manage tls cert and key on F5OS partitions
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5os = Pulumi.F5os;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testcert = new F5os.TlsCertKey("testcert", new()
    ///     {
    ///         Name = "testcert",
    ///         DaysValid = 40,
    ///         Email = "user@org.com",
    ///         City = "Hyd",
    ///         Province = "Telangana",
    ///         Country = "IN",
    ///         Organization = "F7",
    ///         Unit = "IT",
    ///         KeyType = "encrypted-rsa",
    ///         KeySize = 2048,
    ///         KeyPassphrase = "test123",
    ///         ConfirmKeyPassphrase = "test123",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5osResourceType("f5os:index/tlsCertKey:TlsCertKey")]
    public partial class TlsCertKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The residing cty of the certificate holder.
        /// </summary>
        [Output("city")]
        public Output<string?> City { get; private set; } = null!;

        /// <summary>
        /// This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        /// </summary>
        [Output("confirmKeyPassphrase")]
        public Output<string?> ConfirmKeyPassphrase { get; private set; } = null!;

        /// <summary>
        /// The residing country of the certificate holder.
        /// </summary>
        [Output("country")]
        public Output<string?> Country { get; private set; } = null!;

        /// <summary>
        /// The number of days for which the certificate is valid, the default value is 30 days
        /// </summary>
        [Output("daysValid")]
        public Output<int> DaysValid { get; private set; } = null!;

        /// <summary>
        /// The email address of the certificate holder.
        /// </summary>
        [Output("email")]
        public Output<string?> Email { get; private set; } = null!;

        /// <summary>
        /// This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        /// </summary>
        [Output("keyCurve")]
        public Output<string?> KeyCurve { get; private set; } = null!;

        /// <summary>
        /// This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        /// </summary>
        [Output("keyPassphrase")]
        public Output<string?> KeyPassphrase { get; private set; } = null!;

        /// <summary>
        /// This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        /// </summary>
        [Output("keySize")]
        public Output<int?> KeySize { get; private set; } = null!;

        /// <summary>
        /// The type of the tls key
        /// </summary>
        [Output("keyType")]
        public Output<string?> KeyType { get; private set; } = null!;

        /// <summary>
        /// Name of the tls certificate.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization of the certificate holder
        /// </summary>
        [Output("organization")]
        public Output<string?> Organization { get; private set; } = null!;

        /// <summary>
        /// The residing province of the certificate holder.
        /// </summary>
        [Output("province")]
        public Output<string?> Province { get; private set; } = null!;

        /// <summary>
        /// The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        /// </summary>
        [Output("subjectAlternativeName")]
        public Output<string?> SubjectAlternativeName { get; private set; } = null!;

        /// <summary>
        /// The organizational unit of the certificate holder.
        /// </summary>
        [Output("unit")]
        public Output<string?> Unit { get; private set; } = null!;

        /// <summary>
        /// The version of the certificate
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a TlsCertKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsCertKey(string name, TlsCertKeyArgs? args = null, CustomResourceOptions? options = null)
            : base("f5os:index/tlsCertKey:TlsCertKey", name, args ?? new TlsCertKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsCertKey(string name, Input<string> id, TlsCertKeyState? state = null, CustomResourceOptions? options = null)
            : base("f5os:index/tlsCertKey:TlsCertKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "confirmKeyPassphrase",
                    "keyPassphrase",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsCertKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsCertKey Get(string name, Input<string> id, TlsCertKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsCertKey(name, id, state, options);
        }
    }

    public sealed class TlsCertKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The residing cty of the certificate holder.
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        [Input("confirmKeyPassphrase")]
        private Input<string>? _confirmKeyPassphrase;

        /// <summary>
        /// This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        /// </summary>
        public Input<string>? ConfirmKeyPassphrase
        {
            get => _confirmKeyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _confirmKeyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The residing country of the certificate holder.
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// The number of days for which the certificate is valid, the default value is 30 days
        /// </summary>
        [Input("daysValid")]
        public Input<int>? DaysValid { get; set; }

        /// <summary>
        /// The email address of the certificate holder.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        /// </summary>
        [Input("keyCurve")]
        public Input<string>? KeyCurve { get; set; }

        [Input("keyPassphrase")]
        private Input<string>? _keyPassphrase;

        /// <summary>
        /// This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        /// </summary>
        public Input<string>? KeyPassphrase
        {
            get => _keyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        /// </summary>
        [Input("keySize")]
        public Input<int>? KeySize { get; set; }

        /// <summary>
        /// The type of the tls key
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// Name of the tls certificate.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization of the certificate holder
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// The residing province of the certificate holder.
        /// </summary>
        [Input("province")]
        public Input<string>? Province { get; set; }

        /// <summary>
        /// The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        /// </summary>
        [Input("subjectAlternativeName")]
        public Input<string>? SubjectAlternativeName { get; set; }

        /// <summary>
        /// The organizational unit of the certificate holder.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        /// <summary>
        /// The version of the certificate
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public TlsCertKeyArgs()
        {
        }
        public static new TlsCertKeyArgs Empty => new TlsCertKeyArgs();
    }

    public sealed class TlsCertKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The residing cty of the certificate holder.
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        [Input("confirmKeyPassphrase")]
        private Input<string>? _confirmKeyPassphrase;

        /// <summary>
        /// This specifies the confirmation of the passphrase for the key, the value should be the same as the `key_passphrase`. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        /// </summary>
        public Input<string>? ConfirmKeyPassphrase
        {
            get => _confirmKeyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _confirmKeyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The residing country of the certificate holder.
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// The number of days for which the certificate is valid, the default value is 30 days
        /// </summary>
        [Input("daysValid")]
        public Input<int>? DaysValid { get; set; }

        /// <summary>
        /// The email address of the certificate holder.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `key_type` is set to `ecdsa` or `encrypted-ecdsa`
        /// </summary>
        [Input("keyCurve")]
        public Input<string>? KeyCurve { get; set; }

        [Input("keyPassphrase")]
        private Input<string>? _keyPassphrase;

        /// <summary>
        /// This specifies the passphrase for the key. This attribute is required when `key_type` is set to `encrypted-rsa` or `encrypted-ecdsa`
        /// </summary>
        public Input<string>? KeyPassphrase
        {
            get => _keyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `key_type` is set to `rsa` or `encrypted-rsa`
        /// </summary>
        [Input("keySize")]
        public Input<int>? KeySize { get; set; }

        /// <summary>
        /// The type of the tls key
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// Name of the tls certificate.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization of the certificate holder
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// The residing province of the certificate holder.
        /// </summary>
        [Input("province")]
        public Input<string>? Province { get; set; }

        /// <summary>
        /// The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
        /// </summary>
        [Input("subjectAlternativeName")]
        public Input<string>? SubjectAlternativeName { get; set; }

        /// <summary>
        /// The organizational unit of the certificate holder.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        /// <summary>
        /// The version of the certificate
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public TlsCertKeyState()
        {
        }
        public static new TlsCertKeyState Empty => new TlsCertKeyState();
    }
}
