// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5os
{
    /// <summary>
    /// Resource used for Manage F5OS tenant images
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5os = Pulumi.F5os;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Resource for tenant image copy
    ///     var test = new F5os.TenantImage("test", new()
    ///     {
    ///         ImageName = "BIGIP-17.1.0-0.0.16.ALL-F5OS.qcow2.zip.bundle",
    ///         RemoteHost = "xxxxx",
    ///         RemotePath = "v17.1.0/daily/current/VM",
    ///         LocalPath = "images",
    ///         Timeout = 360,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5osResourceType("f5os:index/tenantImage:TenantImage")]
    public partial class TenantImage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the tenant image.
        /// </summary>
        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        /// <summary>
        /// The path on the F5OS where the the tenant image is to be imported to.
        /// </summary>
        [Output("localPath")]
        public Output<string?> LocalPath { get; private set; } = null!;

        /// <summary>
        /// Protocol for image transfer.
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// The hostname or IP address of the remote server on which the tenant image is stored.
        /// The server must make the image accessible via the specified protocol.
        /// </summary>
        [Output("remoteHost")]
        public Output<string?> RemoteHost { get; private set; } = null!;

        /// <summary>
        /// Password for the user on the remote server on which the tenant image is stored.
        /// </summary>
        [Output("remotePassword")]
        public Output<string?> RemotePassword { get; private set; } = null!;

        /// <summary>
        /// The path to the tenant image on the remote server.
        /// </summary>
        [Output("remotePath")]
        public Output<string?> RemotePath { get; private set; } = null!;

        /// <summary>
        /// The port on the remote host to which you want to connect.
        /// If the port is not provided, a default port for the selected protocol is used.
        /// </summary>
        [Output("remotePort")]
        public Output<int?> RemotePort { get; private set; } = null!;

        /// <summary>
        /// User name for the remote server on which the tenant image is stored.
        /// </summary>
        [Output("remoteUser")]
        public Output<string?> RemoteUser { get; private set; } = null!;

        /// <summary>
        /// Status of Imported Image
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The number of seconds to wait for image import to finish.
        /// </summary>
        [Output("timeout")]
        public Output<int> Timeout { get; private set; } = null!;

        /// <summary>
        /// The path to image on the local machine which is to be uploaded
        /// </summary>
        [Output("uploadFromPath")]
        public Output<string?> UploadFromPath { get; private set; } = null!;


        /// <summary>
        /// Create a TenantImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TenantImage(string name, TenantImageArgs args, CustomResourceOptions? options = null)
            : base("f5os:index/tenantImage:TenantImage", name, args ?? new TenantImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TenantImage(string name, Input<string> id, TenantImageState? state = null, CustomResourceOptions? options = null)
            : base("f5os:index/tenantImage:TenantImage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "remotePassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TenantImage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TenantImage Get(string name, Input<string> id, TenantImageState? state = null, CustomResourceOptions? options = null)
        {
            return new TenantImage(name, id, state, options);
        }
    }

    public sealed class TenantImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the tenant image.
        /// </summary>
        [Input("imageName", required: true)]
        public Input<string> ImageName { get; set; } = null!;

        /// <summary>
        /// The path on the F5OS where the the tenant image is to be imported to.
        /// </summary>
        [Input("localPath")]
        public Input<string>? LocalPath { get; set; }

        /// <summary>
        /// Protocol for image transfer.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The hostname or IP address of the remote server on which the tenant image is stored.
        /// The server must make the image accessible via the specified protocol.
        /// </summary>
        [Input("remoteHost")]
        public Input<string>? RemoteHost { get; set; }

        [Input("remotePassword")]
        private Input<string>? _remotePassword;

        /// <summary>
        /// Password for the user on the remote server on which the tenant image is stored.
        /// </summary>
        public Input<string>? RemotePassword
        {
            get => _remotePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _remotePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The path to the tenant image on the remote server.
        /// </summary>
        [Input("remotePath")]
        public Input<string>? RemotePath { get; set; }

        /// <summary>
        /// The port on the remote host to which you want to connect.
        /// If the port is not provided, a default port for the selected protocol is used.
        /// </summary>
        [Input("remotePort")]
        public Input<int>? RemotePort { get; set; }

        /// <summary>
        /// User name for the remote server on which the tenant image is stored.
        /// </summary>
        [Input("remoteUser")]
        public Input<string>? RemoteUser { get; set; }

        /// <summary>
        /// The number of seconds to wait for image import to finish.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The path to image on the local machine which is to be uploaded
        /// </summary>
        [Input("uploadFromPath")]
        public Input<string>? UploadFromPath { get; set; }

        public TenantImageArgs()
        {
        }
        public static new TenantImageArgs Empty => new TenantImageArgs();
    }

    public sealed class TenantImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the tenant image.
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// The path on the F5OS where the the tenant image is to be imported to.
        /// </summary>
        [Input("localPath")]
        public Input<string>? LocalPath { get; set; }

        /// <summary>
        /// Protocol for image transfer.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The hostname or IP address of the remote server on which the tenant image is stored.
        /// The server must make the image accessible via the specified protocol.
        /// </summary>
        [Input("remoteHost")]
        public Input<string>? RemoteHost { get; set; }

        [Input("remotePassword")]
        private Input<string>? _remotePassword;

        /// <summary>
        /// Password for the user on the remote server on which the tenant image is stored.
        /// </summary>
        public Input<string>? RemotePassword
        {
            get => _remotePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _remotePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The path to the tenant image on the remote server.
        /// </summary>
        [Input("remotePath")]
        public Input<string>? RemotePath { get; set; }

        /// <summary>
        /// The port on the remote host to which you want to connect.
        /// If the port is not provided, a default port for the selected protocol is used.
        /// </summary>
        [Input("remotePort")]
        public Input<int>? RemotePort { get; set; }

        /// <summary>
        /// User name for the remote server on which the tenant image is stored.
        /// </summary>
        [Input("remoteUser")]
        public Input<string>? RemoteUser { get; set; }

        /// <summary>
        /// Status of Imported Image
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The number of seconds to wait for image import to finish.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The path to image on the local machine which is to be uploaded
        /// </summary>
        [Input("uploadFromPath")]
        public Input<string>? UploadFromPath { get; set; }

        public TenantImageState()
        {
        }
        public static new TenantImageState Empty => new TenantImageState();
    }
}
