// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"errors"
	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to manage license activation and deactivation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := f5os.NewLicense(ctx, "dummy_license", &f5os.LicenseArgs{
//				RegistrationKey: pulumi.String("W9XXX-8YYYZ-8KKK7-7PPP2-ZZZZZZ"),
//				AddonKeys: pulumi.StringArray{
//					pulumi.String("NNNWWWW-9PPPPKK"),
//					pulumi.String("WWWWXXX-4ZZZYYY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type License struct {
	pulumi.CustomResourceState

	// The additional registration keys from a license server for the device license activation.
	AddonKeys pulumi.StringArrayOutput `pulumi:"addonKeys"`
	// The license server url.
	LicenseServer pulumi.StringPtrOutput `pulumi:"licenseServer"`
	// The Base registration key from a license server for the device license activation.
	RegistrationKey pulumi.StringOutput `pulumi:"registrationKey"`
}

// NewLicense registers a new resource with the given unique name, arguments, and options.
func NewLicense(ctx *pulumi.Context,
	name string, args *LicenseArgs, opts ...pulumi.ResourceOption) (*License, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistrationKey == nil {
		return nil, errors.New("invalid value for required argument 'RegistrationKey'")
	}
	if args.AddonKeys != nil {
		args.AddonKeys = pulumi.ToSecret(args.AddonKeys).(pulumi.StringArrayInput)
	}
	if args.RegistrationKey != nil {
		args.RegistrationKey = pulumi.ToSecret(args.RegistrationKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"addonKeys",
		"registrationKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource License
	err := ctx.RegisterResource("f5os:index/license:License", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicense gets an existing License resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseState, opts ...pulumi.ResourceOption) (*License, error) {
	var resource License
	err := ctx.ReadResource("f5os:index/license:License", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering License resources.
type licenseState struct {
	// The additional registration keys from a license server for the device license activation.
	AddonKeys []string `pulumi:"addonKeys"`
	// The license server url.
	LicenseServer *string `pulumi:"licenseServer"`
	// The Base registration key from a license server for the device license activation.
	RegistrationKey *string `pulumi:"registrationKey"`
}

type LicenseState struct {
	// The additional registration keys from a license server for the device license activation.
	AddonKeys pulumi.StringArrayInput
	// The license server url.
	LicenseServer pulumi.StringPtrInput
	// The Base registration key from a license server for the device license activation.
	RegistrationKey pulumi.StringPtrInput
}

func (LicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseState)(nil)).Elem()
}

type licenseArgs struct {
	// The additional registration keys from a license server for the device license activation.
	AddonKeys []string `pulumi:"addonKeys"`
	// The license server url.
	LicenseServer *string `pulumi:"licenseServer"`
	// The Base registration key from a license server for the device license activation.
	RegistrationKey string `pulumi:"registrationKey"`
}

// The set of arguments for constructing a License resource.
type LicenseArgs struct {
	// The additional registration keys from a license server for the device license activation.
	AddonKeys pulumi.StringArrayInput
	// The license server url.
	LicenseServer pulumi.StringPtrInput
	// The Base registration key from a license server for the device license activation.
	RegistrationKey pulumi.StringInput
}

func (LicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseArgs)(nil)).Elem()
}

type LicenseInput interface {
	pulumi.Input

	ToLicenseOutput() LicenseOutput
	ToLicenseOutputWithContext(ctx context.Context) LicenseOutput
}

func (*License) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (i *License) ToLicenseOutput() LicenseOutput {
	return i.ToLicenseOutputWithContext(context.Background())
}

func (i *License) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOutput)
}

// LicenseArrayInput is an input type that accepts LicenseArray and LicenseArrayOutput values.
// You can construct a concrete instance of `LicenseArrayInput` via:
//
//	LicenseArray{ LicenseArgs{...} }
type LicenseArrayInput interface {
	pulumi.Input

	ToLicenseArrayOutput() LicenseArrayOutput
	ToLicenseArrayOutputWithContext(context.Context) LicenseArrayOutput
}

type LicenseArray []LicenseInput

func (LicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*License)(nil)).Elem()
}

func (i LicenseArray) ToLicenseArrayOutput() LicenseArrayOutput {
	return i.ToLicenseArrayOutputWithContext(context.Background())
}

func (i LicenseArray) ToLicenseArrayOutputWithContext(ctx context.Context) LicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseArrayOutput)
}

// LicenseMapInput is an input type that accepts LicenseMap and LicenseMapOutput values.
// You can construct a concrete instance of `LicenseMapInput` via:
//
//	LicenseMap{ "key": LicenseArgs{...} }
type LicenseMapInput interface {
	pulumi.Input

	ToLicenseMapOutput() LicenseMapOutput
	ToLicenseMapOutputWithContext(context.Context) LicenseMapOutput
}

type LicenseMap map[string]LicenseInput

func (LicenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*License)(nil)).Elem()
}

func (i LicenseMap) ToLicenseMapOutput() LicenseMapOutput {
	return i.ToLicenseMapOutputWithContext(context.Background())
}

func (i LicenseMap) ToLicenseMapOutputWithContext(ctx context.Context) LicenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseMapOutput)
}

type LicenseOutput struct{ *pulumi.OutputState }

func (LicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (o LicenseOutput) ToLicenseOutput() LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return o
}

// The additional registration keys from a license server for the device license activation.
func (o LicenseOutput) AddonKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *License) pulumi.StringArrayOutput { return v.AddonKeys }).(pulumi.StringArrayOutput)
}

// The license server url.
func (o LicenseOutput) LicenseServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *License) pulumi.StringPtrOutput { return v.LicenseServer }).(pulumi.StringPtrOutput)
}

// The Base registration key from a license server for the device license activation.
func (o LicenseOutput) RegistrationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *License) pulumi.StringOutput { return v.RegistrationKey }).(pulumi.StringOutput)
}

type LicenseArrayOutput struct{ *pulumi.OutputState }

func (LicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*License)(nil)).Elem()
}

func (o LicenseArrayOutput) ToLicenseArrayOutput() LicenseArrayOutput {
	return o
}

func (o LicenseArrayOutput) ToLicenseArrayOutputWithContext(ctx context.Context) LicenseArrayOutput {
	return o
}

func (o LicenseArrayOutput) Index(i pulumi.IntInput) LicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *License {
		return vs[0].([]*License)[vs[1].(int)]
	}).(LicenseOutput)
}

type LicenseMapOutput struct{ *pulumi.OutputState }

func (LicenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*License)(nil)).Elem()
}

func (o LicenseMapOutput) ToLicenseMapOutput() LicenseMapOutput {
	return o
}

func (o LicenseMapOutput) ToLicenseMapOutputWithContext(ctx context.Context) LicenseMapOutput {
	return o
}

func (o LicenseMapOutput) MapIndex(k pulumi.StringInput) LicenseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *License {
		return vs[0].(map[string]*License)[vs[1].(string)]
	}).(LicenseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseInput)(nil)).Elem(), &License{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseArrayInput)(nil)).Elem(), LicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseMapInput)(nil)).Elem(), LicenseMap{})
	pulumi.RegisterOutputType(LicenseOutput{})
	pulumi.RegisterOutputType(LicenseArrayOutput{})
	pulumi.RegisterOutputType(LicenseMapOutput{})
}
