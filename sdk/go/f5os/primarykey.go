// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"errors"
	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage system primary-key using passphrase and salt on F5OS devices.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Manages Primary key settings on F5OS platforms
//			_, err := f5os.NewPrimarykey(ctx, "default", &f5os.PrimarykeyArgs{
//				Passphrase:  pulumi.String("test-pass"),
//				Salt:        pulumi.String("test-salt"),
//				ForceUpdate: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Primarykey struct {
	pulumi.CustomResourceState

	// Force update the primary key on F5OS device.
	ForceUpdate pulumi.BoolOutput `pulumi:"forceUpdate"`
	// Hash of the primary key as returned by the system.
	Hash pulumi.StringOutput `pulumi:"hash"`
	// Specifies passphrase for generating primary key.
	Passphrase pulumi.StringOutput `pulumi:"passphrase"`
	// Specifies salt for generating primary key.
	Salt pulumi.StringOutput `pulumi:"salt"`
	// Status of primary key operation (e.g., COMPLETE)
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewPrimarykey registers a new resource with the given unique name, arguments, and options.
func NewPrimarykey(ctx *pulumi.Context,
	name string, args *PrimarykeyArgs, opts ...pulumi.ResourceOption) (*Primarykey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Passphrase == nil {
		return nil, errors.New("invalid value for required argument 'Passphrase'")
	}
	if args.Salt == nil {
		return nil, errors.New("invalid value for required argument 'Salt'")
	}
	if args.Passphrase != nil {
		args.Passphrase = pulumi.ToSecret(args.Passphrase).(pulumi.StringInput)
	}
	if args.Salt != nil {
		args.Salt = pulumi.ToSecret(args.Salt).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"passphrase",
		"salt",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Primarykey
	err := ctx.RegisterResource("f5os:index/primarykey:Primarykey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrimarykey gets an existing Primarykey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrimarykey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrimarykeyState, opts ...pulumi.ResourceOption) (*Primarykey, error) {
	var resource Primarykey
	err := ctx.ReadResource("f5os:index/primarykey:Primarykey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Primarykey resources.
type primarykeyState struct {
	// Force update the primary key on F5OS device.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Hash of the primary key as returned by the system.
	Hash *string `pulumi:"hash"`
	// Specifies passphrase for generating primary key.
	Passphrase *string `pulumi:"passphrase"`
	// Specifies salt for generating primary key.
	Salt *string `pulumi:"salt"`
	// Status of primary key operation (e.g., COMPLETE)
	Status *string `pulumi:"status"`
}

type PrimarykeyState struct {
	// Force update the primary key on F5OS device.
	ForceUpdate pulumi.BoolPtrInput
	// Hash of the primary key as returned by the system.
	Hash pulumi.StringPtrInput
	// Specifies passphrase for generating primary key.
	Passphrase pulumi.StringPtrInput
	// Specifies salt for generating primary key.
	Salt pulumi.StringPtrInput
	// Status of primary key operation (e.g., COMPLETE)
	Status pulumi.StringPtrInput
}

func (PrimarykeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*primarykeyState)(nil)).Elem()
}

type primarykeyArgs struct {
	// Force update the primary key on F5OS device.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Specifies passphrase for generating primary key.
	Passphrase string `pulumi:"passphrase"`
	// Specifies salt for generating primary key.
	Salt string `pulumi:"salt"`
}

// The set of arguments for constructing a Primarykey resource.
type PrimarykeyArgs struct {
	// Force update the primary key on F5OS device.
	ForceUpdate pulumi.BoolPtrInput
	// Specifies passphrase for generating primary key.
	Passphrase pulumi.StringInput
	// Specifies salt for generating primary key.
	Salt pulumi.StringInput
}

func (PrimarykeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*primarykeyArgs)(nil)).Elem()
}

type PrimarykeyInput interface {
	pulumi.Input

	ToPrimarykeyOutput() PrimarykeyOutput
	ToPrimarykeyOutputWithContext(ctx context.Context) PrimarykeyOutput
}

func (*Primarykey) ElementType() reflect.Type {
	return reflect.TypeOf((**Primarykey)(nil)).Elem()
}

func (i *Primarykey) ToPrimarykeyOutput() PrimarykeyOutput {
	return i.ToPrimarykeyOutputWithContext(context.Background())
}

func (i *Primarykey) ToPrimarykeyOutputWithContext(ctx context.Context) PrimarykeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimarykeyOutput)
}

// PrimarykeyArrayInput is an input type that accepts PrimarykeyArray and PrimarykeyArrayOutput values.
// You can construct a concrete instance of `PrimarykeyArrayInput` via:
//
//	PrimarykeyArray{ PrimarykeyArgs{...} }
type PrimarykeyArrayInput interface {
	pulumi.Input

	ToPrimarykeyArrayOutput() PrimarykeyArrayOutput
	ToPrimarykeyArrayOutputWithContext(context.Context) PrimarykeyArrayOutput
}

type PrimarykeyArray []PrimarykeyInput

func (PrimarykeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Primarykey)(nil)).Elem()
}

func (i PrimarykeyArray) ToPrimarykeyArrayOutput() PrimarykeyArrayOutput {
	return i.ToPrimarykeyArrayOutputWithContext(context.Background())
}

func (i PrimarykeyArray) ToPrimarykeyArrayOutputWithContext(ctx context.Context) PrimarykeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimarykeyArrayOutput)
}

// PrimarykeyMapInput is an input type that accepts PrimarykeyMap and PrimarykeyMapOutput values.
// You can construct a concrete instance of `PrimarykeyMapInput` via:
//
//	PrimarykeyMap{ "key": PrimarykeyArgs{...} }
type PrimarykeyMapInput interface {
	pulumi.Input

	ToPrimarykeyMapOutput() PrimarykeyMapOutput
	ToPrimarykeyMapOutputWithContext(context.Context) PrimarykeyMapOutput
}

type PrimarykeyMap map[string]PrimarykeyInput

func (PrimarykeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Primarykey)(nil)).Elem()
}

func (i PrimarykeyMap) ToPrimarykeyMapOutput() PrimarykeyMapOutput {
	return i.ToPrimarykeyMapOutputWithContext(context.Background())
}

func (i PrimarykeyMap) ToPrimarykeyMapOutputWithContext(ctx context.Context) PrimarykeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimarykeyMapOutput)
}

type PrimarykeyOutput struct{ *pulumi.OutputState }

func (PrimarykeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Primarykey)(nil)).Elem()
}

func (o PrimarykeyOutput) ToPrimarykeyOutput() PrimarykeyOutput {
	return o
}

func (o PrimarykeyOutput) ToPrimarykeyOutputWithContext(ctx context.Context) PrimarykeyOutput {
	return o
}

// Force update the primary key on F5OS device.
func (o PrimarykeyOutput) ForceUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *Primarykey) pulumi.BoolOutput { return v.ForceUpdate }).(pulumi.BoolOutput)
}

// Hash of the primary key as returned by the system.
func (o PrimarykeyOutput) Hash() pulumi.StringOutput {
	return o.ApplyT(func(v *Primarykey) pulumi.StringOutput { return v.Hash }).(pulumi.StringOutput)
}

// Specifies passphrase for generating primary key.
func (o PrimarykeyOutput) Passphrase() pulumi.StringOutput {
	return o.ApplyT(func(v *Primarykey) pulumi.StringOutput { return v.Passphrase }).(pulumi.StringOutput)
}

// Specifies salt for generating primary key.
func (o PrimarykeyOutput) Salt() pulumi.StringOutput {
	return o.ApplyT(func(v *Primarykey) pulumi.StringOutput { return v.Salt }).(pulumi.StringOutput)
}

// Status of primary key operation (e.g., COMPLETE)
func (o PrimarykeyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Primarykey) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type PrimarykeyArrayOutput struct{ *pulumi.OutputState }

func (PrimarykeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Primarykey)(nil)).Elem()
}

func (o PrimarykeyArrayOutput) ToPrimarykeyArrayOutput() PrimarykeyArrayOutput {
	return o
}

func (o PrimarykeyArrayOutput) ToPrimarykeyArrayOutputWithContext(ctx context.Context) PrimarykeyArrayOutput {
	return o
}

func (o PrimarykeyArrayOutput) Index(i pulumi.IntInput) PrimarykeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Primarykey {
		return vs[0].([]*Primarykey)[vs[1].(int)]
	}).(PrimarykeyOutput)
}

type PrimarykeyMapOutput struct{ *pulumi.OutputState }

func (PrimarykeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Primarykey)(nil)).Elem()
}

func (o PrimarykeyMapOutput) ToPrimarykeyMapOutput() PrimarykeyMapOutput {
	return o
}

func (o PrimarykeyMapOutput) ToPrimarykeyMapOutputWithContext(ctx context.Context) PrimarykeyMapOutput {
	return o
}

func (o PrimarykeyMapOutput) MapIndex(k pulumi.StringInput) PrimarykeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Primarykey {
		return vs[0].(map[string]*Primarykey)[vs[1].(string)]
	}).(PrimarykeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrimarykeyInput)(nil)).Elem(), &Primarykey{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimarykeyArrayInput)(nil)).Elem(), PrimarykeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimarykeyMapInput)(nil)).Elem(), PrimarykeyMap{})
	pulumi.RegisterOutputType(PrimarykeyOutput{})
	pulumi.RegisterOutputType(PrimarykeyArrayOutput{})
	pulumi.RegisterOutputType(PrimarykeyMapOutput{})
}
