// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"errors"
	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource used to manage password of a specific user on a velos chassis partition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Manages Changing F5os Partition password
//			_, err := f5os.NewPartitionChangePassword(ctx, "changepass", &f5os.PartitionChangePasswordArgs{
//				UserName:    pulumi.String("xxxxx"),
//				OldPassword: pulumi.String("xxxxxxxx"),
//				NewPassword: pulumi.String("xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PartitionChangePassword struct {
	pulumi.CustomResourceState

	// New password for the specified user account.
	NewPassword pulumi.StringOutput `pulumi:"newPassword"`
	// Current password for the specified user account.
	OldPassword pulumi.StringOutput `pulumi:"oldPassword"`
	// Name of the chassis partition user account.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewPartitionChangePassword registers a new resource with the given unique name, arguments, and options.
func NewPartitionChangePassword(ctx *pulumi.Context,
	name string, args *PartitionChangePasswordArgs, opts ...pulumi.ResourceOption) (*PartitionChangePassword, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NewPassword == nil {
		return nil, errors.New("invalid value for required argument 'NewPassword'")
	}
	if args.OldPassword == nil {
		return nil, errors.New("invalid value for required argument 'OldPassword'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.NewPassword != nil {
		args.NewPassword = pulumi.ToSecret(args.NewPassword).(pulumi.StringInput)
	}
	if args.OldPassword != nil {
		args.OldPassword = pulumi.ToSecret(args.OldPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"newPassword",
		"oldPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartitionChangePassword
	err := ctx.RegisterResource("f5os:index/partitionChangePassword:PartitionChangePassword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartitionChangePassword gets an existing PartitionChangePassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartitionChangePassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartitionChangePasswordState, opts ...pulumi.ResourceOption) (*PartitionChangePassword, error) {
	var resource PartitionChangePassword
	err := ctx.ReadResource("f5os:index/partitionChangePassword:PartitionChangePassword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartitionChangePassword resources.
type partitionChangePasswordState struct {
	// New password for the specified user account.
	NewPassword *string `pulumi:"newPassword"`
	// Current password for the specified user account.
	OldPassword *string `pulumi:"oldPassword"`
	// Name of the chassis partition user account.
	UserName *string `pulumi:"userName"`
}

type PartitionChangePasswordState struct {
	// New password for the specified user account.
	NewPassword pulumi.StringPtrInput
	// Current password for the specified user account.
	OldPassword pulumi.StringPtrInput
	// Name of the chassis partition user account.
	UserName pulumi.StringPtrInput
}

func (PartitionChangePasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionChangePasswordState)(nil)).Elem()
}

type partitionChangePasswordArgs struct {
	// New password for the specified user account.
	NewPassword string `pulumi:"newPassword"`
	// Current password for the specified user account.
	OldPassword string `pulumi:"oldPassword"`
	// Name of the chassis partition user account.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a PartitionChangePassword resource.
type PartitionChangePasswordArgs struct {
	// New password for the specified user account.
	NewPassword pulumi.StringInput
	// Current password for the specified user account.
	OldPassword pulumi.StringInput
	// Name of the chassis partition user account.
	UserName pulumi.StringInput
}

func (PartitionChangePasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionChangePasswordArgs)(nil)).Elem()
}

type PartitionChangePasswordInput interface {
	pulumi.Input

	ToPartitionChangePasswordOutput() PartitionChangePasswordOutput
	ToPartitionChangePasswordOutputWithContext(ctx context.Context) PartitionChangePasswordOutput
}

func (*PartitionChangePassword) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionChangePassword)(nil)).Elem()
}

func (i *PartitionChangePassword) ToPartitionChangePasswordOutput() PartitionChangePasswordOutput {
	return i.ToPartitionChangePasswordOutputWithContext(context.Background())
}

func (i *PartitionChangePassword) ToPartitionChangePasswordOutputWithContext(ctx context.Context) PartitionChangePasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionChangePasswordOutput)
}

// PartitionChangePasswordArrayInput is an input type that accepts PartitionChangePasswordArray and PartitionChangePasswordArrayOutput values.
// You can construct a concrete instance of `PartitionChangePasswordArrayInput` via:
//
//	PartitionChangePasswordArray{ PartitionChangePasswordArgs{...} }
type PartitionChangePasswordArrayInput interface {
	pulumi.Input

	ToPartitionChangePasswordArrayOutput() PartitionChangePasswordArrayOutput
	ToPartitionChangePasswordArrayOutputWithContext(context.Context) PartitionChangePasswordArrayOutput
}

type PartitionChangePasswordArray []PartitionChangePasswordInput

func (PartitionChangePasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartitionChangePassword)(nil)).Elem()
}

func (i PartitionChangePasswordArray) ToPartitionChangePasswordArrayOutput() PartitionChangePasswordArrayOutput {
	return i.ToPartitionChangePasswordArrayOutputWithContext(context.Background())
}

func (i PartitionChangePasswordArray) ToPartitionChangePasswordArrayOutputWithContext(ctx context.Context) PartitionChangePasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionChangePasswordArrayOutput)
}

// PartitionChangePasswordMapInput is an input type that accepts PartitionChangePasswordMap and PartitionChangePasswordMapOutput values.
// You can construct a concrete instance of `PartitionChangePasswordMapInput` via:
//
//	PartitionChangePasswordMap{ "key": PartitionChangePasswordArgs{...} }
type PartitionChangePasswordMapInput interface {
	pulumi.Input

	ToPartitionChangePasswordMapOutput() PartitionChangePasswordMapOutput
	ToPartitionChangePasswordMapOutputWithContext(context.Context) PartitionChangePasswordMapOutput
}

type PartitionChangePasswordMap map[string]PartitionChangePasswordInput

func (PartitionChangePasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartitionChangePassword)(nil)).Elem()
}

func (i PartitionChangePasswordMap) ToPartitionChangePasswordMapOutput() PartitionChangePasswordMapOutput {
	return i.ToPartitionChangePasswordMapOutputWithContext(context.Background())
}

func (i PartitionChangePasswordMap) ToPartitionChangePasswordMapOutputWithContext(ctx context.Context) PartitionChangePasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionChangePasswordMapOutput)
}

type PartitionChangePasswordOutput struct{ *pulumi.OutputState }

func (PartitionChangePasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionChangePassword)(nil)).Elem()
}

func (o PartitionChangePasswordOutput) ToPartitionChangePasswordOutput() PartitionChangePasswordOutput {
	return o
}

func (o PartitionChangePasswordOutput) ToPartitionChangePasswordOutputWithContext(ctx context.Context) PartitionChangePasswordOutput {
	return o
}

// New password for the specified user account.
func (o PartitionChangePasswordOutput) NewPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *PartitionChangePassword) pulumi.StringOutput { return v.NewPassword }).(pulumi.StringOutput)
}

// Current password for the specified user account.
func (o PartitionChangePasswordOutput) OldPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *PartitionChangePassword) pulumi.StringOutput { return v.OldPassword }).(pulumi.StringOutput)
}

// Name of the chassis partition user account.
func (o PartitionChangePasswordOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *PartitionChangePassword) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type PartitionChangePasswordArrayOutput struct{ *pulumi.OutputState }

func (PartitionChangePasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartitionChangePassword)(nil)).Elem()
}

func (o PartitionChangePasswordArrayOutput) ToPartitionChangePasswordArrayOutput() PartitionChangePasswordArrayOutput {
	return o
}

func (o PartitionChangePasswordArrayOutput) ToPartitionChangePasswordArrayOutputWithContext(ctx context.Context) PartitionChangePasswordArrayOutput {
	return o
}

func (o PartitionChangePasswordArrayOutput) Index(i pulumi.IntInput) PartitionChangePasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartitionChangePassword {
		return vs[0].([]*PartitionChangePassword)[vs[1].(int)]
	}).(PartitionChangePasswordOutput)
}

type PartitionChangePasswordMapOutput struct{ *pulumi.OutputState }

func (PartitionChangePasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartitionChangePassword)(nil)).Elem()
}

func (o PartitionChangePasswordMapOutput) ToPartitionChangePasswordMapOutput() PartitionChangePasswordMapOutput {
	return o
}

func (o PartitionChangePasswordMapOutput) ToPartitionChangePasswordMapOutputWithContext(ctx context.Context) PartitionChangePasswordMapOutput {
	return o
}

func (o PartitionChangePasswordMapOutput) MapIndex(k pulumi.StringInput) PartitionChangePasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartitionChangePassword {
		return vs[0].(map[string]*PartitionChangePassword)[vs[1].(string)]
	}).(PartitionChangePasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionChangePasswordInput)(nil)).Elem(), &PartitionChangePassword{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionChangePasswordArrayInput)(nil)).Elem(), PartitionChangePasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionChangePasswordMapInput)(nil)).Elem(), PartitionChangePasswordMap{})
	pulumi.RegisterOutputType(PartitionChangePasswordOutput{})
	pulumi.RegisterOutputType(PartitionChangePasswordArrayOutput{})
	pulumi.RegisterOutputType(PartitionChangePasswordMapOutput{})
}
