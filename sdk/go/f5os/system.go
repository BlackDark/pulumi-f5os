// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"errors"
	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to manage generic system settings
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Manages System settings on F5OS platforms
//			_, err := f5os.NewSystem(ctx, "system_settings", &f5os.SystemArgs{
//				Hostname:         pulumi.String("system.example.net"),
//				Motd:             pulumi.String("Todays weather is great!"),
//				LoginBanner:      pulumi.String("Welcome to the system."),
//				Timezone:         pulumi.String("UTC"),
//				CliTimeout:       pulumi.Int(3600),
//				TokenLifetime:    pulumi.Int(15),
//				SshdIdleTimeout:  pulumi.String("1800"),
//				HttpdCiphersuite: pulumi.String("ECDHE-RSA-AES256-GCM-SHA384"),
//				SshdCiphers: pulumi.StringArray{
//					pulumi.String("aes256-ctr"),
//					pulumi.String("aes256-gcm@openssh.com"),
//				},
//				SshdKexAlgs: pulumi.StringArray{
//					pulumi.String("ecdh-sha2-nistp384"),
//				},
//				SshdMacAlgs: pulumi.StringArray{
//					pulumi.String("hmac-sha1-96"),
//				},
//				SshdHkeyAlgs: pulumi.StringArray{
//					pulumi.String("ssh-rsa"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type System struct {
	pulumi.CustomResourceState

	// CLI idle timeout
	CliTimeout pulumi.IntPtrOutput `pulumi:"cliTimeout"`
	// System Hostname
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// HTTPS Ciphersuite in OpenSSL format
	HttpdCiphersuite pulumi.StringPtrOutput `pulumi:"httpdCiphersuite"`
	// Login Banner
	LoginBanner pulumi.StringPtrOutput `pulumi:"loginBanner"`
	// Message of the day
	Motd pulumi.StringPtrOutput `pulumi:"motd"`
	// List of httpd ciphersuite in OpenSSL format
	SshdCiphers pulumi.StringArrayOutput `pulumi:"sshdCiphers"`
	// List of the sshd host key algorithms in OpenSSH format
	SshdHkeyAlgs pulumi.StringArrayOutput `pulumi:"sshdHkeyAlgs"`
	// SSH Idle timeout
	SshdIdleTimeout pulumi.StringPtrOutput `pulumi:"sshdIdleTimeout"`
	// List of sshd key exchange algorithms in OpenSSH format
	SshdKexAlgs pulumi.StringArrayOutput `pulumi:"sshdKexAlgs"`
	// List of sshd Mac algorithms in OpenSSH format
	SshdMacAlgs pulumi.StringArrayOutput `pulumi:"sshdMacAlgs"`
	// Timezone for the system per TZ database name
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
	// Token lifetime length in minutes
	TokenLifetime pulumi.IntPtrOutput `pulumi:"tokenLifetime"`
}

// NewSystem registers a new resource with the given unique name, arguments, and options.
func NewSystem(ctx *pulumi.Context,
	name string, args *SystemArgs, opts ...pulumi.ResourceOption) (*System, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource System
	err := ctx.RegisterResource("f5os:index/system:System", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystem gets an existing System resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemState, opts ...pulumi.ResourceOption) (*System, error) {
	var resource System
	err := ctx.ReadResource("f5os:index/system:System", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering System resources.
type systemState struct {
	// CLI idle timeout
	CliTimeout *int `pulumi:"cliTimeout"`
	// System Hostname
	Hostname *string `pulumi:"hostname"`
	// HTTPS Ciphersuite in OpenSSL format
	HttpdCiphersuite *string `pulumi:"httpdCiphersuite"`
	// Login Banner
	LoginBanner *string `pulumi:"loginBanner"`
	// Message of the day
	Motd *string `pulumi:"motd"`
	// List of httpd ciphersuite in OpenSSL format
	SshdCiphers []string `pulumi:"sshdCiphers"`
	// List of the sshd host key algorithms in OpenSSH format
	SshdHkeyAlgs []string `pulumi:"sshdHkeyAlgs"`
	// SSH Idle timeout
	SshdIdleTimeout *string `pulumi:"sshdIdleTimeout"`
	// List of sshd key exchange algorithms in OpenSSH format
	SshdKexAlgs []string `pulumi:"sshdKexAlgs"`
	// List of sshd Mac algorithms in OpenSSH format
	SshdMacAlgs []string `pulumi:"sshdMacAlgs"`
	// Timezone for the system per TZ database name
	Timezone *string `pulumi:"timezone"`
	// Token lifetime length in minutes
	TokenLifetime *int `pulumi:"tokenLifetime"`
}

type SystemState struct {
	// CLI idle timeout
	CliTimeout pulumi.IntPtrInput
	// System Hostname
	Hostname pulumi.StringPtrInput
	// HTTPS Ciphersuite in OpenSSL format
	HttpdCiphersuite pulumi.StringPtrInput
	// Login Banner
	LoginBanner pulumi.StringPtrInput
	// Message of the day
	Motd pulumi.StringPtrInput
	// List of httpd ciphersuite in OpenSSL format
	SshdCiphers pulumi.StringArrayInput
	// List of the sshd host key algorithms in OpenSSH format
	SshdHkeyAlgs pulumi.StringArrayInput
	// SSH Idle timeout
	SshdIdleTimeout pulumi.StringPtrInput
	// List of sshd key exchange algorithms in OpenSSH format
	SshdKexAlgs pulumi.StringArrayInput
	// List of sshd Mac algorithms in OpenSSH format
	SshdMacAlgs pulumi.StringArrayInput
	// Timezone for the system per TZ database name
	Timezone pulumi.StringPtrInput
	// Token lifetime length in minutes
	TokenLifetime pulumi.IntPtrInput
}

func (SystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemState)(nil)).Elem()
}

type systemArgs struct {
	// CLI idle timeout
	CliTimeout *int `pulumi:"cliTimeout"`
	// System Hostname
	Hostname string `pulumi:"hostname"`
	// HTTPS Ciphersuite in OpenSSL format
	HttpdCiphersuite *string `pulumi:"httpdCiphersuite"`
	// Login Banner
	LoginBanner *string `pulumi:"loginBanner"`
	// Message of the day
	Motd *string `pulumi:"motd"`
	// List of httpd ciphersuite in OpenSSL format
	SshdCiphers []string `pulumi:"sshdCiphers"`
	// List of the sshd host key algorithms in OpenSSH format
	SshdHkeyAlgs []string `pulumi:"sshdHkeyAlgs"`
	// SSH Idle timeout
	SshdIdleTimeout *string `pulumi:"sshdIdleTimeout"`
	// List of sshd key exchange algorithms in OpenSSH format
	SshdKexAlgs []string `pulumi:"sshdKexAlgs"`
	// List of sshd Mac algorithms in OpenSSH format
	SshdMacAlgs []string `pulumi:"sshdMacAlgs"`
	// Timezone for the system per TZ database name
	Timezone *string `pulumi:"timezone"`
	// Token lifetime length in minutes
	TokenLifetime *int `pulumi:"tokenLifetime"`
}

// The set of arguments for constructing a System resource.
type SystemArgs struct {
	// CLI idle timeout
	CliTimeout pulumi.IntPtrInput
	// System Hostname
	Hostname pulumi.StringInput
	// HTTPS Ciphersuite in OpenSSL format
	HttpdCiphersuite pulumi.StringPtrInput
	// Login Banner
	LoginBanner pulumi.StringPtrInput
	// Message of the day
	Motd pulumi.StringPtrInput
	// List of httpd ciphersuite in OpenSSL format
	SshdCiphers pulumi.StringArrayInput
	// List of the sshd host key algorithms in OpenSSH format
	SshdHkeyAlgs pulumi.StringArrayInput
	// SSH Idle timeout
	SshdIdleTimeout pulumi.StringPtrInput
	// List of sshd key exchange algorithms in OpenSSH format
	SshdKexAlgs pulumi.StringArrayInput
	// List of sshd Mac algorithms in OpenSSH format
	SshdMacAlgs pulumi.StringArrayInput
	// Timezone for the system per TZ database name
	Timezone pulumi.StringPtrInput
	// Token lifetime length in minutes
	TokenLifetime pulumi.IntPtrInput
}

func (SystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemArgs)(nil)).Elem()
}

type SystemInput interface {
	pulumi.Input

	ToSystemOutput() SystemOutput
	ToSystemOutputWithContext(ctx context.Context) SystemOutput
}

func (*System) ElementType() reflect.Type {
	return reflect.TypeOf((**System)(nil)).Elem()
}

func (i *System) ToSystemOutput() SystemOutput {
	return i.ToSystemOutputWithContext(context.Background())
}

func (i *System) ToSystemOutputWithContext(ctx context.Context) SystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemOutput)
}

// SystemArrayInput is an input type that accepts SystemArray and SystemArrayOutput values.
// You can construct a concrete instance of `SystemArrayInput` via:
//
//	SystemArray{ SystemArgs{...} }
type SystemArrayInput interface {
	pulumi.Input

	ToSystemArrayOutput() SystemArrayOutput
	ToSystemArrayOutputWithContext(context.Context) SystemArrayOutput
}

type SystemArray []SystemInput

func (SystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*System)(nil)).Elem()
}

func (i SystemArray) ToSystemArrayOutput() SystemArrayOutput {
	return i.ToSystemArrayOutputWithContext(context.Background())
}

func (i SystemArray) ToSystemArrayOutputWithContext(ctx context.Context) SystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemArrayOutput)
}

// SystemMapInput is an input type that accepts SystemMap and SystemMapOutput values.
// You can construct a concrete instance of `SystemMapInput` via:
//
//	SystemMap{ "key": SystemArgs{...} }
type SystemMapInput interface {
	pulumi.Input

	ToSystemMapOutput() SystemMapOutput
	ToSystemMapOutputWithContext(context.Context) SystemMapOutput
}

type SystemMap map[string]SystemInput

func (SystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*System)(nil)).Elem()
}

func (i SystemMap) ToSystemMapOutput() SystemMapOutput {
	return i.ToSystemMapOutputWithContext(context.Background())
}

func (i SystemMap) ToSystemMapOutputWithContext(ctx context.Context) SystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemMapOutput)
}

type SystemOutput struct{ *pulumi.OutputState }

func (SystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**System)(nil)).Elem()
}

func (o SystemOutput) ToSystemOutput() SystemOutput {
	return o
}

func (o SystemOutput) ToSystemOutputWithContext(ctx context.Context) SystemOutput {
	return o
}

// CLI idle timeout
func (o SystemOutput) CliTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *System) pulumi.IntPtrOutput { return v.CliTimeout }).(pulumi.IntPtrOutput)
}

// System Hostname
func (o SystemOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *System) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// HTTPS Ciphersuite in OpenSSL format
func (o SystemOutput) HttpdCiphersuite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *System) pulumi.StringPtrOutput { return v.HttpdCiphersuite }).(pulumi.StringPtrOutput)
}

// Login Banner
func (o SystemOutput) LoginBanner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *System) pulumi.StringPtrOutput { return v.LoginBanner }).(pulumi.StringPtrOutput)
}

// Message of the day
func (o SystemOutput) Motd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *System) pulumi.StringPtrOutput { return v.Motd }).(pulumi.StringPtrOutput)
}

// List of httpd ciphersuite in OpenSSL format
func (o SystemOutput) SshdCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *System) pulumi.StringArrayOutput { return v.SshdCiphers }).(pulumi.StringArrayOutput)
}

// List of the sshd host key algorithms in OpenSSH format
func (o SystemOutput) SshdHkeyAlgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *System) pulumi.StringArrayOutput { return v.SshdHkeyAlgs }).(pulumi.StringArrayOutput)
}

// SSH Idle timeout
func (o SystemOutput) SshdIdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *System) pulumi.StringPtrOutput { return v.SshdIdleTimeout }).(pulumi.StringPtrOutput)
}

// List of sshd key exchange algorithms in OpenSSH format
func (o SystemOutput) SshdKexAlgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *System) pulumi.StringArrayOutput { return v.SshdKexAlgs }).(pulumi.StringArrayOutput)
}

// List of sshd Mac algorithms in OpenSSH format
func (o SystemOutput) SshdMacAlgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *System) pulumi.StringArrayOutput { return v.SshdMacAlgs }).(pulumi.StringArrayOutput)
}

// Timezone for the system per TZ database name
func (o SystemOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *System) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// Token lifetime length in minutes
func (o SystemOutput) TokenLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *System) pulumi.IntPtrOutput { return v.TokenLifetime }).(pulumi.IntPtrOutput)
}

type SystemArrayOutput struct{ *pulumi.OutputState }

func (SystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*System)(nil)).Elem()
}

func (o SystemArrayOutput) ToSystemArrayOutput() SystemArrayOutput {
	return o
}

func (o SystemArrayOutput) ToSystemArrayOutputWithContext(ctx context.Context) SystemArrayOutput {
	return o
}

func (o SystemArrayOutput) Index(i pulumi.IntInput) SystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *System {
		return vs[0].([]*System)[vs[1].(int)]
	}).(SystemOutput)
}

type SystemMapOutput struct{ *pulumi.OutputState }

func (SystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*System)(nil)).Elem()
}

func (o SystemMapOutput) ToSystemMapOutput() SystemMapOutput {
	return o
}

func (o SystemMapOutput) ToSystemMapOutputWithContext(ctx context.Context) SystemMapOutput {
	return o
}

func (o SystemMapOutput) MapIndex(k pulumi.StringInput) SystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *System {
		return vs[0].(map[string]*System)[vs[1].(string)]
	}).(SystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemInput)(nil)).Elem(), &System{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemArrayInput)(nil)).Elem(), SystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemMapInput)(nil)).Elem(), SystemMap{})
	pulumi.RegisterOutputType(SystemOutput{})
	pulumi.RegisterOutputType(SystemArrayOutput{})
	pulumi.RegisterOutputType(SystemMapOutput{})
}
