// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"errors"
	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource used for Manage F5OS tenant images
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Resource for tenant image copy
//			_, err := f5os.NewTenantImage(ctx, "test", &f5os.TenantImageArgs{
//				ImageName:  pulumi.String("BIGIP-17.1.0-0.0.16.ALL-F5OS.qcow2.zip.bundle"),
//				RemoteHost: pulumi.String("xxxxx"),
//				RemotePath: pulumi.String("v17.1.0/daily/current/VM"),
//				LocalPath:  pulumi.String("images"),
//				Timeout:    pulumi.Int(360),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TenantImage struct {
	pulumi.CustomResourceState

	// Name of the tenant image.
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// The path on the F5OS where the the tenant image is to be imported to.
	LocalPath pulumi.StringPtrOutput `pulumi:"localPath"`
	// Protocol for image transfer.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The hostname or IP address of the remote server on which the tenant image is stored.
	// The server must make the image accessible via the specified protocol.
	RemoteHost pulumi.StringPtrOutput `pulumi:"remoteHost"`
	// Password for the user on the remote server on which the tenant image is stored.
	RemotePassword pulumi.StringPtrOutput `pulumi:"remotePassword"`
	// The path to the tenant image on the remote server.
	RemotePath pulumi.StringPtrOutput `pulumi:"remotePath"`
	// The port on the remote host to which you want to connect.
	// If the port is not provided, a default port for the selected protocol is used.
	RemotePort pulumi.IntPtrOutput `pulumi:"remotePort"`
	// User name for the remote server on which the tenant image is stored.
	RemoteUser pulumi.StringPtrOutput `pulumi:"remoteUser"`
	// Status of Imported Image
	Status pulumi.StringOutput `pulumi:"status"`
	// The number of seconds to wait for image import to finish.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// The path to image on the local machine which is to be uploaded
	UploadFromPath pulumi.StringPtrOutput `pulumi:"uploadFromPath"`
}

// NewTenantImage registers a new resource with the given unique name, arguments, and options.
func NewTenantImage(ctx *pulumi.Context,
	name string, args *TenantImageArgs, opts ...pulumi.ResourceOption) (*TenantImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageName == nil {
		return nil, errors.New("invalid value for required argument 'ImageName'")
	}
	if args.RemotePassword != nil {
		args.RemotePassword = pulumi.ToSecret(args.RemotePassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"remotePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TenantImage
	err := ctx.RegisterResource("f5os:index/tenantImage:TenantImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenantImage gets an existing TenantImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenantImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantImageState, opts ...pulumi.ResourceOption) (*TenantImage, error) {
	var resource TenantImage
	err := ctx.ReadResource("f5os:index/tenantImage:TenantImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TenantImage resources.
type tenantImageState struct {
	// Name of the tenant image.
	ImageName *string `pulumi:"imageName"`
	// The path on the F5OS where the the tenant image is to be imported to.
	LocalPath *string `pulumi:"localPath"`
	// Protocol for image transfer.
	Protocol *string `pulumi:"protocol"`
	// The hostname or IP address of the remote server on which the tenant image is stored.
	// The server must make the image accessible via the specified protocol.
	RemoteHost *string `pulumi:"remoteHost"`
	// Password for the user on the remote server on which the tenant image is stored.
	RemotePassword *string `pulumi:"remotePassword"`
	// The path to the tenant image on the remote server.
	RemotePath *string `pulumi:"remotePath"`
	// The port on the remote host to which you want to connect.
	// If the port is not provided, a default port for the selected protocol is used.
	RemotePort *int `pulumi:"remotePort"`
	// User name for the remote server on which the tenant image is stored.
	RemoteUser *string `pulumi:"remoteUser"`
	// Status of Imported Image
	Status *string `pulumi:"status"`
	// The number of seconds to wait for image import to finish.
	Timeout *int `pulumi:"timeout"`
	// The path to image on the local machine which is to be uploaded
	UploadFromPath *string `pulumi:"uploadFromPath"`
}

type TenantImageState struct {
	// Name of the tenant image.
	ImageName pulumi.StringPtrInput
	// The path on the F5OS where the the tenant image is to be imported to.
	LocalPath pulumi.StringPtrInput
	// Protocol for image transfer.
	Protocol pulumi.StringPtrInput
	// The hostname or IP address of the remote server on which the tenant image is stored.
	// The server must make the image accessible via the specified protocol.
	RemoteHost pulumi.StringPtrInput
	// Password for the user on the remote server on which the tenant image is stored.
	RemotePassword pulumi.StringPtrInput
	// The path to the tenant image on the remote server.
	RemotePath pulumi.StringPtrInput
	// The port on the remote host to which you want to connect.
	// If the port is not provided, a default port for the selected protocol is used.
	RemotePort pulumi.IntPtrInput
	// User name for the remote server on which the tenant image is stored.
	RemoteUser pulumi.StringPtrInput
	// Status of Imported Image
	Status pulumi.StringPtrInput
	// The number of seconds to wait for image import to finish.
	Timeout pulumi.IntPtrInput
	// The path to image on the local machine which is to be uploaded
	UploadFromPath pulumi.StringPtrInput
}

func (TenantImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantImageState)(nil)).Elem()
}

type tenantImageArgs struct {
	// Name of the tenant image.
	ImageName string `pulumi:"imageName"`
	// The path on the F5OS where the the tenant image is to be imported to.
	LocalPath *string `pulumi:"localPath"`
	// Protocol for image transfer.
	Protocol *string `pulumi:"protocol"`
	// The hostname or IP address of the remote server on which the tenant image is stored.
	// The server must make the image accessible via the specified protocol.
	RemoteHost *string `pulumi:"remoteHost"`
	// Password for the user on the remote server on which the tenant image is stored.
	RemotePassword *string `pulumi:"remotePassword"`
	// The path to the tenant image on the remote server.
	RemotePath *string `pulumi:"remotePath"`
	// The port on the remote host to which you want to connect.
	// If the port is not provided, a default port for the selected protocol is used.
	RemotePort *int `pulumi:"remotePort"`
	// User name for the remote server on which the tenant image is stored.
	RemoteUser *string `pulumi:"remoteUser"`
	// The number of seconds to wait for image import to finish.
	Timeout *int `pulumi:"timeout"`
	// The path to image on the local machine which is to be uploaded
	UploadFromPath *string `pulumi:"uploadFromPath"`
}

// The set of arguments for constructing a TenantImage resource.
type TenantImageArgs struct {
	// Name of the tenant image.
	ImageName pulumi.StringInput
	// The path on the F5OS where the the tenant image is to be imported to.
	LocalPath pulumi.StringPtrInput
	// Protocol for image transfer.
	Protocol pulumi.StringPtrInput
	// The hostname or IP address of the remote server on which the tenant image is stored.
	// The server must make the image accessible via the specified protocol.
	RemoteHost pulumi.StringPtrInput
	// Password for the user on the remote server on which the tenant image is stored.
	RemotePassword pulumi.StringPtrInput
	// The path to the tenant image on the remote server.
	RemotePath pulumi.StringPtrInput
	// The port on the remote host to which you want to connect.
	// If the port is not provided, a default port for the selected protocol is used.
	RemotePort pulumi.IntPtrInput
	// User name for the remote server on which the tenant image is stored.
	RemoteUser pulumi.StringPtrInput
	// The number of seconds to wait for image import to finish.
	Timeout pulumi.IntPtrInput
	// The path to image on the local machine which is to be uploaded
	UploadFromPath pulumi.StringPtrInput
}

func (TenantImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantImageArgs)(nil)).Elem()
}

type TenantImageInput interface {
	pulumi.Input

	ToTenantImageOutput() TenantImageOutput
	ToTenantImageOutputWithContext(ctx context.Context) TenantImageOutput
}

func (*TenantImage) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantImage)(nil)).Elem()
}

func (i *TenantImage) ToTenantImageOutput() TenantImageOutput {
	return i.ToTenantImageOutputWithContext(context.Background())
}

func (i *TenantImage) ToTenantImageOutputWithContext(ctx context.Context) TenantImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantImageOutput)
}

// TenantImageArrayInput is an input type that accepts TenantImageArray and TenantImageArrayOutput values.
// You can construct a concrete instance of `TenantImageArrayInput` via:
//
//	TenantImageArray{ TenantImageArgs{...} }
type TenantImageArrayInput interface {
	pulumi.Input

	ToTenantImageArrayOutput() TenantImageArrayOutput
	ToTenantImageArrayOutputWithContext(context.Context) TenantImageArrayOutput
}

type TenantImageArray []TenantImageInput

func (TenantImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantImage)(nil)).Elem()
}

func (i TenantImageArray) ToTenantImageArrayOutput() TenantImageArrayOutput {
	return i.ToTenantImageArrayOutputWithContext(context.Background())
}

func (i TenantImageArray) ToTenantImageArrayOutputWithContext(ctx context.Context) TenantImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantImageArrayOutput)
}

// TenantImageMapInput is an input type that accepts TenantImageMap and TenantImageMapOutput values.
// You can construct a concrete instance of `TenantImageMapInput` via:
//
//	TenantImageMap{ "key": TenantImageArgs{...} }
type TenantImageMapInput interface {
	pulumi.Input

	ToTenantImageMapOutput() TenantImageMapOutput
	ToTenantImageMapOutputWithContext(context.Context) TenantImageMapOutput
}

type TenantImageMap map[string]TenantImageInput

func (TenantImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantImage)(nil)).Elem()
}

func (i TenantImageMap) ToTenantImageMapOutput() TenantImageMapOutput {
	return i.ToTenantImageMapOutputWithContext(context.Background())
}

func (i TenantImageMap) ToTenantImageMapOutputWithContext(ctx context.Context) TenantImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantImageMapOutput)
}

type TenantImageOutput struct{ *pulumi.OutputState }

func (TenantImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantImage)(nil)).Elem()
}

func (o TenantImageOutput) ToTenantImageOutput() TenantImageOutput {
	return o
}

func (o TenantImageOutput) ToTenantImageOutputWithContext(ctx context.Context) TenantImageOutput {
	return o
}

// Name of the tenant image.
func (o TenantImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// The path on the F5OS where the the tenant image is to be imported to.
func (o TenantImageOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.StringPtrOutput { return v.LocalPath }).(pulumi.StringPtrOutput)
}

// Protocol for image transfer.
func (o TenantImageOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The hostname or IP address of the remote server on which the tenant image is stored.
// The server must make the image accessible via the specified protocol.
func (o TenantImageOutput) RemoteHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.StringPtrOutput { return v.RemoteHost }).(pulumi.StringPtrOutput)
}

// Password for the user on the remote server on which the tenant image is stored.
func (o TenantImageOutput) RemotePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.StringPtrOutput { return v.RemotePassword }).(pulumi.StringPtrOutput)
}

// The path to the tenant image on the remote server.
func (o TenantImageOutput) RemotePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.StringPtrOutput { return v.RemotePath }).(pulumi.StringPtrOutput)
}

// The port on the remote host to which you want to connect.
// If the port is not provided, a default port for the selected protocol is used.
func (o TenantImageOutput) RemotePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.IntPtrOutput { return v.RemotePort }).(pulumi.IntPtrOutput)
}

// User name for the remote server on which the tenant image is stored.
func (o TenantImageOutput) RemoteUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.StringPtrOutput { return v.RemoteUser }).(pulumi.StringPtrOutput)
}

// Status of Imported Image
func (o TenantImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The number of seconds to wait for image import to finish.
func (o TenantImageOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// The path to image on the local machine which is to be uploaded
func (o TenantImageOutput) UploadFromPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantImage) pulumi.StringPtrOutput { return v.UploadFromPath }).(pulumi.StringPtrOutput)
}

type TenantImageArrayOutput struct{ *pulumi.OutputState }

func (TenantImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantImage)(nil)).Elem()
}

func (o TenantImageArrayOutput) ToTenantImageArrayOutput() TenantImageArrayOutput {
	return o
}

func (o TenantImageArrayOutput) ToTenantImageArrayOutputWithContext(ctx context.Context) TenantImageArrayOutput {
	return o
}

func (o TenantImageArrayOutput) Index(i pulumi.IntInput) TenantImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TenantImage {
		return vs[0].([]*TenantImage)[vs[1].(int)]
	}).(TenantImageOutput)
}

type TenantImageMapOutput struct{ *pulumi.OutputState }

func (TenantImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantImage)(nil)).Elem()
}

func (o TenantImageMapOutput) ToTenantImageMapOutput() TenantImageMapOutput {
	return o
}

func (o TenantImageMapOutput) ToTenantImageMapOutputWithContext(ctx context.Context) TenantImageMapOutput {
	return o
}

func (o TenantImageMapOutput) MapIndex(k pulumi.StringInput) TenantImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TenantImage {
		return vs[0].(map[string]*TenantImage)[vs[1].(string)]
	}).(TenantImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantImageInput)(nil)).Elem(), &TenantImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantImageArrayInput)(nil)).Elem(), TenantImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantImageMapInput)(nil)).Elem(), TenantImageMap{})
	pulumi.RegisterOutputType(TenantImageOutput{})
	pulumi.RegisterOutputType(TenantImageArrayOutput{})
	pulumi.RegisterOutputType(TenantImageMapOutput{})
}
