// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the f5os package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
	// required permission as per
	// [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:f5os", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// `disableTlsVerify` controls whether a client verifies the server's certificate chain and host name. default it is set to
	// `true`. If `disableTlsVerify` is true, crypto/tls accepts any certificate presented by the server and any host name in
	// that certificate. In this mode, TLS is susceptible to machine-in-the-middle attacks unless custom verification is used.
	// can be provided by `DISABLE_TLS_VERIFY` environment variable. > **NOTE** If it is set to `false`, certificate/ca
	// certificates should be added to `trusted store` of host where we are running this provider.
	DisableTlsVerify *bool `pulumi:"disableTlsVerify"`
	// URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
	Host *string `pulumi:"host"`
	// Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
	Password *string `pulumi:"password"`
	// Port Number to be used to make API calls to HOST
	Port *int `pulumi:"port"`
	// If this flag set to true,sending telemetry data to TEEM will be disabled,can be provided via `TEEM_DISABLE` environment
	// variable.
	TeemDisable *bool `pulumi:"teemDisable"`
	// Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
	// required permission as per
	// [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// `disableTlsVerify` controls whether a client verifies the server's certificate chain and host name. default it is set to
	// `true`. If `disableTlsVerify` is true, crypto/tls accepts any certificate presented by the server and any host name in
	// that certificate. In this mode, TLS is susceptible to machine-in-the-middle attacks unless custom verification is used.
	// can be provided by `DISABLE_TLS_VERIFY` environment variable. > **NOTE** If it is set to `false`, certificate/ca
	// certificates should be added to `trusted store` of host where we are running this provider.
	DisableTlsVerify pulumi.BoolPtrInput
	// URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
	Host pulumi.StringPtrInput
	// Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
	Password pulumi.StringPtrInput
	// Port Number to be used to make API calls to HOST
	Port pulumi.IntPtrInput
	// If this flag set to true,sending telemetry data to TEEM will be disabled,can be provided via `TEEM_DISABLE` environment
	// variable.
	TeemDisable pulumi.BoolPtrInput
	// Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
	// required permission as per
	// [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
	Username pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:f5os/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
func (o ProviderOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Host }).(pulumi.StringPtrOutput)
}

// Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
// required permission as per
// [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
func (o ProviderOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
