// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource used to manage tls cert and key on F5OS partitions
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := f5os.NewTlsCertKey(ctx, "testcert", &f5os.TlsCertKeyArgs{
//				Name:                 pulumi.String("testcert"),
//				DaysValid:            pulumi.Int(40),
//				Email:                pulumi.String("user@org.com"),
//				City:                 pulumi.String("Hyd"),
//				Province:             pulumi.String("Telangana"),
//				Country:              pulumi.String("IN"),
//				Organization:         pulumi.String("F7"),
//				Unit:                 pulumi.String("IT"),
//				KeyType:              pulumi.String("encrypted-rsa"),
//				KeySize:              pulumi.Int(2048),
//				KeyPassphrase:        pulumi.String("test123"),
//				ConfirmKeyPassphrase: pulumi.String("test123"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TlsCertKey struct {
	pulumi.CustomResourceState

	// The residing cty of the certificate holder.
	City pulumi.StringPtrOutput `pulumi:"city"`
	// This specifies the confirmation of the passphrase for the key, the value should be the same as the `keyPassphrase`. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	ConfirmKeyPassphrase pulumi.StringPtrOutput `pulumi:"confirmKeyPassphrase"`
	// The residing country of the certificate holder.
	Country pulumi.StringPtrOutput `pulumi:"country"`
	// The number of days for which the certificate is valid, the default value is 30 days
	DaysValid pulumi.IntOutput `pulumi:"daysValid"`
	// The email address of the certificate holder.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `keyType` is set to `ecdsa` or `encrypted-ecdsa`
	KeyCurve pulumi.StringPtrOutput `pulumi:"keyCurve"`
	// This specifies the passphrase for the key. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	KeyPassphrase pulumi.StringPtrOutput `pulumi:"keyPassphrase"`
	// This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `keyType` is set to `rsa` or `encrypted-rsa`
	KeySize pulumi.IntPtrOutput `pulumi:"keySize"`
	// The type of the tls key
	KeyType pulumi.StringPtrOutput `pulumi:"keyType"`
	// Name of the tls certificate.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization of the certificate holder
	Organization pulumi.StringPtrOutput `pulumi:"organization"`
	// The residing province of the certificate holder.
	Province pulumi.StringPtrOutput `pulumi:"province"`
	// The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
	SubjectAlternativeName pulumi.StringPtrOutput `pulumi:"subjectAlternativeName"`
	// The organizational unit of the certificate holder.
	Unit pulumi.StringPtrOutput `pulumi:"unit"`
	// The version of the certificate
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewTlsCertKey registers a new resource with the given unique name, arguments, and options.
func NewTlsCertKey(ctx *pulumi.Context,
	name string, args *TlsCertKeyArgs, opts ...pulumi.ResourceOption) (*TlsCertKey, error) {
	if args == nil {
		args = &TlsCertKeyArgs{}
	}

	if args.ConfirmKeyPassphrase != nil {
		args.ConfirmKeyPassphrase = pulumi.ToSecret(args.ConfirmKeyPassphrase).(pulumi.StringPtrInput)
	}
	if args.KeyPassphrase != nil {
		args.KeyPassphrase = pulumi.ToSecret(args.KeyPassphrase).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"confirmKeyPassphrase",
		"keyPassphrase",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TlsCertKey
	err := ctx.RegisterResource("f5os:index/tlsCertKey:TlsCertKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsCertKey gets an existing TlsCertKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsCertKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsCertKeyState, opts ...pulumi.ResourceOption) (*TlsCertKey, error) {
	var resource TlsCertKey
	err := ctx.ReadResource("f5os:index/tlsCertKey:TlsCertKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsCertKey resources.
type tlsCertKeyState struct {
	// The residing cty of the certificate holder.
	City *string `pulumi:"city"`
	// This specifies the confirmation of the passphrase for the key, the value should be the same as the `keyPassphrase`. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	ConfirmKeyPassphrase *string `pulumi:"confirmKeyPassphrase"`
	// The residing country of the certificate holder.
	Country *string `pulumi:"country"`
	// The number of days for which the certificate is valid, the default value is 30 days
	DaysValid *int `pulumi:"daysValid"`
	// The email address of the certificate holder.
	Email *string `pulumi:"email"`
	// This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `keyType` is set to `ecdsa` or `encrypted-ecdsa`
	KeyCurve *string `pulumi:"keyCurve"`
	// This specifies the passphrase for the key. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	KeyPassphrase *string `pulumi:"keyPassphrase"`
	// This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `keyType` is set to `rsa` or `encrypted-rsa`
	KeySize *int `pulumi:"keySize"`
	// The type of the tls key
	KeyType *string `pulumi:"keyType"`
	// Name of the tls certificate.
	Name *string `pulumi:"name"`
	// The organization of the certificate holder
	Organization *string `pulumi:"organization"`
	// The residing province of the certificate holder.
	Province *string `pulumi:"province"`
	// The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
	SubjectAlternativeName *string `pulumi:"subjectAlternativeName"`
	// The organizational unit of the certificate holder.
	Unit *string `pulumi:"unit"`
	// The version of the certificate
	Version *int `pulumi:"version"`
}

type TlsCertKeyState struct {
	// The residing cty of the certificate holder.
	City pulumi.StringPtrInput
	// This specifies the confirmation of the passphrase for the key, the value should be the same as the `keyPassphrase`. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	ConfirmKeyPassphrase pulumi.StringPtrInput
	// The residing country of the certificate holder.
	Country pulumi.StringPtrInput
	// The number of days for which the certificate is valid, the default value is 30 days
	DaysValid pulumi.IntPtrInput
	// The email address of the certificate holder.
	Email pulumi.StringPtrInput
	// This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `keyType` is set to `ecdsa` or `encrypted-ecdsa`
	KeyCurve pulumi.StringPtrInput
	// This specifies the passphrase for the key. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	KeyPassphrase pulumi.StringPtrInput
	// This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `keyType` is set to `rsa` or `encrypted-rsa`
	KeySize pulumi.IntPtrInput
	// The type of the tls key
	KeyType pulumi.StringPtrInput
	// Name of the tls certificate.
	Name pulumi.StringPtrInput
	// The organization of the certificate holder
	Organization pulumi.StringPtrInput
	// The residing province of the certificate holder.
	Province pulumi.StringPtrInput
	// The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
	SubjectAlternativeName pulumi.StringPtrInput
	// The organizational unit of the certificate holder.
	Unit pulumi.StringPtrInput
	// The version of the certificate
	Version pulumi.IntPtrInput
}

func (TlsCertKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsCertKeyState)(nil)).Elem()
}

type tlsCertKeyArgs struct {
	// The residing cty of the certificate holder.
	City *string `pulumi:"city"`
	// This specifies the confirmation of the passphrase for the key, the value should be the same as the `keyPassphrase`. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	ConfirmKeyPassphrase *string `pulumi:"confirmKeyPassphrase"`
	// The residing country of the certificate holder.
	Country *string `pulumi:"country"`
	// The number of days for which the certificate is valid, the default value is 30 days
	DaysValid *int `pulumi:"daysValid"`
	// The email address of the certificate holder.
	Email *string `pulumi:"email"`
	// This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `keyType` is set to `ecdsa` or `encrypted-ecdsa`
	KeyCurve *string `pulumi:"keyCurve"`
	// This specifies the passphrase for the key. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	KeyPassphrase *string `pulumi:"keyPassphrase"`
	// This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `keyType` is set to `rsa` or `encrypted-rsa`
	KeySize *int `pulumi:"keySize"`
	// The type of the tls key
	KeyType *string `pulumi:"keyType"`
	// Name of the tls certificate.
	Name *string `pulumi:"name"`
	// The organization of the certificate holder
	Organization *string `pulumi:"organization"`
	// The residing province of the certificate holder.
	Province *string `pulumi:"province"`
	// The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
	SubjectAlternativeName *string `pulumi:"subjectAlternativeName"`
	// The organizational unit of the certificate holder.
	Unit *string `pulumi:"unit"`
	// The version of the certificate
	Version *int `pulumi:"version"`
}

// The set of arguments for constructing a TlsCertKey resource.
type TlsCertKeyArgs struct {
	// The residing cty of the certificate holder.
	City pulumi.StringPtrInput
	// This specifies the confirmation of the passphrase for the key, the value should be the same as the `keyPassphrase`. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	ConfirmKeyPassphrase pulumi.StringPtrInput
	// The residing country of the certificate holder.
	Country pulumi.StringPtrInput
	// The number of days for which the certificate is valid, the default value is 30 days
	DaysValid pulumi.IntPtrInput
	// The email address of the certificate holder.
	Email pulumi.StringPtrInput
	// This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `keyType` is set to `ecdsa` or `encrypted-ecdsa`
	KeyCurve pulumi.StringPtrInput
	// This specifies the passphrase for the key. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
	KeyPassphrase pulumi.StringPtrInput
	// This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `keyType` is set to `rsa` or `encrypted-rsa`
	KeySize pulumi.IntPtrInput
	// The type of the tls key
	KeyType pulumi.StringPtrInput
	// Name of the tls certificate.
	Name pulumi.StringPtrInput
	// The organization of the certificate holder
	Organization pulumi.StringPtrInput
	// The residing province of the certificate holder.
	Province pulumi.StringPtrInput
	// The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
	SubjectAlternativeName pulumi.StringPtrInput
	// The organizational unit of the certificate holder.
	Unit pulumi.StringPtrInput
	// The version of the certificate
	Version pulumi.IntPtrInput
}

func (TlsCertKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsCertKeyArgs)(nil)).Elem()
}

type TlsCertKeyInput interface {
	pulumi.Input

	ToTlsCertKeyOutput() TlsCertKeyOutput
	ToTlsCertKeyOutputWithContext(ctx context.Context) TlsCertKeyOutput
}

func (*TlsCertKey) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertKey)(nil)).Elem()
}

func (i *TlsCertKey) ToTlsCertKeyOutput() TlsCertKeyOutput {
	return i.ToTlsCertKeyOutputWithContext(context.Background())
}

func (i *TlsCertKey) ToTlsCertKeyOutputWithContext(ctx context.Context) TlsCertKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertKeyOutput)
}

// TlsCertKeyArrayInput is an input type that accepts TlsCertKeyArray and TlsCertKeyArrayOutput values.
// You can construct a concrete instance of `TlsCertKeyArrayInput` via:
//
//	TlsCertKeyArray{ TlsCertKeyArgs{...} }
type TlsCertKeyArrayInput interface {
	pulumi.Input

	ToTlsCertKeyArrayOutput() TlsCertKeyArrayOutput
	ToTlsCertKeyArrayOutputWithContext(context.Context) TlsCertKeyArrayOutput
}

type TlsCertKeyArray []TlsCertKeyInput

func (TlsCertKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsCertKey)(nil)).Elem()
}

func (i TlsCertKeyArray) ToTlsCertKeyArrayOutput() TlsCertKeyArrayOutput {
	return i.ToTlsCertKeyArrayOutputWithContext(context.Background())
}

func (i TlsCertKeyArray) ToTlsCertKeyArrayOutputWithContext(ctx context.Context) TlsCertKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertKeyArrayOutput)
}

// TlsCertKeyMapInput is an input type that accepts TlsCertKeyMap and TlsCertKeyMapOutput values.
// You can construct a concrete instance of `TlsCertKeyMapInput` via:
//
//	TlsCertKeyMap{ "key": TlsCertKeyArgs{...} }
type TlsCertKeyMapInput interface {
	pulumi.Input

	ToTlsCertKeyMapOutput() TlsCertKeyMapOutput
	ToTlsCertKeyMapOutputWithContext(context.Context) TlsCertKeyMapOutput
}

type TlsCertKeyMap map[string]TlsCertKeyInput

func (TlsCertKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsCertKey)(nil)).Elem()
}

func (i TlsCertKeyMap) ToTlsCertKeyMapOutput() TlsCertKeyMapOutput {
	return i.ToTlsCertKeyMapOutputWithContext(context.Background())
}

func (i TlsCertKeyMap) ToTlsCertKeyMapOutputWithContext(ctx context.Context) TlsCertKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertKeyMapOutput)
}

type TlsCertKeyOutput struct{ *pulumi.OutputState }

func (TlsCertKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertKey)(nil)).Elem()
}

func (o TlsCertKeyOutput) ToTlsCertKeyOutput() TlsCertKeyOutput {
	return o
}

func (o TlsCertKeyOutput) ToTlsCertKeyOutputWithContext(ctx context.Context) TlsCertKeyOutput {
	return o
}

// The residing cty of the certificate holder.
func (o TlsCertKeyOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.City }).(pulumi.StringPtrOutput)
}

// This specifies the confirmation of the passphrase for the key, the value should be the same as the `keyPassphrase`. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
func (o TlsCertKeyOutput) ConfirmKeyPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.ConfirmKeyPassphrase }).(pulumi.StringPtrOutput)
}

// The residing country of the certificate holder.
func (o TlsCertKeyOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

// The number of days for which the certificate is valid, the default value is 30 days
func (o TlsCertKeyOutput) DaysValid() pulumi.IntOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.IntOutput { return v.DaysValid }).(pulumi.IntOutput)
}

// The email address of the certificate holder.
func (o TlsCertKeyOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `keyType` is set to `ecdsa` or `encrypted-ecdsa`
func (o TlsCertKeyOutput) KeyCurve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.KeyCurve }).(pulumi.StringPtrOutput)
}

// This specifies the passphrase for the key. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
func (o TlsCertKeyOutput) KeyPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.KeyPassphrase }).(pulumi.StringPtrOutput)
}

// This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `keyType` is set to `rsa` or `encrypted-rsa`
func (o TlsCertKeyOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.IntPtrOutput { return v.KeySize }).(pulumi.IntPtrOutput)
}

// The type of the tls key
func (o TlsCertKeyOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.KeyType }).(pulumi.StringPtrOutput)
}

// Name of the tls certificate.
func (o TlsCertKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization of the certificate holder
func (o TlsCertKeyOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.Organization }).(pulumi.StringPtrOutput)
}

// The residing province of the certificate holder.
func (o TlsCertKeyOutput) Province() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.Province }).(pulumi.StringPtrOutput)
}

// The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
func (o TlsCertKeyOutput) SubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.SubjectAlternativeName }).(pulumi.StringPtrOutput)
}

// The organizational unit of the certificate holder.
func (o TlsCertKeyOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.StringPtrOutput { return v.Unit }).(pulumi.StringPtrOutput)
}

// The version of the certificate
func (o TlsCertKeyOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *TlsCertKey) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type TlsCertKeyArrayOutput struct{ *pulumi.OutputState }

func (TlsCertKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsCertKey)(nil)).Elem()
}

func (o TlsCertKeyArrayOutput) ToTlsCertKeyArrayOutput() TlsCertKeyArrayOutput {
	return o
}

func (o TlsCertKeyArrayOutput) ToTlsCertKeyArrayOutputWithContext(ctx context.Context) TlsCertKeyArrayOutput {
	return o
}

func (o TlsCertKeyArrayOutput) Index(i pulumi.IntInput) TlsCertKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TlsCertKey {
		return vs[0].([]*TlsCertKey)[vs[1].(int)]
	}).(TlsCertKeyOutput)
}

type TlsCertKeyMapOutput struct{ *pulumi.OutputState }

func (TlsCertKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsCertKey)(nil)).Elem()
}

func (o TlsCertKeyMapOutput) ToTlsCertKeyMapOutput() TlsCertKeyMapOutput {
	return o
}

func (o TlsCertKeyMapOutput) ToTlsCertKeyMapOutputWithContext(ctx context.Context) TlsCertKeyMapOutput {
	return o
}

func (o TlsCertKeyMapOutput) MapIndex(k pulumi.StringInput) TlsCertKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TlsCertKey {
		return vs[0].(map[string]*TlsCertKey)[vs[1].(string)]
	}).(TlsCertKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertKeyInput)(nil)).Elem(), &TlsCertKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertKeyArrayInput)(nil)).Elem(), TlsCertKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertKeyMapInput)(nil)).Elem(), TlsCertKeyMap{})
	pulumi.RegisterOutputType(TlsCertKeyOutput{})
	pulumi.RegisterOutputType(TlsCertKeyArrayOutput{})
	pulumi.RegisterOutputType(TlsCertKeyMapOutput{})
}
