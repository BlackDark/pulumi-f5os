// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"errors"
	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource used for Manage F5OS tenant on chassis partition/rSeries Appliance
//
// > **NOTE** `Tenant` resource is used with chassis partition/rSeries appliance, More info on [Tenant](https://techdocs.f5.com/en-us/velos-1-5-0/velos-systems-administration-configuration/title-tenant-management.html#title-tenant-management).
// Provider `f5os` credentials will be chassis partition/rSeries appliance `host`,`username` and `password`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Manage F5OS Tenant
//			_, err := f5os.NewTenant(ctx, "test3", &f5os.TenantArgs{
//				Name:        pulumi.String("testtenant-ecosys3"),
//				ImageName:   pulumi.String("BIGIP-17.1.0-0.0.16.ALL-F5OS.qcow2.zip.bundle"),
//				MgmtIp:      pulumi.String("10.100.100.26"),
//				MgmtGateway: pulumi.String("10.100.100.1"),
//				MgmtPrefix:  pulumi.Int(24),
//				Type:        pulumi.String("BIG-IP"),
//				CpuCores:    pulumi.Int(8),
//				Nodes: pulumi.IntArray{
//					pulumi.Int(1),
//				},
//				Vlans: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//				},
//				RunningState:    pulumi.String("deployed"),
//				VirtualDiskSize: pulumi.Int(82),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Tenant can be imported by specifying the tenant Name identifier.
//
// ```sh
// $ pulumi import f5os:index/tenant:Tenant tenant-import testtenant
// ```
type Tenant struct {
	pulumi.CustomResourceState

	// The number of vCPUs that should be added to the tenant.
	// Required for create operations.
	CpuCores pulumi.IntOutput `pulumi:"cpuCores"`
	// Whether crypto and compression hardware offload should be enabled on the tenant.
	// We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
	Cryptos pulumi.StringOutput `pulumi:"cryptos"`
	// Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
	DagIpv6PrefixLength pulumi.IntOutput `pulumi:"dagIpv6PrefixLength"`
	// Deployment file used for BIG-IP-Next .
	// Required for if `type` is `BIG-IP-Next`.
	DeploymentFile pulumi.StringPtrOutput `pulumi:"deploymentFile"`
	// Name of the tenant image to be used.
	// Required for create operations
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
	// Default value is `one`.
	MacBlockSize pulumi.StringOutput `pulumi:"macBlockSize"`
	// The amount of memory that should be provided to the tenant in MB.
	// More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
	Memory pulumi.IntPtrOutput `pulumi:"memory"`
	// Tenant management gateway.
	MgmtGateway pulumi.StringOutput `pulumi:"mgmtGateway"`
	// IP address used to connect to the deployed tenant.
	// Required for create operations.
	MgmtIp pulumi.StringOutput `pulumi:"mgmtIp"`
	// Tenant management CIDR prefix.
	MgmtPrefix pulumi.IntOutput `pulumi:"mgmtPrefix"`
	// Name of the tenant.
	// The first character must be a letter.
	// Only lowercase alphanumeric characters are allowed.
	// No special or extended characters are allowed except for hyphens.
	// The name cannot exceed 50 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of integers. Specifies on which blades nodes the tenants are deployed.
	// Required for create operations.
	// For single blade platforms like rSeries only the value of 1 should be provided.
	Nodes pulumi.IntArrayOutput `pulumi:"nodes"`
	// Desired runningState of the tenant.
	RunningState pulumi.StringOutput `pulumi:"runningState"`
	// Tenant status
	Status pulumi.StringOutput `pulumi:"status"`
	// The number of seconds to wait for image import to finish.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Name of the tenant image to be used.
	// Required for create operations
	Type pulumi.StringOutput `pulumi:"type"`
	// Minimum virtual disk size required for Tenant deployment
	VirtualDiskSize pulumi.IntOutput `pulumi:"virtualDiskSize"`
	// The existing VLAN IDs in the chassis partition that should be added to the tenant.
	// The order of these VLANs is ignored.
	// This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
	// Required for create operations
	Vlans pulumi.IntArrayOutput `pulumi:"vlans"`
}

// NewTenant registers a new resource with the given unique name, arguments, and options.
func NewTenant(ctx *pulumi.Context,
	name string, args *TenantArgs, opts ...pulumi.ResourceOption) (*Tenant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CpuCores == nil {
		return nil, errors.New("invalid value for required argument 'CpuCores'")
	}
	if args.ImageName == nil {
		return nil, errors.New("invalid value for required argument 'ImageName'")
	}
	if args.MgmtGateway == nil {
		return nil, errors.New("invalid value for required argument 'MgmtGateway'")
	}
	if args.MgmtIp == nil {
		return nil, errors.New("invalid value for required argument 'MgmtIp'")
	}
	if args.MgmtPrefix == nil {
		return nil, errors.New("invalid value for required argument 'MgmtPrefix'")
	}
	if args.VirtualDiskSize == nil {
		return nil, errors.New("invalid value for required argument 'VirtualDiskSize'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tenant
	err := ctx.RegisterResource("f5os:index/tenant:Tenant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenant gets an existing Tenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantState, opts ...pulumi.ResourceOption) (*Tenant, error) {
	var resource Tenant
	err := ctx.ReadResource("f5os:index/tenant:Tenant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tenant resources.
type tenantState struct {
	// The number of vCPUs that should be added to the tenant.
	// Required for create operations.
	CpuCores *int `pulumi:"cpuCores"`
	// Whether crypto and compression hardware offload should be enabled on the tenant.
	// We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
	Cryptos *string `pulumi:"cryptos"`
	// Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
	DagIpv6PrefixLength *int `pulumi:"dagIpv6PrefixLength"`
	// Deployment file used for BIG-IP-Next .
	// Required for if `type` is `BIG-IP-Next`.
	DeploymentFile *string `pulumi:"deploymentFile"`
	// Name of the tenant image to be used.
	// Required for create operations
	ImageName *string `pulumi:"imageName"`
	// Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
	// Default value is `one`.
	MacBlockSize *string `pulumi:"macBlockSize"`
	// The amount of memory that should be provided to the tenant in MB.
	// More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
	Memory *int `pulumi:"memory"`
	// Tenant management gateway.
	MgmtGateway *string `pulumi:"mgmtGateway"`
	// IP address used to connect to the deployed tenant.
	// Required for create operations.
	MgmtIp *string `pulumi:"mgmtIp"`
	// Tenant management CIDR prefix.
	MgmtPrefix *int `pulumi:"mgmtPrefix"`
	// Name of the tenant.
	// The first character must be a letter.
	// Only lowercase alphanumeric characters are allowed.
	// No special or extended characters are allowed except for hyphens.
	// The name cannot exceed 50 characters.
	Name *string `pulumi:"name"`
	// List of integers. Specifies on which blades nodes the tenants are deployed.
	// Required for create operations.
	// For single blade platforms like rSeries only the value of 1 should be provided.
	Nodes []int `pulumi:"nodes"`
	// Desired runningState of the tenant.
	RunningState *string `pulumi:"runningState"`
	// Tenant status
	Status *string `pulumi:"status"`
	// The number of seconds to wait for image import to finish.
	Timeout *int `pulumi:"timeout"`
	// Name of the tenant image to be used.
	// Required for create operations
	Type *string `pulumi:"type"`
	// Minimum virtual disk size required for Tenant deployment
	VirtualDiskSize *int `pulumi:"virtualDiskSize"`
	// The existing VLAN IDs in the chassis partition that should be added to the tenant.
	// The order of these VLANs is ignored.
	// This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
	// Required for create operations
	Vlans []int `pulumi:"vlans"`
}

type TenantState struct {
	// The number of vCPUs that should be added to the tenant.
	// Required for create operations.
	CpuCores pulumi.IntPtrInput
	// Whether crypto and compression hardware offload should be enabled on the tenant.
	// We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
	Cryptos pulumi.StringPtrInput
	// Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
	DagIpv6PrefixLength pulumi.IntPtrInput
	// Deployment file used for BIG-IP-Next .
	// Required for if `type` is `BIG-IP-Next`.
	DeploymentFile pulumi.StringPtrInput
	// Name of the tenant image to be used.
	// Required for create operations
	ImageName pulumi.StringPtrInput
	// Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
	// Default value is `one`.
	MacBlockSize pulumi.StringPtrInput
	// The amount of memory that should be provided to the tenant in MB.
	// More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
	Memory pulumi.IntPtrInput
	// Tenant management gateway.
	MgmtGateway pulumi.StringPtrInput
	// IP address used to connect to the deployed tenant.
	// Required for create operations.
	MgmtIp pulumi.StringPtrInput
	// Tenant management CIDR prefix.
	MgmtPrefix pulumi.IntPtrInput
	// Name of the tenant.
	// The first character must be a letter.
	// Only lowercase alphanumeric characters are allowed.
	// No special or extended characters are allowed except for hyphens.
	// The name cannot exceed 50 characters.
	Name pulumi.StringPtrInput
	// List of integers. Specifies on which blades nodes the tenants are deployed.
	// Required for create operations.
	// For single blade platforms like rSeries only the value of 1 should be provided.
	Nodes pulumi.IntArrayInput
	// Desired runningState of the tenant.
	RunningState pulumi.StringPtrInput
	// Tenant status
	Status pulumi.StringPtrInput
	// The number of seconds to wait for image import to finish.
	Timeout pulumi.IntPtrInput
	// Name of the tenant image to be used.
	// Required for create operations
	Type pulumi.StringPtrInput
	// Minimum virtual disk size required for Tenant deployment
	VirtualDiskSize pulumi.IntPtrInput
	// The existing VLAN IDs in the chassis partition that should be added to the tenant.
	// The order of these VLANs is ignored.
	// This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
	// Required for create operations
	Vlans pulumi.IntArrayInput
}

func (TenantState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantState)(nil)).Elem()
}

type tenantArgs struct {
	// The number of vCPUs that should be added to the tenant.
	// Required for create operations.
	CpuCores int `pulumi:"cpuCores"`
	// Whether crypto and compression hardware offload should be enabled on the tenant.
	// We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
	Cryptos *string `pulumi:"cryptos"`
	// Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
	DagIpv6PrefixLength *int `pulumi:"dagIpv6PrefixLength"`
	// Deployment file used for BIG-IP-Next .
	// Required for if `type` is `BIG-IP-Next`.
	DeploymentFile *string `pulumi:"deploymentFile"`
	// Name of the tenant image to be used.
	// Required for create operations
	ImageName string `pulumi:"imageName"`
	// Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
	// Default value is `one`.
	MacBlockSize *string `pulumi:"macBlockSize"`
	// The amount of memory that should be provided to the tenant in MB.
	// More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
	Memory *int `pulumi:"memory"`
	// Tenant management gateway.
	MgmtGateway string `pulumi:"mgmtGateway"`
	// IP address used to connect to the deployed tenant.
	// Required for create operations.
	MgmtIp string `pulumi:"mgmtIp"`
	// Tenant management CIDR prefix.
	MgmtPrefix int `pulumi:"mgmtPrefix"`
	// Name of the tenant.
	// The first character must be a letter.
	// Only lowercase alphanumeric characters are allowed.
	// No special or extended characters are allowed except for hyphens.
	// The name cannot exceed 50 characters.
	Name *string `pulumi:"name"`
	// List of integers. Specifies on which blades nodes the tenants are deployed.
	// Required for create operations.
	// For single blade platforms like rSeries only the value of 1 should be provided.
	Nodes []int `pulumi:"nodes"`
	// Desired runningState of the tenant.
	RunningState *string `pulumi:"runningState"`
	// The number of seconds to wait for image import to finish.
	Timeout *int `pulumi:"timeout"`
	// Name of the tenant image to be used.
	// Required for create operations
	Type *string `pulumi:"type"`
	// Minimum virtual disk size required for Tenant deployment
	VirtualDiskSize int `pulumi:"virtualDiskSize"`
	// The existing VLAN IDs in the chassis partition that should be added to the tenant.
	// The order of these VLANs is ignored.
	// This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
	// Required for create operations
	Vlans []int `pulumi:"vlans"`
}

// The set of arguments for constructing a Tenant resource.
type TenantArgs struct {
	// The number of vCPUs that should be added to the tenant.
	// Required for create operations.
	CpuCores pulumi.IntInput
	// Whether crypto and compression hardware offload should be enabled on the tenant.
	// We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
	Cryptos pulumi.StringPtrInput
	// Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
	DagIpv6PrefixLength pulumi.IntPtrInput
	// Deployment file used for BIG-IP-Next .
	// Required for if `type` is `BIG-IP-Next`.
	DeploymentFile pulumi.StringPtrInput
	// Name of the tenant image to be used.
	// Required for create operations
	ImageName pulumi.StringInput
	// Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
	// Default value is `one`.
	MacBlockSize pulumi.StringPtrInput
	// The amount of memory that should be provided to the tenant in MB.
	// More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
	Memory pulumi.IntPtrInput
	// Tenant management gateway.
	MgmtGateway pulumi.StringInput
	// IP address used to connect to the deployed tenant.
	// Required for create operations.
	MgmtIp pulumi.StringInput
	// Tenant management CIDR prefix.
	MgmtPrefix pulumi.IntInput
	// Name of the tenant.
	// The first character must be a letter.
	// Only lowercase alphanumeric characters are allowed.
	// No special or extended characters are allowed except for hyphens.
	// The name cannot exceed 50 characters.
	Name pulumi.StringPtrInput
	// List of integers. Specifies on which blades nodes the tenants are deployed.
	// Required for create operations.
	// For single blade platforms like rSeries only the value of 1 should be provided.
	Nodes pulumi.IntArrayInput
	// Desired runningState of the tenant.
	RunningState pulumi.StringPtrInput
	// The number of seconds to wait for image import to finish.
	Timeout pulumi.IntPtrInput
	// Name of the tenant image to be used.
	// Required for create operations
	Type pulumi.StringPtrInput
	// Minimum virtual disk size required for Tenant deployment
	VirtualDiskSize pulumi.IntInput
	// The existing VLAN IDs in the chassis partition that should be added to the tenant.
	// The order of these VLANs is ignored.
	// This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
	// Required for create operations
	Vlans pulumi.IntArrayInput
}

func (TenantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantArgs)(nil)).Elem()
}

type TenantInput interface {
	pulumi.Input

	ToTenantOutput() TenantOutput
	ToTenantOutputWithContext(ctx context.Context) TenantOutput
}

func (*Tenant) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (i *Tenant) ToTenantOutput() TenantOutput {
	return i.ToTenantOutputWithContext(context.Background())
}

func (i *Tenant) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantOutput)
}

// TenantArrayInput is an input type that accepts TenantArray and TenantArrayOutput values.
// You can construct a concrete instance of `TenantArrayInput` via:
//
//	TenantArray{ TenantArgs{...} }
type TenantArrayInput interface {
	pulumi.Input

	ToTenantArrayOutput() TenantArrayOutput
	ToTenantArrayOutputWithContext(context.Context) TenantArrayOutput
}

type TenantArray []TenantInput

func (TenantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tenant)(nil)).Elem()
}

func (i TenantArray) ToTenantArrayOutput() TenantArrayOutput {
	return i.ToTenantArrayOutputWithContext(context.Background())
}

func (i TenantArray) ToTenantArrayOutputWithContext(ctx context.Context) TenantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantArrayOutput)
}

// TenantMapInput is an input type that accepts TenantMap and TenantMapOutput values.
// You can construct a concrete instance of `TenantMapInput` via:
//
//	TenantMap{ "key": TenantArgs{...} }
type TenantMapInput interface {
	pulumi.Input

	ToTenantMapOutput() TenantMapOutput
	ToTenantMapOutputWithContext(context.Context) TenantMapOutput
}

type TenantMap map[string]TenantInput

func (TenantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tenant)(nil)).Elem()
}

func (i TenantMap) ToTenantMapOutput() TenantMapOutput {
	return i.ToTenantMapOutputWithContext(context.Background())
}

func (i TenantMap) ToTenantMapOutputWithContext(ctx context.Context) TenantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantMapOutput)
}

type TenantOutput struct{ *pulumi.OutputState }

func (TenantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (o TenantOutput) ToTenantOutput() TenantOutput {
	return o
}

func (o TenantOutput) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return o
}

// The number of vCPUs that should be added to the tenant.
// Required for create operations.
func (o TenantOutput) CpuCores() pulumi.IntOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntOutput { return v.CpuCores }).(pulumi.IntOutput)
}

// Whether crypto and compression hardware offload should be enabled on the tenant.
// We recommend it is enabled, otherwise crypto and compression may be processed in CPU.
func (o TenantOutput) Cryptos() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Cryptos }).(pulumi.StringOutput)
}

// Configuring DAG Global IPv6 Prefix Length,value Range from `1` to `128`.Default is `128`.
func (o TenantOutput) DagIpv6PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntOutput { return v.DagIpv6PrefixLength }).(pulumi.IntOutput)
}

// Deployment file used for BIG-IP-Next .
// Required for if `type` is `BIG-IP-Next`.
func (o TenantOutput) DeploymentFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.DeploymentFile }).(pulumi.StringPtrOutput)
}

// Name of the tenant image to be used.
// Required for create operations
func (o TenantOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// Configure a BIG-IP tenant on these systems to use contiguous block of MAC allocation.
// Default value is `one`.
func (o TenantOutput) MacBlockSize() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.MacBlockSize }).(pulumi.StringOutput)
}

// The amount of memory that should be provided to the tenant in MB.
// More information on memory sizing for [Velos](https://clouddocs.f5.com/training/community/velos-training/html/velos_performance_and_sizing.html#memory-sizing)/[rSeries](https://clouddocs.f5.com/training/community/rseries-training/html/rseries_performance_and_sizing.html#memory-sizing)
func (o TenantOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntPtrOutput { return v.Memory }).(pulumi.IntPtrOutput)
}

// Tenant management gateway.
func (o TenantOutput) MgmtGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.MgmtGateway }).(pulumi.StringOutput)
}

// IP address used to connect to the deployed tenant.
// Required for create operations.
func (o TenantOutput) MgmtIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.MgmtIp }).(pulumi.StringOutput)
}

// Tenant management CIDR prefix.
func (o TenantOutput) MgmtPrefix() pulumi.IntOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntOutput { return v.MgmtPrefix }).(pulumi.IntOutput)
}

// Name of the tenant.
// The first character must be a letter.
// Only lowercase alphanumeric characters are allowed.
// No special or extended characters are allowed except for hyphens.
// The name cannot exceed 50 characters.
func (o TenantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of integers. Specifies on which blades nodes the tenants are deployed.
// Required for create operations.
// For single blade platforms like rSeries only the value of 1 should be provided.
func (o TenantOutput) Nodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntArrayOutput { return v.Nodes }).(pulumi.IntArrayOutput)
}

// Desired runningState of the tenant.
func (o TenantOutput) RunningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.RunningState }).(pulumi.StringOutput)
}

// Tenant status
func (o TenantOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The number of seconds to wait for image import to finish.
func (o TenantOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Name of the tenant image to be used.
// Required for create operations
func (o TenantOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Minimum virtual disk size required for Tenant deployment
func (o TenantOutput) VirtualDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntOutput { return v.VirtualDiskSize }).(pulumi.IntOutput)
}

// The existing VLAN IDs in the chassis partition that should be added to the tenant.
// The order of these VLANs is ignored.
// This module orders the VLANs automatically, if you deliberately re-order them in subsequent tasks, this module will not register a change.
// Required for create operations
func (o TenantOutput) Vlans() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntArrayOutput { return v.Vlans }).(pulumi.IntArrayOutput)
}

type TenantArrayOutput struct{ *pulumi.OutputState }

func (TenantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tenant)(nil)).Elem()
}

func (o TenantArrayOutput) ToTenantArrayOutput() TenantArrayOutput {
	return o
}

func (o TenantArrayOutput) ToTenantArrayOutputWithContext(ctx context.Context) TenantArrayOutput {
	return o
}

func (o TenantArrayOutput) Index(i pulumi.IntInput) TenantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tenant {
		return vs[0].([]*Tenant)[vs[1].(int)]
	}).(TenantOutput)
}

type TenantMapOutput struct{ *pulumi.OutputState }

func (TenantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tenant)(nil)).Elem()
}

func (o TenantMapOutput) ToTenantMapOutput() TenantMapOutput {
	return o
}

func (o TenantMapOutput) ToTenantMapOutputWithContext(ctx context.Context) TenantMapOutput {
	return o
}

func (o TenantMapOutput) MapIndex(k pulumi.StringInput) TenantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tenant {
		return vs[0].(map[string]*Tenant)[vs[1].(string)]
	}).(TenantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInput)(nil)).Elem(), &Tenant{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantArrayInput)(nil)).Elem(), TenantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantMapInput)(nil)).Elem(), TenantMap{})
	pulumi.RegisterOutputType(TenantOutput{})
	pulumi.RegisterOutputType(TenantArrayOutput{})
	pulumi.RegisterOutputType(TenantMapOutput{})
}
