// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource used for Manage VELOS chassis partition
//
// > **NOTE** `Partition` resource is used with Velos Chassis controller only, More info on [chassis partition](https://techdocs.f5.com/en-us/velos-1-5-0/velos-systems-administration-configuration/title-partition-mgmt.html#about-partitions).
// Provider `f5os` credentials will be chassis controller `host`,`username` and `password`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Manages F5OS partition
//			_, err := f5os.NewPartition(ctx, "velos-part", &f5os.PartitionArgs{
//				Name:            pulumi.String("TerraformPartition"),
//				OsVersion:       pulumi.String("1.3.1-5968"),
//				Ipv4MgmtAddress: pulumi.String("10.144.140.125/24"),
//				Ipv4MgmtGateway: pulumi.String("10.144.140.253"),
//				Ipv6MgmtAddress: pulumi.String("2001::1/64"),
//				Ipv6MgmtGateway: pulumi.String("2001::"),
//				Slots: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Partition struct {
	pulumi.CustomResourceState

	// select the desired configuration volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 15 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ConfigurationVolumeSize pulumi.IntOutput `pulumi:"configurationVolumeSize"`
	// Enables or disables partition.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// select the desired storage volume for all tenant images in increments of 1 GB.
	// The default value is 15 GB, with a minimum of 5 GB and a maximum of 50 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ImagesVolumeSize pulumi.IntOutput `pulumi:"imagesVolumeSize"`
	// Specifies the IPv4 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 192.168.1.1/24.
	Ipv4MgmtAddress pulumi.StringPtrOutput `pulumi:"ipv4MgmtAddress"`
	// Specifies the IPv4 chassis partition management gateway.
	Ipv4MgmtGateway pulumi.StringPtrOutput `pulumi:"ipv4MgmtGateway"`
	// Specifies the IPv6 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 2002::1234:abcd:ffff:c0a8:101/64.
	// Required for create operations.
	Ipv6MgmtAddress pulumi.StringPtrOutput `pulumi:"ipv6MgmtAddress"`
	// Specifies the IPv6 chassis partition management gateway.
	// Required for create operations.
	Ipv6MgmtGateway pulumi.StringPtrOutput `pulumi:"ipv6MgmtGateway"`
	// Name of the chassis partition.
	// Partition names must consist only of alphanumerics (0-9, a-z, A-Z), must begin with a letter, and are limited to 31 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the partition F5OS-C OS Bundled version.(ISO image version)
	OsVersion pulumi.StringOutput `pulumi:"osVersion"`
	// select the desired user data (tcpdump captures, QKView data, etc.) volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 20 GBAfter volume sizes are configured, their sizes can be increased but not reduced
	SharedVolumeSize pulumi.IntOutput `pulumi:"sharedVolumeSize"`
	// List of integers.
	// Specifies which slots with which the chassis partition should associated.
	Slots pulumi.IntArrayOutput `pulumi:"slots"`
	// The number of seconds to wait for partition to transition to running state.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
}

// NewPartition registers a new resource with the given unique name, arguments, and options.
func NewPartition(ctx *pulumi.Context,
	name string, args *PartitionArgs, opts ...pulumi.ResourceOption) (*Partition, error) {
	if args == nil {
		args = &PartitionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Partition
	err := ctx.RegisterResource("f5os:index/partition:Partition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartition gets an existing Partition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartitionState, opts ...pulumi.ResourceOption) (*Partition, error) {
	var resource Partition
	err := ctx.ReadResource("f5os:index/partition:Partition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Partition resources.
type partitionState struct {
	// select the desired configuration volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 15 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ConfigurationVolumeSize *int `pulumi:"configurationVolumeSize"`
	// Enables or disables partition.
	Enabled *bool `pulumi:"enabled"`
	// select the desired storage volume for all tenant images in increments of 1 GB.
	// The default value is 15 GB, with a minimum of 5 GB and a maximum of 50 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ImagesVolumeSize *int `pulumi:"imagesVolumeSize"`
	// Specifies the IPv4 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 192.168.1.1/24.
	Ipv4MgmtAddress *string `pulumi:"ipv4MgmtAddress"`
	// Specifies the IPv4 chassis partition management gateway.
	Ipv4MgmtGateway *string `pulumi:"ipv4MgmtGateway"`
	// Specifies the IPv6 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 2002::1234:abcd:ffff:c0a8:101/64.
	// Required for create operations.
	Ipv6MgmtAddress *string `pulumi:"ipv6MgmtAddress"`
	// Specifies the IPv6 chassis partition management gateway.
	// Required for create operations.
	Ipv6MgmtGateway *string `pulumi:"ipv6MgmtGateway"`
	// Name of the chassis partition.
	// Partition names must consist only of alphanumerics (0-9, a-z, A-Z), must begin with a letter, and are limited to 31 characters.
	Name *string `pulumi:"name"`
	// Specifies the partition F5OS-C OS Bundled version.(ISO image version)
	OsVersion *string `pulumi:"osVersion"`
	// select the desired user data (tcpdump captures, QKView data, etc.) volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 20 GBAfter volume sizes are configured, their sizes can be increased but not reduced
	SharedVolumeSize *int `pulumi:"sharedVolumeSize"`
	// List of integers.
	// Specifies which slots with which the chassis partition should associated.
	Slots []int `pulumi:"slots"`
	// The number of seconds to wait for partition to transition to running state.
	Timeout *int `pulumi:"timeout"`
}

type PartitionState struct {
	// select the desired configuration volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 15 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ConfigurationVolumeSize pulumi.IntPtrInput
	// Enables or disables partition.
	Enabled pulumi.BoolPtrInput
	// select the desired storage volume for all tenant images in increments of 1 GB.
	// The default value is 15 GB, with a minimum of 5 GB and a maximum of 50 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ImagesVolumeSize pulumi.IntPtrInput
	// Specifies the IPv4 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 192.168.1.1/24.
	Ipv4MgmtAddress pulumi.StringPtrInput
	// Specifies the IPv4 chassis partition management gateway.
	Ipv4MgmtGateway pulumi.StringPtrInput
	// Specifies the IPv6 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 2002::1234:abcd:ffff:c0a8:101/64.
	// Required for create operations.
	Ipv6MgmtAddress pulumi.StringPtrInput
	// Specifies the IPv6 chassis partition management gateway.
	// Required for create operations.
	Ipv6MgmtGateway pulumi.StringPtrInput
	// Name of the chassis partition.
	// Partition names must consist only of alphanumerics (0-9, a-z, A-Z), must begin with a letter, and are limited to 31 characters.
	Name pulumi.StringPtrInput
	// Specifies the partition F5OS-C OS Bundled version.(ISO image version)
	OsVersion pulumi.StringPtrInput
	// select the desired user data (tcpdump captures, QKView data, etc.) volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 20 GBAfter volume sizes are configured, their sizes can be increased but not reduced
	SharedVolumeSize pulumi.IntPtrInput
	// List of integers.
	// Specifies which slots with which the chassis partition should associated.
	Slots pulumi.IntArrayInput
	// The number of seconds to wait for partition to transition to running state.
	Timeout pulumi.IntPtrInput
}

func (PartitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionState)(nil)).Elem()
}

type partitionArgs struct {
	// select the desired configuration volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 15 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ConfigurationVolumeSize *int `pulumi:"configurationVolumeSize"`
	// Enables or disables partition.
	Enabled *bool `pulumi:"enabled"`
	// select the desired storage volume for all tenant images in increments of 1 GB.
	// The default value is 15 GB, with a minimum of 5 GB and a maximum of 50 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ImagesVolumeSize *int `pulumi:"imagesVolumeSize"`
	// Specifies the IPv4 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 192.168.1.1/24.
	Ipv4MgmtAddress *string `pulumi:"ipv4MgmtAddress"`
	// Specifies the IPv4 chassis partition management gateway.
	Ipv4MgmtGateway *string `pulumi:"ipv4MgmtGateway"`
	// Specifies the IPv6 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 2002::1234:abcd:ffff:c0a8:101/64.
	// Required for create operations.
	Ipv6MgmtAddress *string `pulumi:"ipv6MgmtAddress"`
	// Specifies the IPv6 chassis partition management gateway.
	// Required for create operations.
	Ipv6MgmtGateway *string `pulumi:"ipv6MgmtGateway"`
	// Name of the chassis partition.
	// Partition names must consist only of alphanumerics (0-9, a-z, A-Z), must begin with a letter, and are limited to 31 characters.
	Name *string `pulumi:"name"`
	// Specifies the partition F5OS-C OS Bundled version.(ISO image version)
	OsVersion *string `pulumi:"osVersion"`
	// select the desired user data (tcpdump captures, QKView data, etc.) volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 20 GBAfter volume sizes are configured, their sizes can be increased but not reduced
	SharedVolumeSize *int `pulumi:"sharedVolumeSize"`
	// List of integers.
	// Specifies which slots with which the chassis partition should associated.
	Slots []int `pulumi:"slots"`
	// The number of seconds to wait for partition to transition to running state.
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a Partition resource.
type PartitionArgs struct {
	// select the desired configuration volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 15 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ConfigurationVolumeSize pulumi.IntPtrInput
	// Enables or disables partition.
	Enabled pulumi.BoolPtrInput
	// select the desired storage volume for all tenant images in increments of 1 GB.
	// The default value is 15 GB, with a minimum of 5 GB and a maximum of 50 GB.After volume sizes are configured, their sizes can be increased but not reduced
	ImagesVolumeSize pulumi.IntPtrInput
	// Specifies the IPv4 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 192.168.1.1/24.
	Ipv4MgmtAddress pulumi.StringPtrInput
	// Specifies the IPv4 chassis partition management gateway.
	Ipv4MgmtGateway pulumi.StringPtrInput
	// Specifies the IPv6 address and subnet mask used to access the chassis partition.
	// The address must be specified in CIDR notation e.g. 2002::1234:abcd:ffff:c0a8:101/64.
	// Required for create operations.
	Ipv6MgmtAddress pulumi.StringPtrInput
	// Specifies the IPv6 chassis partition management gateway.
	// Required for create operations.
	Ipv6MgmtGateway pulumi.StringPtrInput
	// Name of the chassis partition.
	// Partition names must consist only of alphanumerics (0-9, a-z, A-Z), must begin with a letter, and are limited to 31 characters.
	Name pulumi.StringPtrInput
	// Specifies the partition F5OS-C OS Bundled version.(ISO image version)
	OsVersion pulumi.StringPtrInput
	// select the desired user data (tcpdump captures, QKView data, etc.) volume in increments of 1 GB.
	// The default value is 10 GB, with a minimum of 5 GB and a maximum of 20 GBAfter volume sizes are configured, their sizes can be increased but not reduced
	SharedVolumeSize pulumi.IntPtrInput
	// List of integers.
	// Specifies which slots with which the chassis partition should associated.
	Slots pulumi.IntArrayInput
	// The number of seconds to wait for partition to transition to running state.
	Timeout pulumi.IntPtrInput
}

func (PartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionArgs)(nil)).Elem()
}

type PartitionInput interface {
	pulumi.Input

	ToPartitionOutput() PartitionOutput
	ToPartitionOutputWithContext(ctx context.Context) PartitionOutput
}

func (*Partition) ElementType() reflect.Type {
	return reflect.TypeOf((**Partition)(nil)).Elem()
}

func (i *Partition) ToPartitionOutput() PartitionOutput {
	return i.ToPartitionOutputWithContext(context.Background())
}

func (i *Partition) ToPartitionOutputWithContext(ctx context.Context) PartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionOutput)
}

// PartitionArrayInput is an input type that accepts PartitionArray and PartitionArrayOutput values.
// You can construct a concrete instance of `PartitionArrayInput` via:
//
//	PartitionArray{ PartitionArgs{...} }
type PartitionArrayInput interface {
	pulumi.Input

	ToPartitionArrayOutput() PartitionArrayOutput
	ToPartitionArrayOutputWithContext(context.Context) PartitionArrayOutput
}

type PartitionArray []PartitionInput

func (PartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Partition)(nil)).Elem()
}

func (i PartitionArray) ToPartitionArrayOutput() PartitionArrayOutput {
	return i.ToPartitionArrayOutputWithContext(context.Background())
}

func (i PartitionArray) ToPartitionArrayOutputWithContext(ctx context.Context) PartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionArrayOutput)
}

// PartitionMapInput is an input type that accepts PartitionMap and PartitionMapOutput values.
// You can construct a concrete instance of `PartitionMapInput` via:
//
//	PartitionMap{ "key": PartitionArgs{...} }
type PartitionMapInput interface {
	pulumi.Input

	ToPartitionMapOutput() PartitionMapOutput
	ToPartitionMapOutputWithContext(context.Context) PartitionMapOutput
}

type PartitionMap map[string]PartitionInput

func (PartitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Partition)(nil)).Elem()
}

func (i PartitionMap) ToPartitionMapOutput() PartitionMapOutput {
	return i.ToPartitionMapOutputWithContext(context.Background())
}

func (i PartitionMap) ToPartitionMapOutputWithContext(ctx context.Context) PartitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionMapOutput)
}

type PartitionOutput struct{ *pulumi.OutputState }

func (PartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Partition)(nil)).Elem()
}

func (o PartitionOutput) ToPartitionOutput() PartitionOutput {
	return o
}

func (o PartitionOutput) ToPartitionOutputWithContext(ctx context.Context) PartitionOutput {
	return o
}

// select the desired configuration volume in increments of 1 GB.
// The default value is 10 GB, with a minimum of 5 GB and a maximum of 15 GB.After volume sizes are configured, their sizes can be increased but not reduced
func (o PartitionOutput) ConfigurationVolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Partition) pulumi.IntOutput { return v.ConfigurationVolumeSize }).(pulumi.IntOutput)
}

// Enables or disables partition.
func (o PartitionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Partition) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// select the desired storage volume for all tenant images in increments of 1 GB.
// The default value is 15 GB, with a minimum of 5 GB and a maximum of 50 GB.After volume sizes are configured, their sizes can be increased but not reduced
func (o PartitionOutput) ImagesVolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Partition) pulumi.IntOutput { return v.ImagesVolumeSize }).(pulumi.IntOutput)
}

// Specifies the IPv4 address and subnet mask used to access the chassis partition.
// The address must be specified in CIDR notation e.g. 192.168.1.1/24.
func (o PartitionOutput) Ipv4MgmtAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Partition) pulumi.StringPtrOutput { return v.Ipv4MgmtAddress }).(pulumi.StringPtrOutput)
}

// Specifies the IPv4 chassis partition management gateway.
func (o PartitionOutput) Ipv4MgmtGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Partition) pulumi.StringPtrOutput { return v.Ipv4MgmtGateway }).(pulumi.StringPtrOutput)
}

// Specifies the IPv6 address and subnet mask used to access the chassis partition.
// The address must be specified in CIDR notation e.g. 2002::1234:abcd:ffff:c0a8:101/64.
// Required for create operations.
func (o PartitionOutput) Ipv6MgmtAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Partition) pulumi.StringPtrOutput { return v.Ipv6MgmtAddress }).(pulumi.StringPtrOutput)
}

// Specifies the IPv6 chassis partition management gateway.
// Required for create operations.
func (o PartitionOutput) Ipv6MgmtGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Partition) pulumi.StringPtrOutput { return v.Ipv6MgmtGateway }).(pulumi.StringPtrOutput)
}

// Name of the chassis partition.
// Partition names must consist only of alphanumerics (0-9, a-z, A-Z), must begin with a letter, and are limited to 31 characters.
func (o PartitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Partition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the partition F5OS-C OS Bundled version.(ISO image version)
func (o PartitionOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Partition) pulumi.StringOutput { return v.OsVersion }).(pulumi.StringOutput)
}

// select the desired user data (tcpdump captures, QKView data, etc.) volume in increments of 1 GB.
// The default value is 10 GB, with a minimum of 5 GB and a maximum of 20 GBAfter volume sizes are configured, their sizes can be increased but not reduced
func (o PartitionOutput) SharedVolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Partition) pulumi.IntOutput { return v.SharedVolumeSize }).(pulumi.IntOutput)
}

// List of integers.
// Specifies which slots with which the chassis partition should associated.
func (o PartitionOutput) Slots() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Partition) pulumi.IntArrayOutput { return v.Slots }).(pulumi.IntArrayOutput)
}

// The number of seconds to wait for partition to transition to running state.
func (o PartitionOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Partition) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

type PartitionArrayOutput struct{ *pulumi.OutputState }

func (PartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Partition)(nil)).Elem()
}

func (o PartitionArrayOutput) ToPartitionArrayOutput() PartitionArrayOutput {
	return o
}

func (o PartitionArrayOutput) ToPartitionArrayOutputWithContext(ctx context.Context) PartitionArrayOutput {
	return o
}

func (o PartitionArrayOutput) Index(i pulumi.IntInput) PartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Partition {
		return vs[0].([]*Partition)[vs[1].(int)]
	}).(PartitionOutput)
}

type PartitionMapOutput struct{ *pulumi.OutputState }

func (PartitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Partition)(nil)).Elem()
}

func (o PartitionMapOutput) ToPartitionMapOutput() PartitionMapOutput {
	return o
}

func (o PartitionMapOutput) ToPartitionMapOutputWithContext(ctx context.Context) PartitionMapOutput {
	return o
}

func (o PartitionMapOutput) MapIndex(k pulumi.StringInput) PartitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Partition {
		return vs[0].(map[string]*Partition)[vs[1].(string)]
	}).(PartitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionInput)(nil)).Elem(), &Partition{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionArrayInput)(nil)).Elem(), PartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionMapInput)(nil)).Elem(), PartitionMap{})
	pulumi.RegisterOutputType(PartitionOutput{})
	pulumi.RegisterOutputType(PartitionArrayOutput{})
	pulumi.RegisterOutputType(PartitionMapOutput{})
}
