// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GetDeviceInfoControllerImage struct {
	// OS of the ISO image
	Os string `pulumi:"os"`
	// Service number of the ISO image
	Service string `pulumi:"service"`
	// Version of the ISO image
	Version string `pulumi:"version"`
}

// GetDeviceInfoControllerImageInput is an input type that accepts GetDeviceInfoControllerImageArgs and GetDeviceInfoControllerImageOutput values.
// You can construct a concrete instance of `GetDeviceInfoControllerImageInput` via:
//
//	GetDeviceInfoControllerImageArgs{...}
type GetDeviceInfoControllerImageInput interface {
	pulumi.Input

	ToGetDeviceInfoControllerImageOutput() GetDeviceInfoControllerImageOutput
	ToGetDeviceInfoControllerImageOutputWithContext(context.Context) GetDeviceInfoControllerImageOutput
}

type GetDeviceInfoControllerImageArgs struct {
	// OS of the ISO image
	Os pulumi.StringInput `pulumi:"os"`
	// Service number of the ISO image
	Service pulumi.StringInput `pulumi:"service"`
	// Version of the ISO image
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetDeviceInfoControllerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoControllerImage)(nil)).Elem()
}

func (i GetDeviceInfoControllerImageArgs) ToGetDeviceInfoControllerImageOutput() GetDeviceInfoControllerImageOutput {
	return i.ToGetDeviceInfoControllerImageOutputWithContext(context.Background())
}

func (i GetDeviceInfoControllerImageArgs) ToGetDeviceInfoControllerImageOutputWithContext(ctx context.Context) GetDeviceInfoControllerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoControllerImageOutput)
}

// GetDeviceInfoControllerImageArrayInput is an input type that accepts GetDeviceInfoControllerImageArray and GetDeviceInfoControllerImageArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoControllerImageArrayInput` via:
//
//	GetDeviceInfoControllerImageArray{ GetDeviceInfoControllerImageArgs{...} }
type GetDeviceInfoControllerImageArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoControllerImageArrayOutput() GetDeviceInfoControllerImageArrayOutput
	ToGetDeviceInfoControllerImageArrayOutputWithContext(context.Context) GetDeviceInfoControllerImageArrayOutput
}

type GetDeviceInfoControllerImageArray []GetDeviceInfoControllerImageInput

func (GetDeviceInfoControllerImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoControllerImage)(nil)).Elem()
}

func (i GetDeviceInfoControllerImageArray) ToGetDeviceInfoControllerImageArrayOutput() GetDeviceInfoControllerImageArrayOutput {
	return i.ToGetDeviceInfoControllerImageArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoControllerImageArray) ToGetDeviceInfoControllerImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoControllerImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoControllerImageArrayOutput)
}

type GetDeviceInfoControllerImageOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoControllerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoControllerImage)(nil)).Elem()
}

func (o GetDeviceInfoControllerImageOutput) ToGetDeviceInfoControllerImageOutput() GetDeviceInfoControllerImageOutput {
	return o
}

func (o GetDeviceInfoControllerImageOutput) ToGetDeviceInfoControllerImageOutputWithContext(ctx context.Context) GetDeviceInfoControllerImageOutput {
	return o
}

// OS of the ISO image
func (o GetDeviceInfoControllerImageOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoControllerImage) string { return v.Os }).(pulumi.StringOutput)
}

// Service number of the ISO image
func (o GetDeviceInfoControllerImageOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoControllerImage) string { return v.Service }).(pulumi.StringOutput)
}

// Version of the ISO image
func (o GetDeviceInfoControllerImageOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoControllerImage) string { return v.Version }).(pulumi.StringOutput)
}

type GetDeviceInfoControllerImageArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoControllerImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoControllerImage)(nil)).Elem()
}

func (o GetDeviceInfoControllerImageArrayOutput) ToGetDeviceInfoControllerImageArrayOutput() GetDeviceInfoControllerImageArrayOutput {
	return o
}

func (o GetDeviceInfoControllerImageArrayOutput) ToGetDeviceInfoControllerImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoControllerImageArrayOutput {
	return o
}

func (o GetDeviceInfoControllerImageArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoControllerImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoControllerImage {
		return vs[0].([]GetDeviceInfoControllerImage)[vs[1].(int)]
	}).(GetDeviceInfoControllerImageOutput)
}

type GetDeviceInfoInterface struct {
	// Interface enabled
	Enabled    bool              `pulumi:"enabled"`
	L3Counters map[string]string `pulumi:"l3Counters"`
	// Interface mtu
	Mtu int `pulumi:"mtu"`
	// Interface name
	Name string `pulumi:"name"`
	// Interface operational status
	OperationalStatus string `pulumi:"operationalStatus"`
	// Interface port speed
	PortSpeed string `pulumi:"portSpeed"`
	// Interface type
	Type string `pulumi:"type"`
}

// GetDeviceInfoInterfaceInput is an input type that accepts GetDeviceInfoInterfaceArgs and GetDeviceInfoInterfaceOutput values.
// You can construct a concrete instance of `GetDeviceInfoInterfaceInput` via:
//
//	GetDeviceInfoInterfaceArgs{...}
type GetDeviceInfoInterfaceInput interface {
	pulumi.Input

	ToGetDeviceInfoInterfaceOutput() GetDeviceInfoInterfaceOutput
	ToGetDeviceInfoInterfaceOutputWithContext(context.Context) GetDeviceInfoInterfaceOutput
}

type GetDeviceInfoInterfaceArgs struct {
	// Interface enabled
	Enabled    pulumi.BoolInput      `pulumi:"enabled"`
	L3Counters pulumi.StringMapInput `pulumi:"l3Counters"`
	// Interface mtu
	Mtu pulumi.IntInput `pulumi:"mtu"`
	// Interface name
	Name pulumi.StringInput `pulumi:"name"`
	// Interface operational status
	OperationalStatus pulumi.StringInput `pulumi:"operationalStatus"`
	// Interface port speed
	PortSpeed pulumi.StringInput `pulumi:"portSpeed"`
	// Interface type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDeviceInfoInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoInterface)(nil)).Elem()
}

func (i GetDeviceInfoInterfaceArgs) ToGetDeviceInfoInterfaceOutput() GetDeviceInfoInterfaceOutput {
	return i.ToGetDeviceInfoInterfaceOutputWithContext(context.Background())
}

func (i GetDeviceInfoInterfaceArgs) ToGetDeviceInfoInterfaceOutputWithContext(ctx context.Context) GetDeviceInfoInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoInterfaceOutput)
}

// GetDeviceInfoInterfaceArrayInput is an input type that accepts GetDeviceInfoInterfaceArray and GetDeviceInfoInterfaceArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoInterfaceArrayInput` via:
//
//	GetDeviceInfoInterfaceArray{ GetDeviceInfoInterfaceArgs{...} }
type GetDeviceInfoInterfaceArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoInterfaceArrayOutput() GetDeviceInfoInterfaceArrayOutput
	ToGetDeviceInfoInterfaceArrayOutputWithContext(context.Context) GetDeviceInfoInterfaceArrayOutput
}

type GetDeviceInfoInterfaceArray []GetDeviceInfoInterfaceInput

func (GetDeviceInfoInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoInterface)(nil)).Elem()
}

func (i GetDeviceInfoInterfaceArray) ToGetDeviceInfoInterfaceArrayOutput() GetDeviceInfoInterfaceArrayOutput {
	return i.ToGetDeviceInfoInterfaceArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoInterfaceArray) ToGetDeviceInfoInterfaceArrayOutputWithContext(ctx context.Context) GetDeviceInfoInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoInterfaceArrayOutput)
}

type GetDeviceInfoInterfaceOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoInterface)(nil)).Elem()
}

func (o GetDeviceInfoInterfaceOutput) ToGetDeviceInfoInterfaceOutput() GetDeviceInfoInterfaceOutput {
	return o
}

func (o GetDeviceInfoInterfaceOutput) ToGetDeviceInfoInterfaceOutputWithContext(ctx context.Context) GetDeviceInfoInterfaceOutput {
	return o
}

// Interface enabled
func (o GetDeviceInfoInterfaceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetDeviceInfoInterfaceOutput) L3Counters() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) map[string]string { return v.L3Counters }).(pulumi.StringMapOutput)
}

// Interface mtu
func (o GetDeviceInfoInterfaceOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) int { return v.Mtu }).(pulumi.IntOutput)
}

// Interface name
func (o GetDeviceInfoInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) string { return v.Name }).(pulumi.StringOutput)
}

// Interface operational status
func (o GetDeviceInfoInterfaceOutput) OperationalStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) string { return v.OperationalStatus }).(pulumi.StringOutput)
}

// Interface port speed
func (o GetDeviceInfoInterfaceOutput) PortSpeed() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) string { return v.PortSpeed }).(pulumi.StringOutput)
}

// Interface type
func (o GetDeviceInfoInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) string { return v.Type }).(pulumi.StringOutput)
}

type GetDeviceInfoInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoInterface)(nil)).Elem()
}

func (o GetDeviceInfoInterfaceArrayOutput) ToGetDeviceInfoInterfaceArrayOutput() GetDeviceInfoInterfaceArrayOutput {
	return o
}

func (o GetDeviceInfoInterfaceArrayOutput) ToGetDeviceInfoInterfaceArrayOutputWithContext(ctx context.Context) GetDeviceInfoInterfaceArrayOutput {
	return o
}

func (o GetDeviceInfoInterfaceArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoInterface {
		return vs[0].([]GetDeviceInfoInterface)[vs[1].(int)]
	}).(GetDeviceInfoInterfaceOutput)
}

type GetDeviceInfoPartitionImage struct {
	// OS of the ISO image
	Os string `pulumi:"os"`
	// Service number of the ISO image
	Service string `pulumi:"service"`
	// Version of the ISO image
	Version string `pulumi:"version"`
}

// GetDeviceInfoPartitionImageInput is an input type that accepts GetDeviceInfoPartitionImageArgs and GetDeviceInfoPartitionImageOutput values.
// You can construct a concrete instance of `GetDeviceInfoPartitionImageInput` via:
//
//	GetDeviceInfoPartitionImageArgs{...}
type GetDeviceInfoPartitionImageInput interface {
	pulumi.Input

	ToGetDeviceInfoPartitionImageOutput() GetDeviceInfoPartitionImageOutput
	ToGetDeviceInfoPartitionImageOutputWithContext(context.Context) GetDeviceInfoPartitionImageOutput
}

type GetDeviceInfoPartitionImageArgs struct {
	// OS of the ISO image
	Os pulumi.StringInput `pulumi:"os"`
	// Service number of the ISO image
	Service pulumi.StringInput `pulumi:"service"`
	// Version of the ISO image
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetDeviceInfoPartitionImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoPartitionImage)(nil)).Elem()
}

func (i GetDeviceInfoPartitionImageArgs) ToGetDeviceInfoPartitionImageOutput() GetDeviceInfoPartitionImageOutput {
	return i.ToGetDeviceInfoPartitionImageOutputWithContext(context.Background())
}

func (i GetDeviceInfoPartitionImageArgs) ToGetDeviceInfoPartitionImageOutputWithContext(ctx context.Context) GetDeviceInfoPartitionImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoPartitionImageOutput)
}

// GetDeviceInfoPartitionImageArrayInput is an input type that accepts GetDeviceInfoPartitionImageArray and GetDeviceInfoPartitionImageArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoPartitionImageArrayInput` via:
//
//	GetDeviceInfoPartitionImageArray{ GetDeviceInfoPartitionImageArgs{...} }
type GetDeviceInfoPartitionImageArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoPartitionImageArrayOutput() GetDeviceInfoPartitionImageArrayOutput
	ToGetDeviceInfoPartitionImageArrayOutputWithContext(context.Context) GetDeviceInfoPartitionImageArrayOutput
}

type GetDeviceInfoPartitionImageArray []GetDeviceInfoPartitionImageInput

func (GetDeviceInfoPartitionImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoPartitionImage)(nil)).Elem()
}

func (i GetDeviceInfoPartitionImageArray) ToGetDeviceInfoPartitionImageArrayOutput() GetDeviceInfoPartitionImageArrayOutput {
	return i.ToGetDeviceInfoPartitionImageArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoPartitionImageArray) ToGetDeviceInfoPartitionImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoPartitionImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoPartitionImageArrayOutput)
}

type GetDeviceInfoPartitionImageOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoPartitionImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoPartitionImage)(nil)).Elem()
}

func (o GetDeviceInfoPartitionImageOutput) ToGetDeviceInfoPartitionImageOutput() GetDeviceInfoPartitionImageOutput {
	return o
}

func (o GetDeviceInfoPartitionImageOutput) ToGetDeviceInfoPartitionImageOutputWithContext(ctx context.Context) GetDeviceInfoPartitionImageOutput {
	return o
}

// OS of the ISO image
func (o GetDeviceInfoPartitionImageOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoPartitionImage) string { return v.Os }).(pulumi.StringOutput)
}

// Service number of the ISO image
func (o GetDeviceInfoPartitionImageOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoPartitionImage) string { return v.Service }).(pulumi.StringOutput)
}

// Version of the ISO image
func (o GetDeviceInfoPartitionImageOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoPartitionImage) string { return v.Version }).(pulumi.StringOutput)
}

type GetDeviceInfoPartitionImageArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoPartitionImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoPartitionImage)(nil)).Elem()
}

func (o GetDeviceInfoPartitionImageArrayOutput) ToGetDeviceInfoPartitionImageArrayOutput() GetDeviceInfoPartitionImageArrayOutput {
	return o
}

func (o GetDeviceInfoPartitionImageArrayOutput) ToGetDeviceInfoPartitionImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoPartitionImageArrayOutput {
	return o
}

func (o GetDeviceInfoPartitionImageArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoPartitionImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoPartitionImage {
		return vs[0].([]GetDeviceInfoPartitionImage)[vs[1].(int)]
	}).(GetDeviceInfoPartitionImageOutput)
}

type GetDeviceInfoTenantImage struct {
	// Image Date
	Date string `pulumi:"date"`
	// Image name
	ImageName string `pulumi:"imageName"`
	// In use
	InUse bool `pulumi:"inUse"`
	// Image Size
	Size string `pulumi:"size"`
	// Image Status
	Status string `pulumi:"status"`
	// Image Type
	Type string `pulumi:"type"`
}

// GetDeviceInfoTenantImageInput is an input type that accepts GetDeviceInfoTenantImageArgs and GetDeviceInfoTenantImageOutput values.
// You can construct a concrete instance of `GetDeviceInfoTenantImageInput` via:
//
//	GetDeviceInfoTenantImageArgs{...}
type GetDeviceInfoTenantImageInput interface {
	pulumi.Input

	ToGetDeviceInfoTenantImageOutput() GetDeviceInfoTenantImageOutput
	ToGetDeviceInfoTenantImageOutputWithContext(context.Context) GetDeviceInfoTenantImageOutput
}

type GetDeviceInfoTenantImageArgs struct {
	// Image Date
	Date pulumi.StringInput `pulumi:"date"`
	// Image name
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// In use
	InUse pulumi.BoolInput `pulumi:"inUse"`
	// Image Size
	Size pulumi.StringInput `pulumi:"size"`
	// Image Status
	Status pulumi.StringInput `pulumi:"status"`
	// Image Type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDeviceInfoTenantImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoTenantImage)(nil)).Elem()
}

func (i GetDeviceInfoTenantImageArgs) ToGetDeviceInfoTenantImageOutput() GetDeviceInfoTenantImageOutput {
	return i.ToGetDeviceInfoTenantImageOutputWithContext(context.Background())
}

func (i GetDeviceInfoTenantImageArgs) ToGetDeviceInfoTenantImageOutputWithContext(ctx context.Context) GetDeviceInfoTenantImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoTenantImageOutput)
}

// GetDeviceInfoTenantImageArrayInput is an input type that accepts GetDeviceInfoTenantImageArray and GetDeviceInfoTenantImageArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoTenantImageArrayInput` via:
//
//	GetDeviceInfoTenantImageArray{ GetDeviceInfoTenantImageArgs{...} }
type GetDeviceInfoTenantImageArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoTenantImageArrayOutput() GetDeviceInfoTenantImageArrayOutput
	ToGetDeviceInfoTenantImageArrayOutputWithContext(context.Context) GetDeviceInfoTenantImageArrayOutput
}

type GetDeviceInfoTenantImageArray []GetDeviceInfoTenantImageInput

func (GetDeviceInfoTenantImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoTenantImage)(nil)).Elem()
}

func (i GetDeviceInfoTenantImageArray) ToGetDeviceInfoTenantImageArrayOutput() GetDeviceInfoTenantImageArrayOutput {
	return i.ToGetDeviceInfoTenantImageArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoTenantImageArray) ToGetDeviceInfoTenantImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoTenantImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoTenantImageArrayOutput)
}

type GetDeviceInfoTenantImageOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoTenantImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoTenantImage)(nil)).Elem()
}

func (o GetDeviceInfoTenantImageOutput) ToGetDeviceInfoTenantImageOutput() GetDeviceInfoTenantImageOutput {
	return o
}

func (o GetDeviceInfoTenantImageOutput) ToGetDeviceInfoTenantImageOutputWithContext(ctx context.Context) GetDeviceInfoTenantImageOutput {
	return o
}

// Image Date
func (o GetDeviceInfoTenantImageOutput) Date() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.Date }).(pulumi.StringOutput)
}

// Image name
func (o GetDeviceInfoTenantImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.ImageName }).(pulumi.StringOutput)
}

// In use
func (o GetDeviceInfoTenantImageOutput) InUse() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) bool { return v.InUse }).(pulumi.BoolOutput)
}

// Image Size
func (o GetDeviceInfoTenantImageOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.Size }).(pulumi.StringOutput)
}

// Image Status
func (o GetDeviceInfoTenantImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.Status }).(pulumi.StringOutput)
}

// Image Type
func (o GetDeviceInfoTenantImageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.Type }).(pulumi.StringOutput)
}

type GetDeviceInfoTenantImageArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoTenantImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoTenantImage)(nil)).Elem()
}

func (o GetDeviceInfoTenantImageArrayOutput) ToGetDeviceInfoTenantImageArrayOutput() GetDeviceInfoTenantImageArrayOutput {
	return o
}

func (o GetDeviceInfoTenantImageArrayOutput) ToGetDeviceInfoTenantImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoTenantImageArrayOutput {
	return o
}

func (o GetDeviceInfoTenantImageArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoTenantImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoTenantImage {
		return vs[0].([]GetDeviceInfoTenantImage)[vs[1].(int)]
	}).(GetDeviceInfoTenantImageOutput)
}

type GetDeviceInfoVlan struct {
	// Vlan id
	VlanId int `pulumi:"vlanId"`
	// Vlan name
	VlanName string `pulumi:"vlanName"`
}

// GetDeviceInfoVlanInput is an input type that accepts GetDeviceInfoVlanArgs and GetDeviceInfoVlanOutput values.
// You can construct a concrete instance of `GetDeviceInfoVlanInput` via:
//
//	GetDeviceInfoVlanArgs{...}
type GetDeviceInfoVlanInput interface {
	pulumi.Input

	ToGetDeviceInfoVlanOutput() GetDeviceInfoVlanOutput
	ToGetDeviceInfoVlanOutputWithContext(context.Context) GetDeviceInfoVlanOutput
}

type GetDeviceInfoVlanArgs struct {
	// Vlan id
	VlanId pulumi.IntInput `pulumi:"vlanId"`
	// Vlan name
	VlanName pulumi.StringInput `pulumi:"vlanName"`
}

func (GetDeviceInfoVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoVlan)(nil)).Elem()
}

func (i GetDeviceInfoVlanArgs) ToGetDeviceInfoVlanOutput() GetDeviceInfoVlanOutput {
	return i.ToGetDeviceInfoVlanOutputWithContext(context.Background())
}

func (i GetDeviceInfoVlanArgs) ToGetDeviceInfoVlanOutputWithContext(ctx context.Context) GetDeviceInfoVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoVlanOutput)
}

// GetDeviceInfoVlanArrayInput is an input type that accepts GetDeviceInfoVlanArray and GetDeviceInfoVlanArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoVlanArrayInput` via:
//
//	GetDeviceInfoVlanArray{ GetDeviceInfoVlanArgs{...} }
type GetDeviceInfoVlanArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoVlanArrayOutput() GetDeviceInfoVlanArrayOutput
	ToGetDeviceInfoVlanArrayOutputWithContext(context.Context) GetDeviceInfoVlanArrayOutput
}

type GetDeviceInfoVlanArray []GetDeviceInfoVlanInput

func (GetDeviceInfoVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoVlan)(nil)).Elem()
}

func (i GetDeviceInfoVlanArray) ToGetDeviceInfoVlanArrayOutput() GetDeviceInfoVlanArrayOutput {
	return i.ToGetDeviceInfoVlanArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoVlanArray) ToGetDeviceInfoVlanArrayOutputWithContext(ctx context.Context) GetDeviceInfoVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoVlanArrayOutput)
}

type GetDeviceInfoVlanOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoVlan)(nil)).Elem()
}

func (o GetDeviceInfoVlanOutput) ToGetDeviceInfoVlanOutput() GetDeviceInfoVlanOutput {
	return o
}

func (o GetDeviceInfoVlanOutput) ToGetDeviceInfoVlanOutputWithContext(ctx context.Context) GetDeviceInfoVlanOutput {
	return o
}

// Vlan id
func (o GetDeviceInfoVlanOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeviceInfoVlan) int { return v.VlanId }).(pulumi.IntOutput)
}

// Vlan name
func (o GetDeviceInfoVlanOutput) VlanName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoVlan) string { return v.VlanName }).(pulumi.StringOutput)
}

type GetDeviceInfoVlanArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoVlan)(nil)).Elem()
}

func (o GetDeviceInfoVlanArrayOutput) ToGetDeviceInfoVlanArrayOutput() GetDeviceInfoVlanArrayOutput {
	return o
}

func (o GetDeviceInfoVlanArrayOutput) ToGetDeviceInfoVlanArrayOutputWithContext(ctx context.Context) GetDeviceInfoVlanArrayOutput {
	return o
}

func (o GetDeviceInfoVlanArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoVlan {
		return vs[0].([]GetDeviceInfoVlan)[vs[1].(int)]
	}).(GetDeviceInfoVlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoControllerImageInput)(nil)).Elem(), GetDeviceInfoControllerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoControllerImageArrayInput)(nil)).Elem(), GetDeviceInfoControllerImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoInterfaceInput)(nil)).Elem(), GetDeviceInfoInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoInterfaceArrayInput)(nil)).Elem(), GetDeviceInfoInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoPartitionImageInput)(nil)).Elem(), GetDeviceInfoPartitionImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoPartitionImageArrayInput)(nil)).Elem(), GetDeviceInfoPartitionImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoTenantImageInput)(nil)).Elem(), GetDeviceInfoTenantImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoTenantImageArrayInput)(nil)).Elem(), GetDeviceInfoTenantImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoVlanInput)(nil)).Elem(), GetDeviceInfoVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoVlanArrayInput)(nil)).Elem(), GetDeviceInfoVlanArray{})
	pulumi.RegisterOutputType(GetDeviceInfoControllerImageOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoControllerImageArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoInterfaceOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoPartitionImageOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoPartitionImageArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoTenantImageOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoTenantImageArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoVlanOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoVlanArrayOutput{})
}
