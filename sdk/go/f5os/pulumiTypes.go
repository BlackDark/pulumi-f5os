// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type LoggingCaBundle struct {
	// The PEM-encoded content of the CA bundle.
	Content string `pulumi:"content"`
	// The name of the CA bundle.
	Name string `pulumi:"name"`
}

// LoggingCaBundleInput is an input type that accepts LoggingCaBundleArgs and LoggingCaBundleOutput values.
// You can construct a concrete instance of `LoggingCaBundleInput` via:
//
//	LoggingCaBundleArgs{...}
type LoggingCaBundleInput interface {
	pulumi.Input

	ToLoggingCaBundleOutput() LoggingCaBundleOutput
	ToLoggingCaBundleOutputWithContext(context.Context) LoggingCaBundleOutput
}

type LoggingCaBundleArgs struct {
	// The PEM-encoded content of the CA bundle.
	Content pulumi.StringInput `pulumi:"content"`
	// The name of the CA bundle.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LoggingCaBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingCaBundle)(nil)).Elem()
}

func (i LoggingCaBundleArgs) ToLoggingCaBundleOutput() LoggingCaBundleOutput {
	return i.ToLoggingCaBundleOutputWithContext(context.Background())
}

func (i LoggingCaBundleArgs) ToLoggingCaBundleOutputWithContext(ctx context.Context) LoggingCaBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingCaBundleOutput)
}

// LoggingCaBundleArrayInput is an input type that accepts LoggingCaBundleArray and LoggingCaBundleArrayOutput values.
// You can construct a concrete instance of `LoggingCaBundleArrayInput` via:
//
//	LoggingCaBundleArray{ LoggingCaBundleArgs{...} }
type LoggingCaBundleArrayInput interface {
	pulumi.Input

	ToLoggingCaBundleArrayOutput() LoggingCaBundleArrayOutput
	ToLoggingCaBundleArrayOutputWithContext(context.Context) LoggingCaBundleArrayOutput
}

type LoggingCaBundleArray []LoggingCaBundleInput

func (LoggingCaBundleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingCaBundle)(nil)).Elem()
}

func (i LoggingCaBundleArray) ToLoggingCaBundleArrayOutput() LoggingCaBundleArrayOutput {
	return i.ToLoggingCaBundleArrayOutputWithContext(context.Background())
}

func (i LoggingCaBundleArray) ToLoggingCaBundleArrayOutputWithContext(ctx context.Context) LoggingCaBundleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingCaBundleArrayOutput)
}

type LoggingCaBundleOutput struct{ *pulumi.OutputState }

func (LoggingCaBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingCaBundle)(nil)).Elem()
}

func (o LoggingCaBundleOutput) ToLoggingCaBundleOutput() LoggingCaBundleOutput {
	return o
}

func (o LoggingCaBundleOutput) ToLoggingCaBundleOutputWithContext(ctx context.Context) LoggingCaBundleOutput {
	return o
}

// The PEM-encoded content of the CA bundle.
func (o LoggingCaBundleOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingCaBundle) string { return v.Content }).(pulumi.StringOutput)
}

// The name of the CA bundle.
func (o LoggingCaBundleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingCaBundle) string { return v.Name }).(pulumi.StringOutput)
}

type LoggingCaBundleArrayOutput struct{ *pulumi.OutputState }

func (LoggingCaBundleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingCaBundle)(nil)).Elem()
}

func (o LoggingCaBundleArrayOutput) ToLoggingCaBundleArrayOutput() LoggingCaBundleArrayOutput {
	return o
}

func (o LoggingCaBundleArrayOutput) ToLoggingCaBundleArrayOutputWithContext(ctx context.Context) LoggingCaBundleArrayOutput {
	return o
}

func (o LoggingCaBundleArrayOutput) Index(i pulumi.IntInput) LoggingCaBundleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingCaBundle {
		return vs[0].([]LoggingCaBundle)[vs[1].(int)]
	}).(LoggingCaBundleOutput)
}

type LoggingRemoteForwarding struct {
	// Whether remote forwarding is enabled.
	Enabled bool `pulumi:"enabled"`
	// List of files for remote forwarding output.
	Files []LoggingRemoteForwardingFile `pulumi:"files"`
	// Log selectors for remote forwarding, specifying facility and severity.
	Logs []LoggingRemoteForwardingLog `pulumi:"logs"`
}

// LoggingRemoteForwardingInput is an input type that accepts LoggingRemoteForwardingArgs and LoggingRemoteForwardingOutput values.
// You can construct a concrete instance of `LoggingRemoteForwardingInput` via:
//
//	LoggingRemoteForwardingArgs{...}
type LoggingRemoteForwardingInput interface {
	pulumi.Input

	ToLoggingRemoteForwardingOutput() LoggingRemoteForwardingOutput
	ToLoggingRemoteForwardingOutputWithContext(context.Context) LoggingRemoteForwardingOutput
}

type LoggingRemoteForwardingArgs struct {
	// Whether remote forwarding is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// List of files for remote forwarding output.
	Files LoggingRemoteForwardingFileArrayInput `pulumi:"files"`
	// Log selectors for remote forwarding, specifying facility and severity.
	Logs LoggingRemoteForwardingLogArrayInput `pulumi:"logs"`
}

func (LoggingRemoteForwardingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingRemoteForwarding)(nil)).Elem()
}

func (i LoggingRemoteForwardingArgs) ToLoggingRemoteForwardingOutput() LoggingRemoteForwardingOutput {
	return i.ToLoggingRemoteForwardingOutputWithContext(context.Background())
}

func (i LoggingRemoteForwardingArgs) ToLoggingRemoteForwardingOutputWithContext(ctx context.Context) LoggingRemoteForwardingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingRemoteForwardingOutput)
}

func (i LoggingRemoteForwardingArgs) ToLoggingRemoteForwardingPtrOutput() LoggingRemoteForwardingPtrOutput {
	return i.ToLoggingRemoteForwardingPtrOutputWithContext(context.Background())
}

func (i LoggingRemoteForwardingArgs) ToLoggingRemoteForwardingPtrOutputWithContext(ctx context.Context) LoggingRemoteForwardingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingRemoteForwardingOutput).ToLoggingRemoteForwardingPtrOutputWithContext(ctx)
}

// LoggingRemoteForwardingPtrInput is an input type that accepts LoggingRemoteForwardingArgs, LoggingRemoteForwardingPtr and LoggingRemoteForwardingPtrOutput values.
// You can construct a concrete instance of `LoggingRemoteForwardingPtrInput` via:
//
//	        LoggingRemoteForwardingArgs{...}
//
//	or:
//
//	        nil
type LoggingRemoteForwardingPtrInput interface {
	pulumi.Input

	ToLoggingRemoteForwardingPtrOutput() LoggingRemoteForwardingPtrOutput
	ToLoggingRemoteForwardingPtrOutputWithContext(context.Context) LoggingRemoteForwardingPtrOutput
}

type loggingRemoteForwardingPtrType LoggingRemoteForwardingArgs

func LoggingRemoteForwardingPtr(v *LoggingRemoteForwardingArgs) LoggingRemoteForwardingPtrInput {
	return (*loggingRemoteForwardingPtrType)(v)
}

func (*loggingRemoteForwardingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingRemoteForwarding)(nil)).Elem()
}

func (i *loggingRemoteForwardingPtrType) ToLoggingRemoteForwardingPtrOutput() LoggingRemoteForwardingPtrOutput {
	return i.ToLoggingRemoteForwardingPtrOutputWithContext(context.Background())
}

func (i *loggingRemoteForwardingPtrType) ToLoggingRemoteForwardingPtrOutputWithContext(ctx context.Context) LoggingRemoteForwardingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingRemoteForwardingPtrOutput)
}

type LoggingRemoteForwardingOutput struct{ *pulumi.OutputState }

func (LoggingRemoteForwardingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingRemoteForwarding)(nil)).Elem()
}

func (o LoggingRemoteForwardingOutput) ToLoggingRemoteForwardingOutput() LoggingRemoteForwardingOutput {
	return o
}

func (o LoggingRemoteForwardingOutput) ToLoggingRemoteForwardingOutputWithContext(ctx context.Context) LoggingRemoteForwardingOutput {
	return o
}

func (o LoggingRemoteForwardingOutput) ToLoggingRemoteForwardingPtrOutput() LoggingRemoteForwardingPtrOutput {
	return o.ToLoggingRemoteForwardingPtrOutputWithContext(context.Background())
}

func (o LoggingRemoteForwardingOutput) ToLoggingRemoteForwardingPtrOutputWithContext(ctx context.Context) LoggingRemoteForwardingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoggingRemoteForwarding) *LoggingRemoteForwarding {
		return &v
	}).(LoggingRemoteForwardingPtrOutput)
}

// Whether remote forwarding is enabled.
func (o LoggingRemoteForwardingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LoggingRemoteForwarding) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// List of files for remote forwarding output.
func (o LoggingRemoteForwardingOutput) Files() LoggingRemoteForwardingFileArrayOutput {
	return o.ApplyT(func(v LoggingRemoteForwarding) []LoggingRemoteForwardingFile { return v.Files }).(LoggingRemoteForwardingFileArrayOutput)
}

// Log selectors for remote forwarding, specifying facility and severity.
func (o LoggingRemoteForwardingOutput) Logs() LoggingRemoteForwardingLogArrayOutput {
	return o.ApplyT(func(v LoggingRemoteForwarding) []LoggingRemoteForwardingLog { return v.Logs }).(LoggingRemoteForwardingLogArrayOutput)
}

type LoggingRemoteForwardingPtrOutput struct{ *pulumi.OutputState }

func (LoggingRemoteForwardingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingRemoteForwarding)(nil)).Elem()
}

func (o LoggingRemoteForwardingPtrOutput) ToLoggingRemoteForwardingPtrOutput() LoggingRemoteForwardingPtrOutput {
	return o
}

func (o LoggingRemoteForwardingPtrOutput) ToLoggingRemoteForwardingPtrOutputWithContext(ctx context.Context) LoggingRemoteForwardingPtrOutput {
	return o
}

func (o LoggingRemoteForwardingPtrOutput) Elem() LoggingRemoteForwardingOutput {
	return o.ApplyT(func(v *LoggingRemoteForwarding) LoggingRemoteForwarding {
		if v != nil {
			return *v
		}
		var ret LoggingRemoteForwarding
		return ret
	}).(LoggingRemoteForwardingOutput)
}

// Whether remote forwarding is enabled.
func (o LoggingRemoteForwardingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoggingRemoteForwarding) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of files for remote forwarding output.
func (o LoggingRemoteForwardingPtrOutput) Files() LoggingRemoteForwardingFileArrayOutput {
	return o.ApplyT(func(v *LoggingRemoteForwarding) []LoggingRemoteForwardingFile {
		if v == nil {
			return nil
		}
		return v.Files
	}).(LoggingRemoteForwardingFileArrayOutput)
}

// Log selectors for remote forwarding, specifying facility and severity.
func (o LoggingRemoteForwardingPtrOutput) Logs() LoggingRemoteForwardingLogArrayOutput {
	return o.ApplyT(func(v *LoggingRemoteForwarding) []LoggingRemoteForwardingLog {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(LoggingRemoteForwardingLogArrayOutput)
}

type LoggingRemoteForwardingFile struct {
	// The name of the file for log output.
	Name string `pulumi:"name"`
}

// LoggingRemoteForwardingFileInput is an input type that accepts LoggingRemoteForwardingFileArgs and LoggingRemoteForwardingFileOutput values.
// You can construct a concrete instance of `LoggingRemoteForwardingFileInput` via:
//
//	LoggingRemoteForwardingFileArgs{...}
type LoggingRemoteForwardingFileInput interface {
	pulumi.Input

	ToLoggingRemoteForwardingFileOutput() LoggingRemoteForwardingFileOutput
	ToLoggingRemoteForwardingFileOutputWithContext(context.Context) LoggingRemoteForwardingFileOutput
}

type LoggingRemoteForwardingFileArgs struct {
	// The name of the file for log output.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LoggingRemoteForwardingFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingRemoteForwardingFile)(nil)).Elem()
}

func (i LoggingRemoteForwardingFileArgs) ToLoggingRemoteForwardingFileOutput() LoggingRemoteForwardingFileOutput {
	return i.ToLoggingRemoteForwardingFileOutputWithContext(context.Background())
}

func (i LoggingRemoteForwardingFileArgs) ToLoggingRemoteForwardingFileOutputWithContext(ctx context.Context) LoggingRemoteForwardingFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingRemoteForwardingFileOutput)
}

// LoggingRemoteForwardingFileArrayInput is an input type that accepts LoggingRemoteForwardingFileArray and LoggingRemoteForwardingFileArrayOutput values.
// You can construct a concrete instance of `LoggingRemoteForwardingFileArrayInput` via:
//
//	LoggingRemoteForwardingFileArray{ LoggingRemoteForwardingFileArgs{...} }
type LoggingRemoteForwardingFileArrayInput interface {
	pulumi.Input

	ToLoggingRemoteForwardingFileArrayOutput() LoggingRemoteForwardingFileArrayOutput
	ToLoggingRemoteForwardingFileArrayOutputWithContext(context.Context) LoggingRemoteForwardingFileArrayOutput
}

type LoggingRemoteForwardingFileArray []LoggingRemoteForwardingFileInput

func (LoggingRemoteForwardingFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingRemoteForwardingFile)(nil)).Elem()
}

func (i LoggingRemoteForwardingFileArray) ToLoggingRemoteForwardingFileArrayOutput() LoggingRemoteForwardingFileArrayOutput {
	return i.ToLoggingRemoteForwardingFileArrayOutputWithContext(context.Background())
}

func (i LoggingRemoteForwardingFileArray) ToLoggingRemoteForwardingFileArrayOutputWithContext(ctx context.Context) LoggingRemoteForwardingFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingRemoteForwardingFileArrayOutput)
}

type LoggingRemoteForwardingFileOutput struct{ *pulumi.OutputState }

func (LoggingRemoteForwardingFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingRemoteForwardingFile)(nil)).Elem()
}

func (o LoggingRemoteForwardingFileOutput) ToLoggingRemoteForwardingFileOutput() LoggingRemoteForwardingFileOutput {
	return o
}

func (o LoggingRemoteForwardingFileOutput) ToLoggingRemoteForwardingFileOutputWithContext(ctx context.Context) LoggingRemoteForwardingFileOutput {
	return o
}

// The name of the file for log output.
func (o LoggingRemoteForwardingFileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingRemoteForwardingFile) string { return v.Name }).(pulumi.StringOutput)
}

type LoggingRemoteForwardingFileArrayOutput struct{ *pulumi.OutputState }

func (LoggingRemoteForwardingFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingRemoteForwardingFile)(nil)).Elem()
}

func (o LoggingRemoteForwardingFileArrayOutput) ToLoggingRemoteForwardingFileArrayOutput() LoggingRemoteForwardingFileArrayOutput {
	return o
}

func (o LoggingRemoteForwardingFileArrayOutput) ToLoggingRemoteForwardingFileArrayOutputWithContext(ctx context.Context) LoggingRemoteForwardingFileArrayOutput {
	return o
}

func (o LoggingRemoteForwardingFileArrayOutput) Index(i pulumi.IntInput) LoggingRemoteForwardingFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingRemoteForwardingFile {
		return vs[0].([]LoggingRemoteForwardingFile)[vs[1].(int)]
	}).(LoggingRemoteForwardingFileOutput)
}

type LoggingRemoteForwardingLog struct {
	// The syslog facility for remote forwarding (local0 or authpriv).
	Facility string `pulumi:"facility"`
	// The syslog severity for remote forwarding.
	Severity string `pulumi:"severity"`
}

// LoggingRemoteForwardingLogInput is an input type that accepts LoggingRemoteForwardingLogArgs and LoggingRemoteForwardingLogOutput values.
// You can construct a concrete instance of `LoggingRemoteForwardingLogInput` via:
//
//	LoggingRemoteForwardingLogArgs{...}
type LoggingRemoteForwardingLogInput interface {
	pulumi.Input

	ToLoggingRemoteForwardingLogOutput() LoggingRemoteForwardingLogOutput
	ToLoggingRemoteForwardingLogOutputWithContext(context.Context) LoggingRemoteForwardingLogOutput
}

type LoggingRemoteForwardingLogArgs struct {
	// The syslog facility for remote forwarding (local0 or authpriv).
	Facility pulumi.StringInput `pulumi:"facility"`
	// The syslog severity for remote forwarding.
	Severity pulumi.StringInput `pulumi:"severity"`
}

func (LoggingRemoteForwardingLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingRemoteForwardingLog)(nil)).Elem()
}

func (i LoggingRemoteForwardingLogArgs) ToLoggingRemoteForwardingLogOutput() LoggingRemoteForwardingLogOutput {
	return i.ToLoggingRemoteForwardingLogOutputWithContext(context.Background())
}

func (i LoggingRemoteForwardingLogArgs) ToLoggingRemoteForwardingLogOutputWithContext(ctx context.Context) LoggingRemoteForwardingLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingRemoteForwardingLogOutput)
}

// LoggingRemoteForwardingLogArrayInput is an input type that accepts LoggingRemoteForwardingLogArray and LoggingRemoteForwardingLogArrayOutput values.
// You can construct a concrete instance of `LoggingRemoteForwardingLogArrayInput` via:
//
//	LoggingRemoteForwardingLogArray{ LoggingRemoteForwardingLogArgs{...} }
type LoggingRemoteForwardingLogArrayInput interface {
	pulumi.Input

	ToLoggingRemoteForwardingLogArrayOutput() LoggingRemoteForwardingLogArrayOutput
	ToLoggingRemoteForwardingLogArrayOutputWithContext(context.Context) LoggingRemoteForwardingLogArrayOutput
}

type LoggingRemoteForwardingLogArray []LoggingRemoteForwardingLogInput

func (LoggingRemoteForwardingLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingRemoteForwardingLog)(nil)).Elem()
}

func (i LoggingRemoteForwardingLogArray) ToLoggingRemoteForwardingLogArrayOutput() LoggingRemoteForwardingLogArrayOutput {
	return i.ToLoggingRemoteForwardingLogArrayOutputWithContext(context.Background())
}

func (i LoggingRemoteForwardingLogArray) ToLoggingRemoteForwardingLogArrayOutputWithContext(ctx context.Context) LoggingRemoteForwardingLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingRemoteForwardingLogArrayOutput)
}

type LoggingRemoteForwardingLogOutput struct{ *pulumi.OutputState }

func (LoggingRemoteForwardingLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingRemoteForwardingLog)(nil)).Elem()
}

func (o LoggingRemoteForwardingLogOutput) ToLoggingRemoteForwardingLogOutput() LoggingRemoteForwardingLogOutput {
	return o
}

func (o LoggingRemoteForwardingLogOutput) ToLoggingRemoteForwardingLogOutputWithContext(ctx context.Context) LoggingRemoteForwardingLogOutput {
	return o
}

// The syslog facility for remote forwarding (local0 or authpriv).
func (o LoggingRemoteForwardingLogOutput) Facility() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingRemoteForwardingLog) string { return v.Facility }).(pulumi.StringOutput)
}

// The syslog severity for remote forwarding.
func (o LoggingRemoteForwardingLogOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingRemoteForwardingLog) string { return v.Severity }).(pulumi.StringOutput)
}

type LoggingRemoteForwardingLogArrayOutput struct{ *pulumi.OutputState }

func (LoggingRemoteForwardingLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingRemoteForwardingLog)(nil)).Elem()
}

func (o LoggingRemoteForwardingLogArrayOutput) ToLoggingRemoteForwardingLogArrayOutput() LoggingRemoteForwardingLogArrayOutput {
	return o
}

func (o LoggingRemoteForwardingLogArrayOutput) ToLoggingRemoteForwardingLogArrayOutputWithContext(ctx context.Context) LoggingRemoteForwardingLogArrayOutput {
	return o
}

func (o LoggingRemoteForwardingLogArrayOutput) Index(i pulumi.IntInput) LoggingRemoteForwardingLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingRemoteForwardingLog {
		return vs[0].([]LoggingRemoteForwardingLog)[vs[1].(int)]
	}).(LoggingRemoteForwardingLogOutput)
}

type LoggingServer struct {
	// The IP address or hostname of the remote logging server.
	Address string `pulumi:"address"`
	// Whether authentication is enabled for TCP protocol.
	Authentication *bool `pulumi:"authentication"`
	// Log selectors for this server, specifying facility and severity.
	Logs []LoggingServerLog `pulumi:"logs"`
	// The port number for the remote logging server (1-65535).
	Port int `pulumi:"port"`
	// The protocol used for logging (tcp or udp).
	Protocol string `pulumi:"protocol"`
}

// LoggingServerInput is an input type that accepts LoggingServerArgs and LoggingServerOutput values.
// You can construct a concrete instance of `LoggingServerInput` via:
//
//	LoggingServerArgs{...}
type LoggingServerInput interface {
	pulumi.Input

	ToLoggingServerOutput() LoggingServerOutput
	ToLoggingServerOutputWithContext(context.Context) LoggingServerOutput
}

type LoggingServerArgs struct {
	// The IP address or hostname of the remote logging server.
	Address pulumi.StringInput `pulumi:"address"`
	// Whether authentication is enabled for TCP protocol.
	Authentication pulumi.BoolPtrInput `pulumi:"authentication"`
	// Log selectors for this server, specifying facility and severity.
	Logs LoggingServerLogArrayInput `pulumi:"logs"`
	// The port number for the remote logging server (1-65535).
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol used for logging (tcp or udp).
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (LoggingServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingServer)(nil)).Elem()
}

func (i LoggingServerArgs) ToLoggingServerOutput() LoggingServerOutput {
	return i.ToLoggingServerOutputWithContext(context.Background())
}

func (i LoggingServerArgs) ToLoggingServerOutputWithContext(ctx context.Context) LoggingServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingServerOutput)
}

// LoggingServerArrayInput is an input type that accepts LoggingServerArray and LoggingServerArrayOutput values.
// You can construct a concrete instance of `LoggingServerArrayInput` via:
//
//	LoggingServerArray{ LoggingServerArgs{...} }
type LoggingServerArrayInput interface {
	pulumi.Input

	ToLoggingServerArrayOutput() LoggingServerArrayOutput
	ToLoggingServerArrayOutputWithContext(context.Context) LoggingServerArrayOutput
}

type LoggingServerArray []LoggingServerInput

func (LoggingServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingServer)(nil)).Elem()
}

func (i LoggingServerArray) ToLoggingServerArrayOutput() LoggingServerArrayOutput {
	return i.ToLoggingServerArrayOutputWithContext(context.Background())
}

func (i LoggingServerArray) ToLoggingServerArrayOutputWithContext(ctx context.Context) LoggingServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingServerArrayOutput)
}

type LoggingServerOutput struct{ *pulumi.OutputState }

func (LoggingServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingServer)(nil)).Elem()
}

func (o LoggingServerOutput) ToLoggingServerOutput() LoggingServerOutput {
	return o
}

func (o LoggingServerOutput) ToLoggingServerOutputWithContext(ctx context.Context) LoggingServerOutput {
	return o
}

// The IP address or hostname of the remote logging server.
func (o LoggingServerOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingServer) string { return v.Address }).(pulumi.StringOutput)
}

// Whether authentication is enabled for TCP protocol.
func (o LoggingServerOutput) Authentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoggingServer) *bool { return v.Authentication }).(pulumi.BoolPtrOutput)
}

// Log selectors for this server, specifying facility and severity.
func (o LoggingServerOutput) Logs() LoggingServerLogArrayOutput {
	return o.ApplyT(func(v LoggingServer) []LoggingServerLog { return v.Logs }).(LoggingServerLogArrayOutput)
}

// The port number for the remote logging server (1-65535).
func (o LoggingServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingServer) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol used for logging (tcp or udp).
func (o LoggingServerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingServer) string { return v.Protocol }).(pulumi.StringOutput)
}

type LoggingServerArrayOutput struct{ *pulumi.OutputState }

func (LoggingServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingServer)(nil)).Elem()
}

func (o LoggingServerArrayOutput) ToLoggingServerArrayOutput() LoggingServerArrayOutput {
	return o
}

func (o LoggingServerArrayOutput) ToLoggingServerArrayOutputWithContext(ctx context.Context) LoggingServerArrayOutput {
	return o
}

func (o LoggingServerArrayOutput) Index(i pulumi.IntInput) LoggingServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingServer {
		return vs[0].([]LoggingServer)[vs[1].(int)]
	}).(LoggingServerOutput)
}

type LoggingServerLog struct {
	// The syslog facility (e.g., local0, authpriv).
	Facility string `pulumi:"facility"`
	// The syslog severity (e.g., debug, informational, notice, warning, error, critical, alert, emergency).
	Severity string `pulumi:"severity"`
}

// LoggingServerLogInput is an input type that accepts LoggingServerLogArgs and LoggingServerLogOutput values.
// You can construct a concrete instance of `LoggingServerLogInput` via:
//
//	LoggingServerLogArgs{...}
type LoggingServerLogInput interface {
	pulumi.Input

	ToLoggingServerLogOutput() LoggingServerLogOutput
	ToLoggingServerLogOutputWithContext(context.Context) LoggingServerLogOutput
}

type LoggingServerLogArgs struct {
	// The syslog facility (e.g., local0, authpriv).
	Facility pulumi.StringInput `pulumi:"facility"`
	// The syslog severity (e.g., debug, informational, notice, warning, error, critical, alert, emergency).
	Severity pulumi.StringInput `pulumi:"severity"`
}

func (LoggingServerLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingServerLog)(nil)).Elem()
}

func (i LoggingServerLogArgs) ToLoggingServerLogOutput() LoggingServerLogOutput {
	return i.ToLoggingServerLogOutputWithContext(context.Background())
}

func (i LoggingServerLogArgs) ToLoggingServerLogOutputWithContext(ctx context.Context) LoggingServerLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingServerLogOutput)
}

// LoggingServerLogArrayInput is an input type that accepts LoggingServerLogArray and LoggingServerLogArrayOutput values.
// You can construct a concrete instance of `LoggingServerLogArrayInput` via:
//
//	LoggingServerLogArray{ LoggingServerLogArgs{...} }
type LoggingServerLogArrayInput interface {
	pulumi.Input

	ToLoggingServerLogArrayOutput() LoggingServerLogArrayOutput
	ToLoggingServerLogArrayOutputWithContext(context.Context) LoggingServerLogArrayOutput
}

type LoggingServerLogArray []LoggingServerLogInput

func (LoggingServerLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingServerLog)(nil)).Elem()
}

func (i LoggingServerLogArray) ToLoggingServerLogArrayOutput() LoggingServerLogArrayOutput {
	return i.ToLoggingServerLogArrayOutputWithContext(context.Background())
}

func (i LoggingServerLogArray) ToLoggingServerLogArrayOutputWithContext(ctx context.Context) LoggingServerLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingServerLogArrayOutput)
}

type LoggingServerLogOutput struct{ *pulumi.OutputState }

func (LoggingServerLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingServerLog)(nil)).Elem()
}

func (o LoggingServerLogOutput) ToLoggingServerLogOutput() LoggingServerLogOutput {
	return o
}

func (o LoggingServerLogOutput) ToLoggingServerLogOutputWithContext(ctx context.Context) LoggingServerLogOutput {
	return o
}

// The syslog facility (e.g., local0, authpriv).
func (o LoggingServerLogOutput) Facility() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingServerLog) string { return v.Facility }).(pulumi.StringOutput)
}

// The syslog severity (e.g., debug, informational, notice, warning, error, critical, alert, emergency).
func (o LoggingServerLogOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingServerLog) string { return v.Severity }).(pulumi.StringOutput)
}

type LoggingServerLogArrayOutput struct{ *pulumi.OutputState }

func (LoggingServerLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingServerLog)(nil)).Elem()
}

func (o LoggingServerLogArrayOutput) ToLoggingServerLogArrayOutput() LoggingServerLogArrayOutput {
	return o
}

func (o LoggingServerLogArrayOutput) ToLoggingServerLogArrayOutputWithContext(ctx context.Context) LoggingServerLogArrayOutput {
	return o
}

func (o LoggingServerLogArrayOutput) Index(i pulumi.IntInput) LoggingServerLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingServerLog {
		return vs[0].([]LoggingServerLog)[vs[1].(int)]
	}).(LoggingServerLogOutput)
}

type LoggingTls struct {
	// TLS certificate for secure logging.
	Certificate string `pulumi:"certificate"`
	// TLS private key for secure logging (sensitive).
	Key string `pulumi:"key"`
}

// LoggingTlsInput is an input type that accepts LoggingTlsArgs and LoggingTlsOutput values.
// You can construct a concrete instance of `LoggingTlsInput` via:
//
//	LoggingTlsArgs{...}
type LoggingTlsInput interface {
	pulumi.Input

	ToLoggingTlsOutput() LoggingTlsOutput
	ToLoggingTlsOutputWithContext(context.Context) LoggingTlsOutput
}

type LoggingTlsArgs struct {
	// TLS certificate for secure logging.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// TLS private key for secure logging (sensitive).
	Key pulumi.StringInput `pulumi:"key"`
}

func (LoggingTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingTls)(nil)).Elem()
}

func (i LoggingTlsArgs) ToLoggingTlsOutput() LoggingTlsOutput {
	return i.ToLoggingTlsOutputWithContext(context.Background())
}

func (i LoggingTlsArgs) ToLoggingTlsOutputWithContext(ctx context.Context) LoggingTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingTlsOutput)
}

func (i LoggingTlsArgs) ToLoggingTlsPtrOutput() LoggingTlsPtrOutput {
	return i.ToLoggingTlsPtrOutputWithContext(context.Background())
}

func (i LoggingTlsArgs) ToLoggingTlsPtrOutputWithContext(ctx context.Context) LoggingTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingTlsOutput).ToLoggingTlsPtrOutputWithContext(ctx)
}

// LoggingTlsPtrInput is an input type that accepts LoggingTlsArgs, LoggingTlsPtr and LoggingTlsPtrOutput values.
// You can construct a concrete instance of `LoggingTlsPtrInput` via:
//
//	        LoggingTlsArgs{...}
//
//	or:
//
//	        nil
type LoggingTlsPtrInput interface {
	pulumi.Input

	ToLoggingTlsPtrOutput() LoggingTlsPtrOutput
	ToLoggingTlsPtrOutputWithContext(context.Context) LoggingTlsPtrOutput
}

type loggingTlsPtrType LoggingTlsArgs

func LoggingTlsPtr(v *LoggingTlsArgs) LoggingTlsPtrInput {
	return (*loggingTlsPtrType)(v)
}

func (*loggingTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingTls)(nil)).Elem()
}

func (i *loggingTlsPtrType) ToLoggingTlsPtrOutput() LoggingTlsPtrOutput {
	return i.ToLoggingTlsPtrOutputWithContext(context.Background())
}

func (i *loggingTlsPtrType) ToLoggingTlsPtrOutputWithContext(ctx context.Context) LoggingTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingTlsPtrOutput)
}

type LoggingTlsOutput struct{ *pulumi.OutputState }

func (LoggingTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingTls)(nil)).Elem()
}

func (o LoggingTlsOutput) ToLoggingTlsOutput() LoggingTlsOutput {
	return o
}

func (o LoggingTlsOutput) ToLoggingTlsOutputWithContext(ctx context.Context) LoggingTlsOutput {
	return o
}

func (o LoggingTlsOutput) ToLoggingTlsPtrOutput() LoggingTlsPtrOutput {
	return o.ToLoggingTlsPtrOutputWithContext(context.Background())
}

func (o LoggingTlsOutput) ToLoggingTlsPtrOutputWithContext(ctx context.Context) LoggingTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoggingTls) *LoggingTls {
		return &v
	}).(LoggingTlsPtrOutput)
}

// TLS certificate for secure logging.
func (o LoggingTlsOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingTls) string { return v.Certificate }).(pulumi.StringOutput)
}

// TLS private key for secure logging (sensitive).
func (o LoggingTlsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingTls) string { return v.Key }).(pulumi.StringOutput)
}

type LoggingTlsPtrOutput struct{ *pulumi.OutputState }

func (LoggingTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingTls)(nil)).Elem()
}

func (o LoggingTlsPtrOutput) ToLoggingTlsPtrOutput() LoggingTlsPtrOutput {
	return o
}

func (o LoggingTlsPtrOutput) ToLoggingTlsPtrOutputWithContext(ctx context.Context) LoggingTlsPtrOutput {
	return o
}

func (o LoggingTlsPtrOutput) Elem() LoggingTlsOutput {
	return o.ApplyT(func(v *LoggingTls) LoggingTls {
		if v != nil {
			return *v
		}
		var ret LoggingTls
		return ret
	}).(LoggingTlsOutput)
}

// TLS certificate for secure logging.
func (o LoggingTlsPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingTls) *string {
		if v == nil {
			return nil
		}
		return &v.Certificate
	}).(pulumi.StringPtrOutput)
}

// TLS private key for secure logging (sensitive).
func (o LoggingTlsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingTls) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

type GetDeviceInfoControllerImage struct {
	// OS of the ISO image
	Os string `pulumi:"os"`
	// Service number of the ISO image
	Service string `pulumi:"service"`
	// Version of the ISO image
	Version string `pulumi:"version"`
}

// GetDeviceInfoControllerImageInput is an input type that accepts GetDeviceInfoControllerImageArgs and GetDeviceInfoControllerImageOutput values.
// You can construct a concrete instance of `GetDeviceInfoControllerImageInput` via:
//
//	GetDeviceInfoControllerImageArgs{...}
type GetDeviceInfoControllerImageInput interface {
	pulumi.Input

	ToGetDeviceInfoControllerImageOutput() GetDeviceInfoControllerImageOutput
	ToGetDeviceInfoControllerImageOutputWithContext(context.Context) GetDeviceInfoControllerImageOutput
}

type GetDeviceInfoControllerImageArgs struct {
	// OS of the ISO image
	Os pulumi.StringInput `pulumi:"os"`
	// Service number of the ISO image
	Service pulumi.StringInput `pulumi:"service"`
	// Version of the ISO image
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetDeviceInfoControllerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoControllerImage)(nil)).Elem()
}

func (i GetDeviceInfoControllerImageArgs) ToGetDeviceInfoControllerImageOutput() GetDeviceInfoControllerImageOutput {
	return i.ToGetDeviceInfoControllerImageOutputWithContext(context.Background())
}

func (i GetDeviceInfoControllerImageArgs) ToGetDeviceInfoControllerImageOutputWithContext(ctx context.Context) GetDeviceInfoControllerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoControllerImageOutput)
}

// GetDeviceInfoControllerImageArrayInput is an input type that accepts GetDeviceInfoControllerImageArray and GetDeviceInfoControllerImageArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoControllerImageArrayInput` via:
//
//	GetDeviceInfoControllerImageArray{ GetDeviceInfoControllerImageArgs{...} }
type GetDeviceInfoControllerImageArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoControllerImageArrayOutput() GetDeviceInfoControllerImageArrayOutput
	ToGetDeviceInfoControllerImageArrayOutputWithContext(context.Context) GetDeviceInfoControllerImageArrayOutput
}

type GetDeviceInfoControllerImageArray []GetDeviceInfoControllerImageInput

func (GetDeviceInfoControllerImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoControllerImage)(nil)).Elem()
}

func (i GetDeviceInfoControllerImageArray) ToGetDeviceInfoControllerImageArrayOutput() GetDeviceInfoControllerImageArrayOutput {
	return i.ToGetDeviceInfoControllerImageArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoControllerImageArray) ToGetDeviceInfoControllerImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoControllerImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoControllerImageArrayOutput)
}

type GetDeviceInfoControllerImageOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoControllerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoControllerImage)(nil)).Elem()
}

func (o GetDeviceInfoControllerImageOutput) ToGetDeviceInfoControllerImageOutput() GetDeviceInfoControllerImageOutput {
	return o
}

func (o GetDeviceInfoControllerImageOutput) ToGetDeviceInfoControllerImageOutputWithContext(ctx context.Context) GetDeviceInfoControllerImageOutput {
	return o
}

// OS of the ISO image
func (o GetDeviceInfoControllerImageOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoControllerImage) string { return v.Os }).(pulumi.StringOutput)
}

// Service number of the ISO image
func (o GetDeviceInfoControllerImageOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoControllerImage) string { return v.Service }).(pulumi.StringOutput)
}

// Version of the ISO image
func (o GetDeviceInfoControllerImageOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoControllerImage) string { return v.Version }).(pulumi.StringOutput)
}

type GetDeviceInfoControllerImageArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoControllerImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoControllerImage)(nil)).Elem()
}

func (o GetDeviceInfoControllerImageArrayOutput) ToGetDeviceInfoControllerImageArrayOutput() GetDeviceInfoControllerImageArrayOutput {
	return o
}

func (o GetDeviceInfoControllerImageArrayOutput) ToGetDeviceInfoControllerImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoControllerImageArrayOutput {
	return o
}

func (o GetDeviceInfoControllerImageArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoControllerImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoControllerImage {
		return vs[0].([]GetDeviceInfoControllerImage)[vs[1].(int)]
	}).(GetDeviceInfoControllerImageOutput)
}

type GetDeviceInfoInterface struct {
	// Interface enabled
	Enabled    bool              `pulumi:"enabled"`
	L3Counters map[string]string `pulumi:"l3Counters"`
	// Interface mtu
	Mtu int `pulumi:"mtu"`
	// Interface name
	Name string `pulumi:"name"`
	// Interface operational status
	OperationalStatus string `pulumi:"operationalStatus"`
	// Interface port speed
	PortSpeed string `pulumi:"portSpeed"`
	// Interface type
	Type string `pulumi:"type"`
}

// GetDeviceInfoInterfaceInput is an input type that accepts GetDeviceInfoInterfaceArgs and GetDeviceInfoInterfaceOutput values.
// You can construct a concrete instance of `GetDeviceInfoInterfaceInput` via:
//
//	GetDeviceInfoInterfaceArgs{...}
type GetDeviceInfoInterfaceInput interface {
	pulumi.Input

	ToGetDeviceInfoInterfaceOutput() GetDeviceInfoInterfaceOutput
	ToGetDeviceInfoInterfaceOutputWithContext(context.Context) GetDeviceInfoInterfaceOutput
}

type GetDeviceInfoInterfaceArgs struct {
	// Interface enabled
	Enabled    pulumi.BoolInput      `pulumi:"enabled"`
	L3Counters pulumi.StringMapInput `pulumi:"l3Counters"`
	// Interface mtu
	Mtu pulumi.IntInput `pulumi:"mtu"`
	// Interface name
	Name pulumi.StringInput `pulumi:"name"`
	// Interface operational status
	OperationalStatus pulumi.StringInput `pulumi:"operationalStatus"`
	// Interface port speed
	PortSpeed pulumi.StringInput `pulumi:"portSpeed"`
	// Interface type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDeviceInfoInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoInterface)(nil)).Elem()
}

func (i GetDeviceInfoInterfaceArgs) ToGetDeviceInfoInterfaceOutput() GetDeviceInfoInterfaceOutput {
	return i.ToGetDeviceInfoInterfaceOutputWithContext(context.Background())
}

func (i GetDeviceInfoInterfaceArgs) ToGetDeviceInfoInterfaceOutputWithContext(ctx context.Context) GetDeviceInfoInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoInterfaceOutput)
}

// GetDeviceInfoInterfaceArrayInput is an input type that accepts GetDeviceInfoInterfaceArray and GetDeviceInfoInterfaceArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoInterfaceArrayInput` via:
//
//	GetDeviceInfoInterfaceArray{ GetDeviceInfoInterfaceArgs{...} }
type GetDeviceInfoInterfaceArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoInterfaceArrayOutput() GetDeviceInfoInterfaceArrayOutput
	ToGetDeviceInfoInterfaceArrayOutputWithContext(context.Context) GetDeviceInfoInterfaceArrayOutput
}

type GetDeviceInfoInterfaceArray []GetDeviceInfoInterfaceInput

func (GetDeviceInfoInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoInterface)(nil)).Elem()
}

func (i GetDeviceInfoInterfaceArray) ToGetDeviceInfoInterfaceArrayOutput() GetDeviceInfoInterfaceArrayOutput {
	return i.ToGetDeviceInfoInterfaceArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoInterfaceArray) ToGetDeviceInfoInterfaceArrayOutputWithContext(ctx context.Context) GetDeviceInfoInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoInterfaceArrayOutput)
}

type GetDeviceInfoInterfaceOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoInterface)(nil)).Elem()
}

func (o GetDeviceInfoInterfaceOutput) ToGetDeviceInfoInterfaceOutput() GetDeviceInfoInterfaceOutput {
	return o
}

func (o GetDeviceInfoInterfaceOutput) ToGetDeviceInfoInterfaceOutputWithContext(ctx context.Context) GetDeviceInfoInterfaceOutput {
	return o
}

// Interface enabled
func (o GetDeviceInfoInterfaceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetDeviceInfoInterfaceOutput) L3Counters() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) map[string]string { return v.L3Counters }).(pulumi.StringMapOutput)
}

// Interface mtu
func (o GetDeviceInfoInterfaceOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) int { return v.Mtu }).(pulumi.IntOutput)
}

// Interface name
func (o GetDeviceInfoInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) string { return v.Name }).(pulumi.StringOutput)
}

// Interface operational status
func (o GetDeviceInfoInterfaceOutput) OperationalStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) string { return v.OperationalStatus }).(pulumi.StringOutput)
}

// Interface port speed
func (o GetDeviceInfoInterfaceOutput) PortSpeed() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) string { return v.PortSpeed }).(pulumi.StringOutput)
}

// Interface type
func (o GetDeviceInfoInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoInterface) string { return v.Type }).(pulumi.StringOutput)
}

type GetDeviceInfoInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoInterface)(nil)).Elem()
}

func (o GetDeviceInfoInterfaceArrayOutput) ToGetDeviceInfoInterfaceArrayOutput() GetDeviceInfoInterfaceArrayOutput {
	return o
}

func (o GetDeviceInfoInterfaceArrayOutput) ToGetDeviceInfoInterfaceArrayOutputWithContext(ctx context.Context) GetDeviceInfoInterfaceArrayOutput {
	return o
}

func (o GetDeviceInfoInterfaceArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoInterface {
		return vs[0].([]GetDeviceInfoInterface)[vs[1].(int)]
	}).(GetDeviceInfoInterfaceOutput)
}

type GetDeviceInfoPartitionImage struct {
	// OS of the ISO image
	Os string `pulumi:"os"`
	// Service number of the ISO image
	Service string `pulumi:"service"`
	// Version of the ISO image
	Version string `pulumi:"version"`
}

// GetDeviceInfoPartitionImageInput is an input type that accepts GetDeviceInfoPartitionImageArgs and GetDeviceInfoPartitionImageOutput values.
// You can construct a concrete instance of `GetDeviceInfoPartitionImageInput` via:
//
//	GetDeviceInfoPartitionImageArgs{...}
type GetDeviceInfoPartitionImageInput interface {
	pulumi.Input

	ToGetDeviceInfoPartitionImageOutput() GetDeviceInfoPartitionImageOutput
	ToGetDeviceInfoPartitionImageOutputWithContext(context.Context) GetDeviceInfoPartitionImageOutput
}

type GetDeviceInfoPartitionImageArgs struct {
	// OS of the ISO image
	Os pulumi.StringInput `pulumi:"os"`
	// Service number of the ISO image
	Service pulumi.StringInput `pulumi:"service"`
	// Version of the ISO image
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetDeviceInfoPartitionImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoPartitionImage)(nil)).Elem()
}

func (i GetDeviceInfoPartitionImageArgs) ToGetDeviceInfoPartitionImageOutput() GetDeviceInfoPartitionImageOutput {
	return i.ToGetDeviceInfoPartitionImageOutputWithContext(context.Background())
}

func (i GetDeviceInfoPartitionImageArgs) ToGetDeviceInfoPartitionImageOutputWithContext(ctx context.Context) GetDeviceInfoPartitionImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoPartitionImageOutput)
}

// GetDeviceInfoPartitionImageArrayInput is an input type that accepts GetDeviceInfoPartitionImageArray and GetDeviceInfoPartitionImageArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoPartitionImageArrayInput` via:
//
//	GetDeviceInfoPartitionImageArray{ GetDeviceInfoPartitionImageArgs{...} }
type GetDeviceInfoPartitionImageArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoPartitionImageArrayOutput() GetDeviceInfoPartitionImageArrayOutput
	ToGetDeviceInfoPartitionImageArrayOutputWithContext(context.Context) GetDeviceInfoPartitionImageArrayOutput
}

type GetDeviceInfoPartitionImageArray []GetDeviceInfoPartitionImageInput

func (GetDeviceInfoPartitionImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoPartitionImage)(nil)).Elem()
}

func (i GetDeviceInfoPartitionImageArray) ToGetDeviceInfoPartitionImageArrayOutput() GetDeviceInfoPartitionImageArrayOutput {
	return i.ToGetDeviceInfoPartitionImageArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoPartitionImageArray) ToGetDeviceInfoPartitionImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoPartitionImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoPartitionImageArrayOutput)
}

type GetDeviceInfoPartitionImageOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoPartitionImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoPartitionImage)(nil)).Elem()
}

func (o GetDeviceInfoPartitionImageOutput) ToGetDeviceInfoPartitionImageOutput() GetDeviceInfoPartitionImageOutput {
	return o
}

func (o GetDeviceInfoPartitionImageOutput) ToGetDeviceInfoPartitionImageOutputWithContext(ctx context.Context) GetDeviceInfoPartitionImageOutput {
	return o
}

// OS of the ISO image
func (o GetDeviceInfoPartitionImageOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoPartitionImage) string { return v.Os }).(pulumi.StringOutput)
}

// Service number of the ISO image
func (o GetDeviceInfoPartitionImageOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoPartitionImage) string { return v.Service }).(pulumi.StringOutput)
}

// Version of the ISO image
func (o GetDeviceInfoPartitionImageOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoPartitionImage) string { return v.Version }).(pulumi.StringOutput)
}

type GetDeviceInfoPartitionImageArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoPartitionImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoPartitionImage)(nil)).Elem()
}

func (o GetDeviceInfoPartitionImageArrayOutput) ToGetDeviceInfoPartitionImageArrayOutput() GetDeviceInfoPartitionImageArrayOutput {
	return o
}

func (o GetDeviceInfoPartitionImageArrayOutput) ToGetDeviceInfoPartitionImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoPartitionImageArrayOutput {
	return o
}

func (o GetDeviceInfoPartitionImageArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoPartitionImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoPartitionImage {
		return vs[0].([]GetDeviceInfoPartitionImage)[vs[1].(int)]
	}).(GetDeviceInfoPartitionImageOutput)
}

type GetDeviceInfoTenantImage struct {
	// Image Date
	Date string `pulumi:"date"`
	// Image name
	ImageName string `pulumi:"imageName"`
	// In use
	InUse bool `pulumi:"inUse"`
	// Image Size
	Size string `pulumi:"size"`
	// Image Status
	Status string `pulumi:"status"`
	// Image Type
	Type string `pulumi:"type"`
}

// GetDeviceInfoTenantImageInput is an input type that accepts GetDeviceInfoTenantImageArgs and GetDeviceInfoTenantImageOutput values.
// You can construct a concrete instance of `GetDeviceInfoTenantImageInput` via:
//
//	GetDeviceInfoTenantImageArgs{...}
type GetDeviceInfoTenantImageInput interface {
	pulumi.Input

	ToGetDeviceInfoTenantImageOutput() GetDeviceInfoTenantImageOutput
	ToGetDeviceInfoTenantImageOutputWithContext(context.Context) GetDeviceInfoTenantImageOutput
}

type GetDeviceInfoTenantImageArgs struct {
	// Image Date
	Date pulumi.StringInput `pulumi:"date"`
	// Image name
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// In use
	InUse pulumi.BoolInput `pulumi:"inUse"`
	// Image Size
	Size pulumi.StringInput `pulumi:"size"`
	// Image Status
	Status pulumi.StringInput `pulumi:"status"`
	// Image Type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDeviceInfoTenantImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoTenantImage)(nil)).Elem()
}

func (i GetDeviceInfoTenantImageArgs) ToGetDeviceInfoTenantImageOutput() GetDeviceInfoTenantImageOutput {
	return i.ToGetDeviceInfoTenantImageOutputWithContext(context.Background())
}

func (i GetDeviceInfoTenantImageArgs) ToGetDeviceInfoTenantImageOutputWithContext(ctx context.Context) GetDeviceInfoTenantImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoTenantImageOutput)
}

// GetDeviceInfoTenantImageArrayInput is an input type that accepts GetDeviceInfoTenantImageArray and GetDeviceInfoTenantImageArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoTenantImageArrayInput` via:
//
//	GetDeviceInfoTenantImageArray{ GetDeviceInfoTenantImageArgs{...} }
type GetDeviceInfoTenantImageArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoTenantImageArrayOutput() GetDeviceInfoTenantImageArrayOutput
	ToGetDeviceInfoTenantImageArrayOutputWithContext(context.Context) GetDeviceInfoTenantImageArrayOutput
}

type GetDeviceInfoTenantImageArray []GetDeviceInfoTenantImageInput

func (GetDeviceInfoTenantImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoTenantImage)(nil)).Elem()
}

func (i GetDeviceInfoTenantImageArray) ToGetDeviceInfoTenantImageArrayOutput() GetDeviceInfoTenantImageArrayOutput {
	return i.ToGetDeviceInfoTenantImageArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoTenantImageArray) ToGetDeviceInfoTenantImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoTenantImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoTenantImageArrayOutput)
}

type GetDeviceInfoTenantImageOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoTenantImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoTenantImage)(nil)).Elem()
}

func (o GetDeviceInfoTenantImageOutput) ToGetDeviceInfoTenantImageOutput() GetDeviceInfoTenantImageOutput {
	return o
}

func (o GetDeviceInfoTenantImageOutput) ToGetDeviceInfoTenantImageOutputWithContext(ctx context.Context) GetDeviceInfoTenantImageOutput {
	return o
}

// Image Date
func (o GetDeviceInfoTenantImageOutput) Date() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.Date }).(pulumi.StringOutput)
}

// Image name
func (o GetDeviceInfoTenantImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.ImageName }).(pulumi.StringOutput)
}

// In use
func (o GetDeviceInfoTenantImageOutput) InUse() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) bool { return v.InUse }).(pulumi.BoolOutput)
}

// Image Size
func (o GetDeviceInfoTenantImageOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.Size }).(pulumi.StringOutput)
}

// Image Status
func (o GetDeviceInfoTenantImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.Status }).(pulumi.StringOutput)
}

// Image Type
func (o GetDeviceInfoTenantImageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoTenantImage) string { return v.Type }).(pulumi.StringOutput)
}

type GetDeviceInfoTenantImageArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoTenantImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoTenantImage)(nil)).Elem()
}

func (o GetDeviceInfoTenantImageArrayOutput) ToGetDeviceInfoTenantImageArrayOutput() GetDeviceInfoTenantImageArrayOutput {
	return o
}

func (o GetDeviceInfoTenantImageArrayOutput) ToGetDeviceInfoTenantImageArrayOutputWithContext(ctx context.Context) GetDeviceInfoTenantImageArrayOutput {
	return o
}

func (o GetDeviceInfoTenantImageArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoTenantImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoTenantImage {
		return vs[0].([]GetDeviceInfoTenantImage)[vs[1].(int)]
	}).(GetDeviceInfoTenantImageOutput)
}

type GetDeviceInfoVlan struct {
	// Vlan id
	VlanId int `pulumi:"vlanId"`
	// Vlan name
	VlanName string `pulumi:"vlanName"`
}

// GetDeviceInfoVlanInput is an input type that accepts GetDeviceInfoVlanArgs and GetDeviceInfoVlanOutput values.
// You can construct a concrete instance of `GetDeviceInfoVlanInput` via:
//
//	GetDeviceInfoVlanArgs{...}
type GetDeviceInfoVlanInput interface {
	pulumi.Input

	ToGetDeviceInfoVlanOutput() GetDeviceInfoVlanOutput
	ToGetDeviceInfoVlanOutputWithContext(context.Context) GetDeviceInfoVlanOutput
}

type GetDeviceInfoVlanArgs struct {
	// Vlan id
	VlanId pulumi.IntInput `pulumi:"vlanId"`
	// Vlan name
	VlanName pulumi.StringInput `pulumi:"vlanName"`
}

func (GetDeviceInfoVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoVlan)(nil)).Elem()
}

func (i GetDeviceInfoVlanArgs) ToGetDeviceInfoVlanOutput() GetDeviceInfoVlanOutput {
	return i.ToGetDeviceInfoVlanOutputWithContext(context.Background())
}

func (i GetDeviceInfoVlanArgs) ToGetDeviceInfoVlanOutputWithContext(ctx context.Context) GetDeviceInfoVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoVlanOutput)
}

// GetDeviceInfoVlanArrayInput is an input type that accepts GetDeviceInfoVlanArray and GetDeviceInfoVlanArrayOutput values.
// You can construct a concrete instance of `GetDeviceInfoVlanArrayInput` via:
//
//	GetDeviceInfoVlanArray{ GetDeviceInfoVlanArgs{...} }
type GetDeviceInfoVlanArrayInput interface {
	pulumi.Input

	ToGetDeviceInfoVlanArrayOutput() GetDeviceInfoVlanArrayOutput
	ToGetDeviceInfoVlanArrayOutputWithContext(context.Context) GetDeviceInfoVlanArrayOutput
}

type GetDeviceInfoVlanArray []GetDeviceInfoVlanInput

func (GetDeviceInfoVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoVlan)(nil)).Elem()
}

func (i GetDeviceInfoVlanArray) ToGetDeviceInfoVlanArrayOutput() GetDeviceInfoVlanArrayOutput {
	return i.ToGetDeviceInfoVlanArrayOutputWithContext(context.Background())
}

func (i GetDeviceInfoVlanArray) ToGetDeviceInfoVlanArrayOutputWithContext(ctx context.Context) GetDeviceInfoVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInfoVlanArrayOutput)
}

type GetDeviceInfoVlanOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInfoVlan)(nil)).Elem()
}

func (o GetDeviceInfoVlanOutput) ToGetDeviceInfoVlanOutput() GetDeviceInfoVlanOutput {
	return o
}

func (o GetDeviceInfoVlanOutput) ToGetDeviceInfoVlanOutputWithContext(ctx context.Context) GetDeviceInfoVlanOutput {
	return o
}

// Vlan id
func (o GetDeviceInfoVlanOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeviceInfoVlan) int { return v.VlanId }).(pulumi.IntOutput)
}

// Vlan name
func (o GetDeviceInfoVlanOutput) VlanName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInfoVlan) string { return v.VlanName }).(pulumi.StringOutput)
}

type GetDeviceInfoVlanArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInfoVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInfoVlan)(nil)).Elem()
}

func (o GetDeviceInfoVlanArrayOutput) ToGetDeviceInfoVlanArrayOutput() GetDeviceInfoVlanArrayOutput {
	return o
}

func (o GetDeviceInfoVlanArrayOutput) ToGetDeviceInfoVlanArrayOutputWithContext(ctx context.Context) GetDeviceInfoVlanArrayOutput {
	return o
}

func (o GetDeviceInfoVlanArrayOutput) Index(i pulumi.IntInput) GetDeviceInfoVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInfoVlan {
		return vs[0].([]GetDeviceInfoVlan)[vs[1].(int)]
	}).(GetDeviceInfoVlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingCaBundleInput)(nil)).Elem(), LoggingCaBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingCaBundleArrayInput)(nil)).Elem(), LoggingCaBundleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingRemoteForwardingInput)(nil)).Elem(), LoggingRemoteForwardingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingRemoteForwardingPtrInput)(nil)).Elem(), LoggingRemoteForwardingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingRemoteForwardingFileInput)(nil)).Elem(), LoggingRemoteForwardingFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingRemoteForwardingFileArrayInput)(nil)).Elem(), LoggingRemoteForwardingFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingRemoteForwardingLogInput)(nil)).Elem(), LoggingRemoteForwardingLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingRemoteForwardingLogArrayInput)(nil)).Elem(), LoggingRemoteForwardingLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingServerInput)(nil)).Elem(), LoggingServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingServerArrayInput)(nil)).Elem(), LoggingServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingServerLogInput)(nil)).Elem(), LoggingServerLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingServerLogArrayInput)(nil)).Elem(), LoggingServerLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingTlsInput)(nil)).Elem(), LoggingTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingTlsPtrInput)(nil)).Elem(), LoggingTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoControllerImageInput)(nil)).Elem(), GetDeviceInfoControllerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoControllerImageArrayInput)(nil)).Elem(), GetDeviceInfoControllerImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoInterfaceInput)(nil)).Elem(), GetDeviceInfoInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoInterfaceArrayInput)(nil)).Elem(), GetDeviceInfoInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoPartitionImageInput)(nil)).Elem(), GetDeviceInfoPartitionImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoPartitionImageArrayInput)(nil)).Elem(), GetDeviceInfoPartitionImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoTenantImageInput)(nil)).Elem(), GetDeviceInfoTenantImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoTenantImageArrayInput)(nil)).Elem(), GetDeviceInfoTenantImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoVlanInput)(nil)).Elem(), GetDeviceInfoVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInfoVlanArrayInput)(nil)).Elem(), GetDeviceInfoVlanArray{})
	pulumi.RegisterOutputType(LoggingCaBundleOutput{})
	pulumi.RegisterOutputType(LoggingCaBundleArrayOutput{})
	pulumi.RegisterOutputType(LoggingRemoteForwardingOutput{})
	pulumi.RegisterOutputType(LoggingRemoteForwardingPtrOutput{})
	pulumi.RegisterOutputType(LoggingRemoteForwardingFileOutput{})
	pulumi.RegisterOutputType(LoggingRemoteForwardingFileArrayOutput{})
	pulumi.RegisterOutputType(LoggingRemoteForwardingLogOutput{})
	pulumi.RegisterOutputType(LoggingRemoteForwardingLogArrayOutput{})
	pulumi.RegisterOutputType(LoggingServerOutput{})
	pulumi.RegisterOutputType(LoggingServerArrayOutput{})
	pulumi.RegisterOutputType(LoggingServerLogOutput{})
	pulumi.RegisterOutputType(LoggingServerLogArrayOutput{})
	pulumi.RegisterOutputType(LoggingTlsOutput{})
	pulumi.RegisterOutputType(LoggingTlsPtrOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoControllerImageOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoControllerImageArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoInterfaceOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoPartitionImageOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoPartitionImageArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoTenantImageOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoTenantImageArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoVlanOutput{})
	pulumi.RegisterOutputType(GetDeviceInfoVlanArrayOutput{})
}
