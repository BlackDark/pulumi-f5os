// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to Manage network Link Aggregation Group (LAG) interfaces on F5OS systems like VELOS chassis partitions or rSeries platforms
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := f5os.NewLag(ctx, "test_lag", &f5os.LagArgs{
//				Name: pulumi.String("test_lag"),
//				Members: pulumi.StringArray{
//					pulumi.String("1.0"),
//				},
//				NativeVlan: pulumi.Int(5),
//				TrunkVlans: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # LAG Interface can be imported by specifying the LAG Interface name
//
// ```sh
// $ pulumi import f5os:index/lag:Lag test-import test-lag
// ```
type Lag struct {
	pulumi.CustomResourceState

	// The LACP interval of the interface to be created.
	Interval pulumi.StringOutput `pulumi:"interval"`
	// List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The LACP mode of the interface to be created.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Name of the Link Aggregation Group interface (LAG) interface to configure
	Name pulumi.StringOutput `pulumi:"name"`
	// Configures the VLAN ID to associate with LAG interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan pulumi.IntPtrOutput `pulumi:"nativeVlan"`
	// Operational state of the LAG interface.
	Status pulumi.StringOutput `pulumi:"status"`
	// Configures multiple VLAN IDs to associate with the LAG interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans pulumi.IntArrayOutput `pulumi:"trunkVlans"`
}

// NewLag registers a new resource with the given unique name, arguments, and options.
func NewLag(ctx *pulumi.Context,
	name string, args *LagArgs, opts ...pulumi.ResourceOption) (*Lag, error) {
	if args == nil {
		args = &LagArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Lag
	err := ctx.RegisterResource("f5os:index/lag:Lag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLag gets an existing Lag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LagState, opts ...pulumi.ResourceOption) (*Lag, error) {
	var resource Lag
	err := ctx.ReadResource("f5os:index/lag:Lag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lag resources.
type lagState struct {
	// The LACP interval of the interface to be created.
	Interval *string `pulumi:"interval"`
	// List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
	Members []string `pulumi:"members"`
	// The LACP mode of the interface to be created.
	Mode *string `pulumi:"mode"`
	// Name of the Link Aggregation Group interface (LAG) interface to configure
	Name *string `pulumi:"name"`
	// Configures the VLAN ID to associate with LAG interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan *int `pulumi:"nativeVlan"`
	// Operational state of the LAG interface.
	Status *string `pulumi:"status"`
	// Configures multiple VLAN IDs to associate with the LAG interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans []int `pulumi:"trunkVlans"`
}

type LagState struct {
	// The LACP interval of the interface to be created.
	Interval pulumi.StringPtrInput
	// List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
	Members pulumi.StringArrayInput
	// The LACP mode of the interface to be created.
	Mode pulumi.StringPtrInput
	// Name of the Link Aggregation Group interface (LAG) interface to configure
	Name pulumi.StringPtrInput
	// Configures the VLAN ID to associate with LAG interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan pulumi.IntPtrInput
	// Operational state of the LAG interface.
	Status pulumi.StringPtrInput
	// Configures multiple VLAN IDs to associate with the LAG interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans pulumi.IntArrayInput
}

func (LagState) ElementType() reflect.Type {
	return reflect.TypeOf((*lagState)(nil)).Elem()
}

type lagArgs struct {
	// The LACP interval of the interface to be created.
	Interval *string `pulumi:"interval"`
	// List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
	Members []string `pulumi:"members"`
	// The LACP mode of the interface to be created.
	Mode *string `pulumi:"mode"`
	// Name of the Link Aggregation Group interface (LAG) interface to configure
	Name *string `pulumi:"name"`
	// Configures the VLAN ID to associate with LAG interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan *int `pulumi:"nativeVlan"`
	// Configures multiple VLAN IDs to associate with the LAG interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans []int `pulumi:"trunkVlans"`
}

// The set of arguments for constructing a Lag resource.
type LagArgs struct {
	// The LACP interval of the interface to be created.
	Interval pulumi.StringPtrInput
	// List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
	Members pulumi.StringArrayInput
	// The LACP mode of the interface to be created.
	Mode pulumi.StringPtrInput
	// Name of the Link Aggregation Group interface (LAG) interface to configure
	Name pulumi.StringPtrInput
	// Configures the VLAN ID to associate with LAG interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan pulumi.IntPtrInput
	// Configures multiple VLAN IDs to associate with the LAG interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans pulumi.IntArrayInput
}

func (LagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lagArgs)(nil)).Elem()
}

type LagInput interface {
	pulumi.Input

	ToLagOutput() LagOutput
	ToLagOutputWithContext(ctx context.Context) LagOutput
}

func (*Lag) ElementType() reflect.Type {
	return reflect.TypeOf((**Lag)(nil)).Elem()
}

func (i *Lag) ToLagOutput() LagOutput {
	return i.ToLagOutputWithContext(context.Background())
}

func (i *Lag) ToLagOutputWithContext(ctx context.Context) LagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LagOutput)
}

// LagArrayInput is an input type that accepts LagArray and LagArrayOutput values.
// You can construct a concrete instance of `LagArrayInput` via:
//
//	LagArray{ LagArgs{...} }
type LagArrayInput interface {
	pulumi.Input

	ToLagArrayOutput() LagArrayOutput
	ToLagArrayOutputWithContext(context.Context) LagArrayOutput
}

type LagArray []LagInput

func (LagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lag)(nil)).Elem()
}

func (i LagArray) ToLagArrayOutput() LagArrayOutput {
	return i.ToLagArrayOutputWithContext(context.Background())
}

func (i LagArray) ToLagArrayOutputWithContext(ctx context.Context) LagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LagArrayOutput)
}

// LagMapInput is an input type that accepts LagMap and LagMapOutput values.
// You can construct a concrete instance of `LagMapInput` via:
//
//	LagMap{ "key": LagArgs{...} }
type LagMapInput interface {
	pulumi.Input

	ToLagMapOutput() LagMapOutput
	ToLagMapOutputWithContext(context.Context) LagMapOutput
}

type LagMap map[string]LagInput

func (LagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lag)(nil)).Elem()
}

func (i LagMap) ToLagMapOutput() LagMapOutput {
	return i.ToLagMapOutputWithContext(context.Background())
}

func (i LagMap) ToLagMapOutputWithContext(ctx context.Context) LagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LagMapOutput)
}

type LagOutput struct{ *pulumi.OutputState }

func (LagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lag)(nil)).Elem()
}

func (o LagOutput) ToLagOutput() LagOutput {
	return o
}

func (o LagOutput) ToLagOutputWithContext(ctx context.Context) LagOutput {
	return o
}

// The LACP interval of the interface to be created.
func (o LagOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *Lag) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

// List of physical interfaces that are members of the LAG. The members should be present on F5 platform and they shouldn't have any VLANs attached to it
func (o LagOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Lag) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The LACP mode of the interface to be created.
func (o LagOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Lag) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Name of the Link Aggregation Group interface (LAG) interface to configure
func (o LagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Lag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configures the VLAN ID to associate with LAG interface.
// The `nativeVlan` parameter is used for untagged traffic.
func (o LagOutput) NativeVlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Lag) pulumi.IntPtrOutput { return v.NativeVlan }).(pulumi.IntPtrOutput)
}

// Operational state of the LAG interface.
func (o LagOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Lag) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Configures multiple VLAN IDs to associate with the LAG interface.
// The `trunkVlans` parameter is used for tagged traffic
func (o LagOutput) TrunkVlans() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Lag) pulumi.IntArrayOutput { return v.TrunkVlans }).(pulumi.IntArrayOutput)
}

type LagArrayOutput struct{ *pulumi.OutputState }

func (LagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lag)(nil)).Elem()
}

func (o LagArrayOutput) ToLagArrayOutput() LagArrayOutput {
	return o
}

func (o LagArrayOutput) ToLagArrayOutputWithContext(ctx context.Context) LagArrayOutput {
	return o
}

func (o LagArrayOutput) Index(i pulumi.IntInput) LagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Lag {
		return vs[0].([]*Lag)[vs[1].(int)]
	}).(LagOutput)
}

type LagMapOutput struct{ *pulumi.OutputState }

func (LagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lag)(nil)).Elem()
}

func (o LagMapOutput) ToLagMapOutput() LagMapOutput {
	return o
}

func (o LagMapOutput) ToLagMapOutputWithContext(ctx context.Context) LagMapOutput {
	return o
}

func (o LagMapOutput) MapIndex(k pulumi.StringInput) LagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Lag {
		return vs[0].(map[string]*Lag)[vs[1].(string)]
	}).(LagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LagInput)(nil)).Elem(), &Lag{})
	pulumi.RegisterInputType(reflect.TypeOf((*LagArrayInput)(nil)).Elem(), LagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LagMapInput)(nil)).Elem(), LagMap{})
	pulumi.RegisterOutputType(LagOutput{})
	pulumi.RegisterOutputType(LagArrayOutput{})
	pulumi.RegisterOutputType(LagMapOutput{})
}
