// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"errors"
	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage NTP servers on F5OS based systems (Velos controller or rSeries appliance).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := f5os.NewNtpServer(ctx, "test", &f5os.NtpServerArgs{
//				Server:            pulumi.String("10.20.30.40"),
//				KeyId:             pulumi.Int(123),
//				Prefer:            pulumi.Bool(true),
//				Iburst:            pulumi.Bool(true),
//				NtpService:        pulumi.Bool(true),
//				NtpAuthentication: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NtpServer struct {
	pulumi.CustomResourceState

	// Enable iburst for faster synchronization.
	Iburst pulumi.BoolPtrOutput `pulumi:"iburst"`
	// Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
	KeyId pulumi.IntPtrOutput `pulumi:"keyId"`
	// Enable or disable NTP authentication.
	NtpAuthentication pulumi.BoolPtrOutput `pulumi:"ntpAuthentication"`
	// Enable or disable the NTP service.
	NtpService pulumi.BoolPtrOutput `pulumi:"ntpService"`
	// Set to true if this is the preferred server.
	Prefer pulumi.BoolPtrOutput `pulumi:"prefer"`
	// IPv4/IPv6 address or FQDN of the NTP server.
	Server pulumi.StringOutput `pulumi:"server"`
}

// NewNtpServer registers a new resource with the given unique name, arguments, and options.
func NewNtpServer(ctx *pulumi.Context,
	name string, args *NtpServerArgs, opts ...pulumi.ResourceOption) (*NtpServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NtpServer
	err := ctx.RegisterResource("f5os:index/ntpServer:NtpServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNtpServer gets an existing NtpServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNtpServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NtpServerState, opts ...pulumi.ResourceOption) (*NtpServer, error) {
	var resource NtpServer
	err := ctx.ReadResource("f5os:index/ntpServer:NtpServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NtpServer resources.
type ntpServerState struct {
	// Enable iburst for faster synchronization.
	Iburst *bool `pulumi:"iburst"`
	// Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
	KeyId *int `pulumi:"keyId"`
	// Enable or disable NTP authentication.
	NtpAuthentication *bool `pulumi:"ntpAuthentication"`
	// Enable or disable the NTP service.
	NtpService *bool `pulumi:"ntpService"`
	// Set to true if this is the preferred server.
	Prefer *bool `pulumi:"prefer"`
	// IPv4/IPv6 address or FQDN of the NTP server.
	Server *string `pulumi:"server"`
}

type NtpServerState struct {
	// Enable iburst for faster synchronization.
	Iburst pulumi.BoolPtrInput
	// Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
	KeyId pulumi.IntPtrInput
	// Enable or disable NTP authentication.
	NtpAuthentication pulumi.BoolPtrInput
	// Enable or disable the NTP service.
	NtpService pulumi.BoolPtrInput
	// Set to true if this is the preferred server.
	Prefer pulumi.BoolPtrInput
	// IPv4/IPv6 address or FQDN of the NTP server.
	Server pulumi.StringPtrInput
}

func (NtpServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ntpServerState)(nil)).Elem()
}

type ntpServerArgs struct {
	// Enable iburst for faster synchronization.
	Iburst *bool `pulumi:"iburst"`
	// Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
	KeyId *int `pulumi:"keyId"`
	// Enable or disable NTP authentication.
	NtpAuthentication *bool `pulumi:"ntpAuthentication"`
	// Enable or disable the NTP service.
	NtpService *bool `pulumi:"ntpService"`
	// Set to true if this is the preferred server.
	Prefer *bool `pulumi:"prefer"`
	// IPv4/IPv6 address or FQDN of the NTP server.
	Server string `pulumi:"server"`
}

// The set of arguments for constructing a NtpServer resource.
type NtpServerArgs struct {
	// Enable iburst for faster synchronization.
	Iburst pulumi.BoolPtrInput
	// Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
	KeyId pulumi.IntPtrInput
	// Enable or disable NTP authentication.
	NtpAuthentication pulumi.BoolPtrInput
	// Enable or disable the NTP service.
	NtpService pulumi.BoolPtrInput
	// Set to true if this is the preferred server.
	Prefer pulumi.BoolPtrInput
	// IPv4/IPv6 address or FQDN of the NTP server.
	Server pulumi.StringInput
}

func (NtpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ntpServerArgs)(nil)).Elem()
}

type NtpServerInput interface {
	pulumi.Input

	ToNtpServerOutput() NtpServerOutput
	ToNtpServerOutputWithContext(ctx context.Context) NtpServerOutput
}

func (*NtpServer) ElementType() reflect.Type {
	return reflect.TypeOf((**NtpServer)(nil)).Elem()
}

func (i *NtpServer) ToNtpServerOutput() NtpServerOutput {
	return i.ToNtpServerOutputWithContext(context.Background())
}

func (i *NtpServer) ToNtpServerOutputWithContext(ctx context.Context) NtpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerOutput)
}

// NtpServerArrayInput is an input type that accepts NtpServerArray and NtpServerArrayOutput values.
// You can construct a concrete instance of `NtpServerArrayInput` via:
//
//	NtpServerArray{ NtpServerArgs{...} }
type NtpServerArrayInput interface {
	pulumi.Input

	ToNtpServerArrayOutput() NtpServerArrayOutput
	ToNtpServerArrayOutputWithContext(context.Context) NtpServerArrayOutput
}

type NtpServerArray []NtpServerInput

func (NtpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NtpServer)(nil)).Elem()
}

func (i NtpServerArray) ToNtpServerArrayOutput() NtpServerArrayOutput {
	return i.ToNtpServerArrayOutputWithContext(context.Background())
}

func (i NtpServerArray) ToNtpServerArrayOutputWithContext(ctx context.Context) NtpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerArrayOutput)
}

// NtpServerMapInput is an input type that accepts NtpServerMap and NtpServerMapOutput values.
// You can construct a concrete instance of `NtpServerMapInput` via:
//
//	NtpServerMap{ "key": NtpServerArgs{...} }
type NtpServerMapInput interface {
	pulumi.Input

	ToNtpServerMapOutput() NtpServerMapOutput
	ToNtpServerMapOutputWithContext(context.Context) NtpServerMapOutput
}

type NtpServerMap map[string]NtpServerInput

func (NtpServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NtpServer)(nil)).Elem()
}

func (i NtpServerMap) ToNtpServerMapOutput() NtpServerMapOutput {
	return i.ToNtpServerMapOutputWithContext(context.Background())
}

func (i NtpServerMap) ToNtpServerMapOutputWithContext(ctx context.Context) NtpServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerMapOutput)
}

type NtpServerOutput struct{ *pulumi.OutputState }

func (NtpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NtpServer)(nil)).Elem()
}

func (o NtpServerOutput) ToNtpServerOutput() NtpServerOutput {
	return o
}

func (o NtpServerOutput) ToNtpServerOutputWithContext(ctx context.Context) NtpServerOutput {
	return o
}

// Enable iburst for faster synchronization.
func (o NtpServerOutput) Iburst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.BoolPtrOutput { return v.Iburst }).(pulumi.BoolPtrOutput)
}

// Key ID used for authentication with the NTP server. This should be configured with a key ID that has been already created on the system.
func (o NtpServerOutput) KeyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.IntPtrOutput { return v.KeyId }).(pulumi.IntPtrOutput)
}

// Enable or disable NTP authentication.
func (o NtpServerOutput) NtpAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.BoolPtrOutput { return v.NtpAuthentication }).(pulumi.BoolPtrOutput)
}

// Enable or disable the NTP service.
func (o NtpServerOutput) NtpService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.BoolPtrOutput { return v.NtpService }).(pulumi.BoolPtrOutput)
}

// Set to true if this is the preferred server.
func (o NtpServerOutput) Prefer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.BoolPtrOutput { return v.Prefer }).(pulumi.BoolPtrOutput)
}

// IPv4/IPv6 address or FQDN of the NTP server.
func (o NtpServerOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

type NtpServerArrayOutput struct{ *pulumi.OutputState }

func (NtpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NtpServer)(nil)).Elem()
}

func (o NtpServerArrayOutput) ToNtpServerArrayOutput() NtpServerArrayOutput {
	return o
}

func (o NtpServerArrayOutput) ToNtpServerArrayOutputWithContext(ctx context.Context) NtpServerArrayOutput {
	return o
}

func (o NtpServerArrayOutput) Index(i pulumi.IntInput) NtpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NtpServer {
		return vs[0].([]*NtpServer)[vs[1].(int)]
	}).(NtpServerOutput)
}

type NtpServerMapOutput struct{ *pulumi.OutputState }

func (NtpServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NtpServer)(nil)).Elem()
}

func (o NtpServerMapOutput) ToNtpServerMapOutput() NtpServerMapOutput {
	return o
}

func (o NtpServerMapOutput) ToNtpServerMapOutputWithContext(ctx context.Context) NtpServerMapOutput {
	return o
}

func (o NtpServerMapOutput) MapIndex(k pulumi.StringInput) NtpServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NtpServer {
		return vs[0].(map[string]*NtpServer)[vs[1].(string)]
	}).(NtpServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerInput)(nil)).Elem(), &NtpServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerArrayInput)(nil)).Elem(), NtpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerMapInput)(nil)).Elem(), NtpServerMap{})
	pulumi.RegisterOutputType(NtpServerOutput{})
	pulumi.RegisterOutputType(NtpServerArrayOutput{})
	pulumi.RegisterOutputType(NtpServerMapOutput{})
}
