// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Logging` resource manages logging configuration on F5OS devices, including remote servers, TLS, CA bundles, remote forwarding, and hostname inclusion.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := f5os.NewLogging(ctx, "logging", &f5os.LoggingArgs{
//				IncludeHostname: pulumi.Bool(false),
//				Servers: f5os.LoggingServerArray{
//					&f5os.LoggingServerArgs{
//						Address:        pulumi.String("192.168.100.1"),
//						Port:           pulumi.Int(514),
//						Protocol:       pulumi.String("tcp"),
//						Authentication: pulumi.Bool(false),
//						Logs: f5os.LoggingServerLogArray{
//							&f5os.LoggingServerLogArgs{
//								Facility: pulumi.String("local0"),
//								Severity: pulumi.String("debug"),
//							},
//						},
//					},
//					&f5os.LoggingServerArgs{
//						Address:        pulumi.String("192.168.100.2"),
//						Port:           pulumi.Int(514),
//						Protocol:       pulumi.String("tcp"),
//						Authentication: pulumi.Bool(false),
//						Logs: f5os.LoggingServerLogArray{
//							&f5os.LoggingServerLogArgs{
//								Facility: pulumi.String("authpriv"),
//								Severity: pulumi.String("emergency"),
//							},
//						},
//					},
//				},
//				RemoteForwarding: &f5os.LoggingRemoteForwardingArgs{
//					Enabled: pulumi.Bool(true),
//					Logs: f5os.LoggingRemoteForwardingLogArray{
//						&f5os.LoggingRemoteForwardingLogArgs{
//							Facility: pulumi.String("local0"),
//							Severity: pulumi.String("error"),
//						},
//						&f5os.LoggingRemoteForwardingLogArgs{
//							Facility: pulumi.String("authpriv"),
//							Severity: pulumi.String("critical"),
//						},
//					},
//					Files: f5os.LoggingRemoteForwardingFileArray{
//						&f5os.LoggingRemoteForwardingFileArgs{
//							Name: pulumi.String("rseries_debug.log"),
//						},
//						&f5os.LoggingRemoteForwardingFileArgs{
//							Name: pulumi.String("rseries_audit.log"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Logging struct {
	pulumi.CustomResourceState

	// List of CA bundles for TLS validation.
	CaBundles LoggingCaBundleArrayOutput `pulumi:"caBundles"`
	// Whether to include the hostname in log messages.
	IncludeHostname pulumi.BoolPtrOutput `pulumi:"includeHostname"`
	// Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
	RemoteForwarding LoggingRemoteForwardingPtrOutput `pulumi:"remoteForwarding"`
	// A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
	Servers LoggingServerArrayOutput `pulumi:"servers"`
	// Current state of the logging resource.
	State pulumi.StringOutput `pulumi:"state"`
	// TLS configuration for secure logging.
	Tls LoggingTlsPtrOutput `pulumi:"tls"`
}

// NewLogging registers a new resource with the given unique name, arguments, and options.
func NewLogging(ctx *pulumi.Context,
	name string, args *LoggingArgs, opts ...pulumi.ResourceOption) (*Logging, error) {
	if args == nil {
		args = &LoggingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Logging
	err := ctx.RegisterResource("f5os:index/logging:Logging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogging gets an existing Logging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingState, opts ...pulumi.ResourceOption) (*Logging, error) {
	var resource Logging
	err := ctx.ReadResource("f5os:index/logging:Logging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logging resources.
type loggingState struct {
	// List of CA bundles for TLS validation.
	CaBundles []LoggingCaBundle `pulumi:"caBundles"`
	// Whether to include the hostname in log messages.
	IncludeHostname *bool `pulumi:"includeHostname"`
	// Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
	RemoteForwarding *LoggingRemoteForwarding `pulumi:"remoteForwarding"`
	// A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
	Servers []LoggingServer `pulumi:"servers"`
	// Current state of the logging resource.
	State *string `pulumi:"state"`
	// TLS configuration for secure logging.
	Tls *LoggingTls `pulumi:"tls"`
}

type LoggingState struct {
	// List of CA bundles for TLS validation.
	CaBundles LoggingCaBundleArrayInput
	// Whether to include the hostname in log messages.
	IncludeHostname pulumi.BoolPtrInput
	// Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
	RemoteForwarding LoggingRemoteForwardingPtrInput
	// A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
	Servers LoggingServerArrayInput
	// Current state of the logging resource.
	State pulumi.StringPtrInput
	// TLS configuration for secure logging.
	Tls LoggingTlsPtrInput
}

func (LoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingState)(nil)).Elem()
}

type loggingArgs struct {
	// List of CA bundles for TLS validation.
	CaBundles []LoggingCaBundle `pulumi:"caBundles"`
	// Whether to include the hostname in log messages.
	IncludeHostname *bool `pulumi:"includeHostname"`
	// Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
	RemoteForwarding *LoggingRemoteForwarding `pulumi:"remoteForwarding"`
	// A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
	Servers []LoggingServer `pulumi:"servers"`
	// Current state of the logging resource.
	State *string `pulumi:"state"`
	// TLS configuration for secure logging.
	Tls *LoggingTls `pulumi:"tls"`
}

// The set of arguments for constructing a Logging resource.
type LoggingArgs struct {
	// List of CA bundles for TLS validation.
	CaBundles LoggingCaBundleArrayInput
	// Whether to include the hostname in log messages.
	IncludeHostname pulumi.BoolPtrInput
	// Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
	RemoteForwarding LoggingRemoteForwardingPtrInput
	// A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
	Servers LoggingServerArrayInput
	// Current state of the logging resource.
	State pulumi.StringPtrInput
	// TLS configuration for secure logging.
	Tls LoggingTlsPtrInput
}

func (LoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingArgs)(nil)).Elem()
}

type LoggingInput interface {
	pulumi.Input

	ToLoggingOutput() LoggingOutput
	ToLoggingOutputWithContext(ctx context.Context) LoggingOutput
}

func (*Logging) ElementType() reflect.Type {
	return reflect.TypeOf((**Logging)(nil)).Elem()
}

func (i *Logging) ToLoggingOutput() LoggingOutput {
	return i.ToLoggingOutputWithContext(context.Background())
}

func (i *Logging) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingOutput)
}

// LoggingArrayInput is an input type that accepts LoggingArray and LoggingArrayOutput values.
// You can construct a concrete instance of `LoggingArrayInput` via:
//
//	LoggingArray{ LoggingArgs{...} }
type LoggingArrayInput interface {
	pulumi.Input

	ToLoggingArrayOutput() LoggingArrayOutput
	ToLoggingArrayOutputWithContext(context.Context) LoggingArrayOutput
}

type LoggingArray []LoggingInput

func (LoggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logging)(nil)).Elem()
}

func (i LoggingArray) ToLoggingArrayOutput() LoggingArrayOutput {
	return i.ToLoggingArrayOutputWithContext(context.Background())
}

func (i LoggingArray) ToLoggingArrayOutputWithContext(ctx context.Context) LoggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingArrayOutput)
}

// LoggingMapInput is an input type that accepts LoggingMap and LoggingMapOutput values.
// You can construct a concrete instance of `LoggingMapInput` via:
//
//	LoggingMap{ "key": LoggingArgs{...} }
type LoggingMapInput interface {
	pulumi.Input

	ToLoggingMapOutput() LoggingMapOutput
	ToLoggingMapOutputWithContext(context.Context) LoggingMapOutput
}

type LoggingMap map[string]LoggingInput

func (LoggingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logging)(nil)).Elem()
}

func (i LoggingMap) ToLoggingMapOutput() LoggingMapOutput {
	return i.ToLoggingMapOutputWithContext(context.Background())
}

func (i LoggingMap) ToLoggingMapOutputWithContext(ctx context.Context) LoggingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingMapOutput)
}

type LoggingOutput struct{ *pulumi.OutputState }

func (LoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logging)(nil)).Elem()
}

func (o LoggingOutput) ToLoggingOutput() LoggingOutput {
	return o
}

func (o LoggingOutput) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return o
}

// List of CA bundles for TLS validation.
func (o LoggingOutput) CaBundles() LoggingCaBundleArrayOutput {
	return o.ApplyT(func(v *Logging) LoggingCaBundleArrayOutput { return v.CaBundles }).(LoggingCaBundleArrayOutput)
}

// Whether to include the hostname in log messages.
func (o LoggingOutput) IncludeHostname() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.BoolPtrOutput { return v.IncludeHostname }).(pulumi.BoolPtrOutput)
}

// Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
func (o LoggingOutput) RemoteForwarding() LoggingRemoteForwardingPtrOutput {
	return o.ApplyT(func(v *Logging) LoggingRemoteForwardingPtrOutput { return v.RemoteForwarding }).(LoggingRemoteForwardingPtrOutput)
}

// A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
func (o LoggingOutput) Servers() LoggingServerArrayOutput {
	return o.ApplyT(func(v *Logging) LoggingServerArrayOutput { return v.Servers }).(LoggingServerArrayOutput)
}

// Current state of the logging resource.
func (o LoggingOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// TLS configuration for secure logging.
func (o LoggingOutput) Tls() LoggingTlsPtrOutput {
	return o.ApplyT(func(v *Logging) LoggingTlsPtrOutput { return v.Tls }).(LoggingTlsPtrOutput)
}

type LoggingArrayOutput struct{ *pulumi.OutputState }

func (LoggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logging)(nil)).Elem()
}

func (o LoggingArrayOutput) ToLoggingArrayOutput() LoggingArrayOutput {
	return o
}

func (o LoggingArrayOutput) ToLoggingArrayOutputWithContext(ctx context.Context) LoggingArrayOutput {
	return o
}

func (o LoggingArrayOutput) Index(i pulumi.IntInput) LoggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logging {
		return vs[0].([]*Logging)[vs[1].(int)]
	}).(LoggingOutput)
}

type LoggingMapOutput struct{ *pulumi.OutputState }

func (LoggingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logging)(nil)).Elem()
}

func (o LoggingMapOutput) ToLoggingMapOutput() LoggingMapOutput {
	return o
}

func (o LoggingMapOutput) ToLoggingMapOutputWithContext(ctx context.Context) LoggingMapOutput {
	return o
}

func (o LoggingMapOutput) MapIndex(k pulumi.StringInput) LoggingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logging {
		return vs[0].(map[string]*Logging)[vs[1].(string)]
	}).(LoggingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingInput)(nil)).Elem(), &Logging{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingArrayInput)(nil)).Elem(), LoggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingMapInput)(nil)).Elem(), LoggingMap{})
	pulumi.RegisterOutputType(LoggingOutput{})
	pulumi.RegisterOutputType(LoggingArrayOutput{})
	pulumi.RegisterOutputType(LoggingMapOutput{})
}
