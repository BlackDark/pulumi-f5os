// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to Manage network interfaces on F5OS systems like VELOS chassis partitions or rSeries platforms
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := f5os.NewInterface(ctx, "test_interface", &f5os.InterfaceArgs{
//				Enabled:    pulumi.Bool(true),
//				Name:       pulumi.String("1.0"),
//				NativeVlan: pulumi.Int(5),
//				TrunkVlans: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Interface can be imported by specifying the Interface name
//
// ```sh
// $ pulumi import f5os:index/interface:Interface test-import 1.0
// ```
type Interface struct {
	pulumi.CustomResourceState

	// Enables or disables interface.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Name of the interface to configure.
	// For VELOS partitions blade/port format is required e.g. `1/1.0`
	Name pulumi.StringOutput `pulumi:"name"`
	// Configures the VLAN ID to associate with the interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan pulumi.IntPtrOutput `pulumi:"nativeVlan"`
	// Operational state of the interface.
	Status pulumi.StringOutput `pulumi:"status"`
	// Configures multiple VLAN IDs to associate with the interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans pulumi.IntArrayOutput `pulumi:"trunkVlans"`
}

// NewInterface registers a new resource with the given unique name, arguments, and options.
func NewInterface(ctx *pulumi.Context,
	name string, args *InterfaceArgs, opts ...pulumi.ResourceOption) (*Interface, error) {
	if args == nil {
		args = &InterfaceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Interface
	err := ctx.RegisterResource("f5os:index/interface:Interface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterface gets an existing Interface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceState, opts ...pulumi.ResourceOption) (*Interface, error) {
	var resource Interface
	err := ctx.ReadResource("f5os:index/interface:Interface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Interface resources.
type interfaceState struct {
	// Enables or disables interface.
	Enabled *bool `pulumi:"enabled"`
	// Name of the interface to configure.
	// For VELOS partitions blade/port format is required e.g. `1/1.0`
	Name *string `pulumi:"name"`
	// Configures the VLAN ID to associate with the interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan *int `pulumi:"nativeVlan"`
	// Operational state of the interface.
	Status *string `pulumi:"status"`
	// Configures multiple VLAN IDs to associate with the interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans []int `pulumi:"trunkVlans"`
}

type InterfaceState struct {
	// Enables or disables interface.
	Enabled pulumi.BoolPtrInput
	// Name of the interface to configure.
	// For VELOS partitions blade/port format is required e.g. `1/1.0`
	Name pulumi.StringPtrInput
	// Configures the VLAN ID to associate with the interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan pulumi.IntPtrInput
	// Operational state of the interface.
	Status pulumi.StringPtrInput
	// Configures multiple VLAN IDs to associate with the interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans pulumi.IntArrayInput
}

func (InterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceState)(nil)).Elem()
}

type interfaceArgs struct {
	// Enables or disables interface.
	Enabled *bool `pulumi:"enabled"`
	// Name of the interface to configure.
	// For VELOS partitions blade/port format is required e.g. `1/1.0`
	Name *string `pulumi:"name"`
	// Configures the VLAN ID to associate with the interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan *int `pulumi:"nativeVlan"`
	// Configures multiple VLAN IDs to associate with the interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans []int `pulumi:"trunkVlans"`
}

// The set of arguments for constructing a Interface resource.
type InterfaceArgs struct {
	// Enables or disables interface.
	Enabled pulumi.BoolPtrInput
	// Name of the interface to configure.
	// For VELOS partitions blade/port format is required e.g. `1/1.0`
	Name pulumi.StringPtrInput
	// Configures the VLAN ID to associate with the interface.
	// The `nativeVlan` parameter is used for untagged traffic.
	NativeVlan pulumi.IntPtrInput
	// Configures multiple VLAN IDs to associate with the interface.
	// The `trunkVlans` parameter is used for tagged traffic
	TrunkVlans pulumi.IntArrayInput
}

func (InterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceArgs)(nil)).Elem()
}

type InterfaceInput interface {
	pulumi.Input

	ToInterfaceOutput() InterfaceOutput
	ToInterfaceOutputWithContext(ctx context.Context) InterfaceOutput
}

func (*Interface) ElementType() reflect.Type {
	return reflect.TypeOf((**Interface)(nil)).Elem()
}

func (i *Interface) ToInterfaceOutput() InterfaceOutput {
	return i.ToInterfaceOutputWithContext(context.Background())
}

func (i *Interface) ToInterfaceOutputWithContext(ctx context.Context) InterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOutput)
}

// InterfaceArrayInput is an input type that accepts InterfaceArray and InterfaceArrayOutput values.
// You can construct a concrete instance of `InterfaceArrayInput` via:
//
//	InterfaceArray{ InterfaceArgs{...} }
type InterfaceArrayInput interface {
	pulumi.Input

	ToInterfaceArrayOutput() InterfaceArrayOutput
	ToInterfaceArrayOutputWithContext(context.Context) InterfaceArrayOutput
}

type InterfaceArray []InterfaceInput

func (InterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interface)(nil)).Elem()
}

func (i InterfaceArray) ToInterfaceArrayOutput() InterfaceArrayOutput {
	return i.ToInterfaceArrayOutputWithContext(context.Background())
}

func (i InterfaceArray) ToInterfaceArrayOutputWithContext(ctx context.Context) InterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceArrayOutput)
}

// InterfaceMapInput is an input type that accepts InterfaceMap and InterfaceMapOutput values.
// You can construct a concrete instance of `InterfaceMapInput` via:
//
//	InterfaceMap{ "key": InterfaceArgs{...} }
type InterfaceMapInput interface {
	pulumi.Input

	ToInterfaceMapOutput() InterfaceMapOutput
	ToInterfaceMapOutputWithContext(context.Context) InterfaceMapOutput
}

type InterfaceMap map[string]InterfaceInput

func (InterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interface)(nil)).Elem()
}

func (i InterfaceMap) ToInterfaceMapOutput() InterfaceMapOutput {
	return i.ToInterfaceMapOutputWithContext(context.Background())
}

func (i InterfaceMap) ToInterfaceMapOutputWithContext(ctx context.Context) InterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceMapOutput)
}

type InterfaceOutput struct{ *pulumi.OutputState }

func (InterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Interface)(nil)).Elem()
}

func (o InterfaceOutput) ToInterfaceOutput() InterfaceOutput {
	return o
}

func (o InterfaceOutput) ToInterfaceOutputWithContext(ctx context.Context) InterfaceOutput {
	return o
}

// Enables or disables interface.
func (o InterfaceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Interface) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Name of the interface to configure.
// For VELOS partitions blade/port format is required e.g. `1/1.0`
func (o InterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configures the VLAN ID to associate with the interface.
// The `nativeVlan` parameter is used for untagged traffic.
func (o InterfaceOutput) NativeVlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntPtrOutput { return v.NativeVlan }).(pulumi.IntPtrOutput)
}

// Operational state of the interface.
func (o InterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Configures multiple VLAN IDs to associate with the interface.
// The `trunkVlans` parameter is used for tagged traffic
func (o InterfaceOutput) TrunkVlans() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntArrayOutput { return v.TrunkVlans }).(pulumi.IntArrayOutput)
}

type InterfaceArrayOutput struct{ *pulumi.OutputState }

func (InterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interface)(nil)).Elem()
}

func (o InterfaceArrayOutput) ToInterfaceArrayOutput() InterfaceArrayOutput {
	return o
}

func (o InterfaceArrayOutput) ToInterfaceArrayOutputWithContext(ctx context.Context) InterfaceArrayOutput {
	return o
}

func (o InterfaceArrayOutput) Index(i pulumi.IntInput) InterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Interface {
		return vs[0].([]*Interface)[vs[1].(int)]
	}).(InterfaceOutput)
}

type InterfaceMapOutput struct{ *pulumi.OutputState }

func (InterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interface)(nil)).Elem()
}

func (o InterfaceMapOutput) ToInterfaceMapOutput() InterfaceMapOutput {
	return o
}

func (o InterfaceMapOutput) ToInterfaceMapOutputWithContext(ctx context.Context) InterfaceMapOutput {
	return o
}

func (o InterfaceMapOutput) MapIndex(k pulumi.StringInput) InterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Interface {
		return vs[0].(map[string]*Interface)[vs[1].(string)]
	}).(InterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceInput)(nil)).Elem(), &Interface{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceArrayInput)(nil)).Elem(), InterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceMapInput)(nil)).Elem(), InterfaceMap{})
	pulumi.RegisterOutputType(InterfaceOutput{})
	pulumi.RegisterOutputType(InterfaceArrayOutput{})
	pulumi.RegisterOutputType(InterfaceMapOutput{})
}
