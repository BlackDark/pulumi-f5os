// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5os

import (
	"context"
	"reflect"

	"errors"
	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource used to manage F5OS config backup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/BlackDark/pulumi-f5os/sdk/go/f5os"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := f5os.NewConfigBackup(ctx, "test", &f5os.ConfigBackupArgs{
//				Name:           pulumi.String("test_cfg_backup"),
//				RemoteHost:     pulumi.String("1.2.3.4"),
//				RemoteUser:     pulumi.String("corpuser"),
//				RemotePassword: pulumi.String("password"),
//				RemotePath:     pulumi.String("/upload/test_cfg_backup"),
//				Protocol:       pulumi.String("https"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConfigBackup struct {
	pulumi.CustomResourceState

	// Name of the config backup file.
	Name pulumi.StringOutput `pulumi:"name"`
	// Protocol for config backup file transfer.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The hostname or IP address of the remote server used for storing the config backup file.
	RemoteHost pulumi.StringOutput `pulumi:"remoteHost"`
	// User password for the remote server used for exporting the created config backup file.
	RemotePassword pulumi.StringOutput `pulumi:"remotePassword"`
	// The path on the remote server used for uploading the created config backup file.
	RemotePath pulumi.StringOutput `pulumi:"remotePath"`
	// User name for the remote server used for exporting the created config backup file.
	RemoteUser pulumi.StringOutput `pulumi:"remoteUser"`
	// The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
	Timeout pulumi.IntOutput `pulumi:"timeout"`
}

// NewConfigBackup registers a new resource with the given unique name, arguments, and options.
func NewConfigBackup(ctx *pulumi.Context,
	name string, args *ConfigBackupArgs, opts ...pulumi.ResourceOption) (*ConfigBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.RemoteHost == nil {
		return nil, errors.New("invalid value for required argument 'RemoteHost'")
	}
	if args.RemotePassword == nil {
		return nil, errors.New("invalid value for required argument 'RemotePassword'")
	}
	if args.RemotePath == nil {
		return nil, errors.New("invalid value for required argument 'RemotePath'")
	}
	if args.RemoteUser == nil {
		return nil, errors.New("invalid value for required argument 'RemoteUser'")
	}
	if args.RemotePassword != nil {
		args.RemotePassword = pulumi.ToSecret(args.RemotePassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"remotePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigBackup
	err := ctx.RegisterResource("f5os:index/configBackup:ConfigBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigBackup gets an existing ConfigBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigBackupState, opts ...pulumi.ResourceOption) (*ConfigBackup, error) {
	var resource ConfigBackup
	err := ctx.ReadResource("f5os:index/configBackup:ConfigBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigBackup resources.
type configBackupState struct {
	// Name of the config backup file.
	Name *string `pulumi:"name"`
	// Protocol for config backup file transfer.
	Protocol *string `pulumi:"protocol"`
	// The hostname or IP address of the remote server used for storing the config backup file.
	RemoteHost *string `pulumi:"remoteHost"`
	// User password for the remote server used for exporting the created config backup file.
	RemotePassword *string `pulumi:"remotePassword"`
	// The path on the remote server used for uploading the created config backup file.
	RemotePath *string `pulumi:"remotePath"`
	// User name for the remote server used for exporting the created config backup file.
	RemoteUser *string `pulumi:"remoteUser"`
	// The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
	Timeout *int `pulumi:"timeout"`
}

type ConfigBackupState struct {
	// Name of the config backup file.
	Name pulumi.StringPtrInput
	// Protocol for config backup file transfer.
	Protocol pulumi.StringPtrInput
	// The hostname or IP address of the remote server used for storing the config backup file.
	RemoteHost pulumi.StringPtrInput
	// User password for the remote server used for exporting the created config backup file.
	RemotePassword pulumi.StringPtrInput
	// The path on the remote server used for uploading the created config backup file.
	RemotePath pulumi.StringPtrInput
	// User name for the remote server used for exporting the created config backup file.
	RemoteUser pulumi.StringPtrInput
	// The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
	Timeout pulumi.IntPtrInput
}

func (ConfigBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*configBackupState)(nil)).Elem()
}

type configBackupArgs struct {
	// Name of the config backup file.
	Name *string `pulumi:"name"`
	// Protocol for config backup file transfer.
	Protocol string `pulumi:"protocol"`
	// The hostname or IP address of the remote server used for storing the config backup file.
	RemoteHost string `pulumi:"remoteHost"`
	// User password for the remote server used for exporting the created config backup file.
	RemotePassword string `pulumi:"remotePassword"`
	// The path on the remote server used for uploading the created config backup file.
	RemotePath string `pulumi:"remotePath"`
	// User name for the remote server used for exporting the created config backup file.
	RemoteUser string `pulumi:"remoteUser"`
	// The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a ConfigBackup resource.
type ConfigBackupArgs struct {
	// Name of the config backup file.
	Name pulumi.StringPtrInput
	// Protocol for config backup file transfer.
	Protocol pulumi.StringInput
	// The hostname or IP address of the remote server used for storing the config backup file.
	RemoteHost pulumi.StringInput
	// User password for the remote server used for exporting the created config backup file.
	RemotePassword pulumi.StringInput
	// The path on the remote server used for uploading the created config backup file.
	RemotePath pulumi.StringInput
	// User name for the remote server used for exporting the created config backup file.
	RemoteUser pulumi.StringInput
	// The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
	Timeout pulumi.IntPtrInput
}

func (ConfigBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configBackupArgs)(nil)).Elem()
}

type ConfigBackupInput interface {
	pulumi.Input

	ToConfigBackupOutput() ConfigBackupOutput
	ToConfigBackupOutputWithContext(ctx context.Context) ConfigBackupOutput
}

func (*ConfigBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigBackup)(nil)).Elem()
}

func (i *ConfigBackup) ToConfigBackupOutput() ConfigBackupOutput {
	return i.ToConfigBackupOutputWithContext(context.Background())
}

func (i *ConfigBackup) ToConfigBackupOutputWithContext(ctx context.Context) ConfigBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBackupOutput)
}

// ConfigBackupArrayInput is an input type that accepts ConfigBackupArray and ConfigBackupArrayOutput values.
// You can construct a concrete instance of `ConfigBackupArrayInput` via:
//
//	ConfigBackupArray{ ConfigBackupArgs{...} }
type ConfigBackupArrayInput interface {
	pulumi.Input

	ToConfigBackupArrayOutput() ConfigBackupArrayOutput
	ToConfigBackupArrayOutputWithContext(context.Context) ConfigBackupArrayOutput
}

type ConfigBackupArray []ConfigBackupInput

func (ConfigBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigBackup)(nil)).Elem()
}

func (i ConfigBackupArray) ToConfigBackupArrayOutput() ConfigBackupArrayOutput {
	return i.ToConfigBackupArrayOutputWithContext(context.Background())
}

func (i ConfigBackupArray) ToConfigBackupArrayOutputWithContext(ctx context.Context) ConfigBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBackupArrayOutput)
}

// ConfigBackupMapInput is an input type that accepts ConfigBackupMap and ConfigBackupMapOutput values.
// You can construct a concrete instance of `ConfigBackupMapInput` via:
//
//	ConfigBackupMap{ "key": ConfigBackupArgs{...} }
type ConfigBackupMapInput interface {
	pulumi.Input

	ToConfigBackupMapOutput() ConfigBackupMapOutput
	ToConfigBackupMapOutputWithContext(context.Context) ConfigBackupMapOutput
}

type ConfigBackupMap map[string]ConfigBackupInput

func (ConfigBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigBackup)(nil)).Elem()
}

func (i ConfigBackupMap) ToConfigBackupMapOutput() ConfigBackupMapOutput {
	return i.ToConfigBackupMapOutputWithContext(context.Background())
}

func (i ConfigBackupMap) ToConfigBackupMapOutputWithContext(ctx context.Context) ConfigBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBackupMapOutput)
}

type ConfigBackupOutput struct{ *pulumi.OutputState }

func (ConfigBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigBackup)(nil)).Elem()
}

func (o ConfigBackupOutput) ToConfigBackupOutput() ConfigBackupOutput {
	return o
}

func (o ConfigBackupOutput) ToConfigBackupOutputWithContext(ctx context.Context) ConfigBackupOutput {
	return o
}

// Name of the config backup file.
func (o ConfigBackupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigBackup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Protocol for config backup file transfer.
func (o ConfigBackupOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigBackup) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The hostname or IP address of the remote server used for storing the config backup file.
func (o ConfigBackupOutput) RemoteHost() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigBackup) pulumi.StringOutput { return v.RemoteHost }).(pulumi.StringOutput)
}

// User password for the remote server used for exporting the created config backup file.
func (o ConfigBackupOutput) RemotePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigBackup) pulumi.StringOutput { return v.RemotePassword }).(pulumi.StringOutput)
}

// The path on the remote server used for uploading the created config backup file.
func (o ConfigBackupOutput) RemotePath() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigBackup) pulumi.StringOutput { return v.RemotePath }).(pulumi.StringOutput)
}

// User name for the remote server used for exporting the created config backup file.
func (o ConfigBackupOutput) RemoteUser() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigBackup) pulumi.StringOutput { return v.RemoteUser }).(pulumi.StringOutput)
}

// The number of seconds to wait for config backup file export to finish. The value must be between 150 and 3600
func (o ConfigBackupOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ConfigBackup) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

type ConfigBackupArrayOutput struct{ *pulumi.OutputState }

func (ConfigBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigBackup)(nil)).Elem()
}

func (o ConfigBackupArrayOutput) ToConfigBackupArrayOutput() ConfigBackupArrayOutput {
	return o
}

func (o ConfigBackupArrayOutput) ToConfigBackupArrayOutputWithContext(ctx context.Context) ConfigBackupArrayOutput {
	return o
}

func (o ConfigBackupArrayOutput) Index(i pulumi.IntInput) ConfigBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigBackup {
		return vs[0].([]*ConfigBackup)[vs[1].(int)]
	}).(ConfigBackupOutput)
}

type ConfigBackupMapOutput struct{ *pulumi.OutputState }

func (ConfigBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigBackup)(nil)).Elem()
}

func (o ConfigBackupMapOutput) ToConfigBackupMapOutput() ConfigBackupMapOutput {
	return o
}

func (o ConfigBackupMapOutput) ToConfigBackupMapOutputWithContext(ctx context.Context) ConfigBackupMapOutput {
	return o
}

func (o ConfigBackupMapOutput) MapIndex(k pulumi.StringInput) ConfigBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigBackup {
		return vs[0].(map[string]*ConfigBackup)[vs[1].(string)]
	}).(ConfigBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBackupInput)(nil)).Elem(), &ConfigBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBackupArrayInput)(nil)).Elem(), ConfigBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBackupMapInput)(nil)).Elem(), ConfigBackupMap{})
	pulumi.RegisterOutputType(ConfigBackupOutput{})
	pulumi.RegisterOutputType(ConfigBackupArrayOutput{})
	pulumi.RegisterOutputType(ConfigBackupMapOutput{})
}
