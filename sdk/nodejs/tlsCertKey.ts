// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource used to manage tls cert and key on F5OS partitions
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5os from "@pulumi/f5os";
 *
 * const testcert = new f5os.TlsCertKey("testcert", {
 *     name: "testcert",
 *     daysValid: 40,
 *     email: "user@org.com",
 *     city: "Hyd",
 *     province: "Telangana",
 *     country: "IN",
 *     organization: "F7",
 *     unit: "IT",
 *     keyType: "encrypted-rsa",
 *     keySize: 2048,
 *     keyPassphrase: "test123",
 *     confirmKeyPassphrase: "test123",
 * });
 * ```
 */
export class TlsCertKey extends pulumi.CustomResource {
    /**
     * Get an existing TlsCertKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsCertKeyState, opts?: pulumi.CustomResourceOptions): TlsCertKey {
        return new TlsCertKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5os:index/tlsCertKey:TlsCertKey';

    /**
     * Returns true if the given object is an instance of TlsCertKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsCertKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsCertKey.__pulumiType;
    }

    /**
     * The residing cty of the certificate holder.
     */
    public readonly city!: pulumi.Output<string | undefined>;
    /**
     * This specifies the confirmation of the passphrase for the key, the value should be the same as the `keyPassphrase`. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
     */
    public readonly confirmKeyPassphrase!: pulumi.Output<string | undefined>;
    /**
     * The residing country of the certificate holder.
     */
    public readonly country!: pulumi.Output<string | undefined>;
    /**
     * The number of days for which the certificate is valid, the default value is 30 days
     */
    public readonly daysValid!: pulumi.Output<number>;
    /**
     * The email address of the certificate holder.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `keyType` is set to `ecdsa` or `encrypted-ecdsa`
     */
    public readonly keyCurve!: pulumi.Output<string | undefined>;
    /**
     * This specifies the passphrase for the key. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
     */
    public readonly keyPassphrase!: pulumi.Output<string | undefined>;
    /**
     * This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `keyType` is set to `rsa` or `encrypted-rsa`
     */
    public readonly keySize!: pulumi.Output<number | undefined>;
    /**
     * The type of the tls key
     */
    public readonly keyType!: pulumi.Output<string | undefined>;
    /**
     * Name of the tls certificate.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization of the certificate holder
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    /**
     * The residing province of the certificate holder.
     */
    public readonly province!: pulumi.Output<string | undefined>;
    /**
     * The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
     */
    public readonly subjectAlternativeName!: pulumi.Output<string | undefined>;
    /**
     * The organizational unit of the certificate holder.
     */
    public readonly unit!: pulumi.Output<string | undefined>;
    /**
     * The version of the certificate
     */
    public readonly version!: pulumi.Output<number>;

    /**
     * Create a TlsCertKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TlsCertKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsCertKeyArgs | TlsCertKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsCertKeyState | undefined;
            resourceInputs["city"] = state ? state.city : undefined;
            resourceInputs["confirmKeyPassphrase"] = state ? state.confirmKeyPassphrase : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["daysValid"] = state ? state.daysValid : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["keyCurve"] = state ? state.keyCurve : undefined;
            resourceInputs["keyPassphrase"] = state ? state.keyPassphrase : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["province"] = state ? state.province : undefined;
            resourceInputs["subjectAlternativeName"] = state ? state.subjectAlternativeName : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as TlsCertKeyArgs | undefined;
            resourceInputs["city"] = args ? args.city : undefined;
            resourceInputs["confirmKeyPassphrase"] = args?.confirmKeyPassphrase ? pulumi.secret(args.confirmKeyPassphrase) : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["daysValid"] = args ? args.daysValid : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["keyCurve"] = args ? args.keyCurve : undefined;
            resourceInputs["keyPassphrase"] = args?.keyPassphrase ? pulumi.secret(args.keyPassphrase) : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["province"] = args ? args.province : undefined;
            resourceInputs["subjectAlternativeName"] = args ? args.subjectAlternativeName : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["confirmKeyPassphrase", "keyPassphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TlsCertKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TlsCertKey resources.
 */
export interface TlsCertKeyState {
    /**
     * The residing cty of the certificate holder.
     */
    city?: pulumi.Input<string>;
    /**
     * This specifies the confirmation of the passphrase for the key, the value should be the same as the `keyPassphrase`. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
     */
    confirmKeyPassphrase?: pulumi.Input<string>;
    /**
     * The residing country of the certificate holder.
     */
    country?: pulumi.Input<string>;
    /**
     * The number of days for which the certificate is valid, the default value is 30 days
     */
    daysValid?: pulumi.Input<number>;
    /**
     * The email address of the certificate holder.
     */
    email?: pulumi.Input<string>;
    /**
     * This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `keyType` is set to `ecdsa` or `encrypted-ecdsa`
     */
    keyCurve?: pulumi.Input<string>;
    /**
     * This specifies the passphrase for the key. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
     */
    keyPassphrase?: pulumi.Input<string>;
    /**
     * This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `keyType` is set to `rsa` or `encrypted-rsa`
     */
    keySize?: pulumi.Input<number>;
    /**
     * The type of the tls key
     */
    keyType?: pulumi.Input<string>;
    /**
     * Name of the tls certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization of the certificate holder
     */
    organization?: pulumi.Input<string>;
    /**
     * The residing province of the certificate holder.
     */
    province?: pulumi.Input<string>;
    /**
     * The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
     */
    subjectAlternativeName?: pulumi.Input<string>;
    /**
     * The organizational unit of the certificate holder.
     */
    unit?: pulumi.Input<string>;
    /**
     * The version of the certificate
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TlsCertKey resource.
 */
export interface TlsCertKeyArgs {
    /**
     * The residing cty of the certificate holder.
     */
    city?: pulumi.Input<string>;
    /**
     * This specifies the confirmation of the passphrase for the key, the value should be the same as the `keyPassphrase`. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
     */
    confirmKeyPassphrase?: pulumi.Input<string>;
    /**
     * The residing country of the certificate holder.
     */
    country?: pulumi.Input<string>;
    /**
     * The number of days for which the certificate is valid, the default value is 30 days
     */
    daysValid?: pulumi.Input<number>;
    /**
     * The email address of the certificate holder.
     */
    email?: pulumi.Input<string>;
    /**
     * This specifies the specific elliptic curve used in ECC, this is only applicable for ECDSA keys. This attribute is required when `keyType` is set to `ecdsa` or `encrypted-ecdsa`
     */
    keyCurve?: pulumi.Input<string>;
    /**
     * This specifies the passphrase for the key. This attribute is required when `keyType` is set to `encrypted-rsa` or `encrypted-ecdsa`
     */
    keyPassphrase?: pulumi.Input<string>;
    /**
     * This specifies the length of the key, this is only applicable for RSA keys. This attribute is required when `keyType` is set to `rsa` or `encrypted-rsa`
     */
    keySize?: pulumi.Input<number>;
    /**
     * The type of the tls key
     */
    keyType?: pulumi.Input<string>;
    /**
     * Name of the tls certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization of the certificate holder
     */
    organization?: pulumi.Input<string>;
    /**
     * The residing province of the certificate holder.
     */
    province?: pulumi.Input<string>;
    /**
     * The subject alternative name of the tls certificate. This attribute is required for F5OS v1.8 and above and not supported for F5OS below v1.8
     */
    subjectAlternativeName?: pulumi.Input<string>;
    /**
     * The organizational unit of the certificate holder.
     */
    unit?: pulumi.Input<string>;
    /**
     * The version of the certificate
     */
    version?: pulumi.Input<number>;
}
