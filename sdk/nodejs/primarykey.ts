// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage system primary-key using passphrase and salt on F5OS devices.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5os from "@pulumi/f5os";
 *
 * // Manages Primary key settings on F5OS platforms
 * const _default = new f5os.Primarykey("default", {
 *     passphrase: "test-pass",
 *     salt: "test-salt",
 *     forceUpdate: true,
 * });
 * ```
 */
export class Primarykey extends pulumi.CustomResource {
    /**
     * Get an existing Primarykey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrimarykeyState, opts?: pulumi.CustomResourceOptions): Primarykey {
        return new Primarykey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5os:index/primarykey:Primarykey';

    /**
     * Returns true if the given object is an instance of Primarykey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Primarykey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Primarykey.__pulumiType;
    }

    /**
     * Force update the primary key on F5OS device.
     */
    public readonly forceUpdate!: pulumi.Output<boolean>;
    /**
     * Hash of the primary key as returned by the system.
     */
    public /*out*/ readonly hash!: pulumi.Output<string>;
    /**
     * Specifies passphrase for generating primary key.
     */
    public readonly passphrase!: pulumi.Output<string>;
    /**
     * Specifies salt for generating primary key.
     */
    public readonly salt!: pulumi.Output<string>;
    /**
     * Status of primary key operation (e.g., COMPLETE)
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a Primarykey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrimarykeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrimarykeyArgs | PrimarykeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrimarykeyState | undefined;
            resourceInputs["forceUpdate"] = state ? state.forceUpdate : undefined;
            resourceInputs["hash"] = state ? state.hash : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["salt"] = state ? state.salt : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as PrimarykeyArgs | undefined;
            if ((!args || args.passphrase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'passphrase'");
            }
            if ((!args || args.salt === undefined) && !opts.urn) {
                throw new Error("Missing required property 'salt'");
            }
            resourceInputs["forceUpdate"] = args ? args.forceUpdate : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["salt"] = args?.salt ? pulumi.secret(args.salt) : undefined;
            resourceInputs["hash"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase", "salt"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Primarykey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Primarykey resources.
 */
export interface PrimarykeyState {
    /**
     * Force update the primary key on F5OS device.
     */
    forceUpdate?: pulumi.Input<boolean>;
    /**
     * Hash of the primary key as returned by the system.
     */
    hash?: pulumi.Input<string>;
    /**
     * Specifies passphrase for generating primary key.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Specifies salt for generating primary key.
     */
    salt?: pulumi.Input<string>;
    /**
     * Status of primary key operation (e.g., COMPLETE)
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Primarykey resource.
 */
export interface PrimarykeyArgs {
    /**
     * Force update the primary key on F5OS device.
     */
    forceUpdate?: pulumi.Input<boolean>;
    /**
     * Specifies passphrase for generating primary key.
     */
    passphrase: pulumi.Input<string>;
    /**
     * Specifies salt for generating primary key.
     */
    salt: pulumi.Input<string>;
}
