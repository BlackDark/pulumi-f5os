// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `f5os.Logging` resource manages logging configuration on F5OS devices, including remote servers, TLS, CA bundles, remote forwarding, and hostname inclusion.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5os from "@pulumi/f5os";
 *
 * const logging = new f5os.Logging("logging", {
 *     includeHostname: false,
 *     servers: [
 *         {
 *             address: "192.168.100.1",
 *             port: 514,
 *             protocol: "tcp",
 *             authentication: false,
 *             logs: [{
 *                 facility: "local0",
 *                 severity: "debug",
 *             }],
 *         },
 *         {
 *             address: "192.168.100.2",
 *             port: 514,
 *             protocol: "tcp",
 *             authentication: false,
 *             logs: [{
 *                 facility: "authpriv",
 *                 severity: "emergency",
 *             }],
 *         },
 *     ],
 *     remoteForwarding: {
 *         enabled: true,
 *         logs: [
 *             {
 *                 facility: "local0",
 *                 severity: "error",
 *             },
 *             {
 *                 facility: "authpriv",
 *                 severity: "critical",
 *             },
 *         ],
 *         files: [
 *             {
 *                 name: "rseries_debug.log",
 *             },
 *             {
 *                 name: "rseries_audit.log",
 *             },
 *         ],
 *     },
 * });
 * ```
 */
export class Logging extends pulumi.CustomResource {
    /**
     * Get an existing Logging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoggingState, opts?: pulumi.CustomResourceOptions): Logging {
        return new Logging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5os:index/logging:Logging';

    /**
     * Returns true if the given object is an instance of Logging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Logging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Logging.__pulumiType;
    }

    /**
     * List of CA bundles for TLS validation.
     */
    public readonly caBundles!: pulumi.Output<outputs.LoggingCaBundle[] | undefined>;
    /**
     * Whether to include the hostname in log messages.
     */
    public readonly includeHostname!: pulumi.Output<boolean | undefined>;
    /**
     * Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
     */
    public readonly remoteForwarding!: pulumi.Output<outputs.LoggingRemoteForwarding | undefined>;
    /**
     * A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
     */
    public readonly servers!: pulumi.Output<outputs.LoggingServer[] | undefined>;
    /**
     * Current state of the logging resource.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * TLS configuration for secure logging.
     */
    public readonly tls!: pulumi.Output<outputs.LoggingTls | undefined>;

    /**
     * Create a Logging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoggingArgs | LoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoggingState | undefined;
            resourceInputs["caBundles"] = state ? state.caBundles : undefined;
            resourceInputs["includeHostname"] = state ? state.includeHostname : undefined;
            resourceInputs["remoteForwarding"] = state ? state.remoteForwarding : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tls"] = state ? state.tls : undefined;
        } else {
            const args = argsOrState as LoggingArgs | undefined;
            resourceInputs["caBundles"] = args ? args.caBundles : undefined;
            resourceInputs["includeHostname"] = args ? args.includeHostname : undefined;
            resourceInputs["remoteForwarding"] = args ? args.remoteForwarding : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tls"] = args ? args.tls : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Logging.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Logging resources.
 */
export interface LoggingState {
    /**
     * List of CA bundles for TLS validation.
     */
    caBundles?: pulumi.Input<pulumi.Input<inputs.LoggingCaBundle>[]>;
    /**
     * Whether to include the hostname in log messages.
     */
    includeHostname?: pulumi.Input<boolean>;
    /**
     * Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
     */
    remoteForwarding?: pulumi.Input<inputs.LoggingRemoteForwarding>;
    /**
     * A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.LoggingServer>[]>;
    /**
     * Current state of the logging resource.
     */
    state?: pulumi.Input<string>;
    /**
     * TLS configuration for secure logging.
     */
    tls?: pulumi.Input<inputs.LoggingTls>;
}

/**
 * The set of arguments for constructing a Logging resource.
 */
export interface LoggingArgs {
    /**
     * List of CA bundles for TLS validation.
     */
    caBundles?: pulumi.Input<pulumi.Input<inputs.LoggingCaBundle>[]>;
    /**
     * Whether to include the hostname in log messages.
     */
    includeHostname?: pulumi.Input<boolean>;
    /**
     * Remote forwarding configuration for host logs, including enablement, log selectors, and file outputs.
     */
    remoteForwarding?: pulumi.Input<inputs.LoggingRemoteForwarding>;
    /**
     * A list of remote logging servers. Each server can specify address, port, protocol, authentication, and log selectors.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.LoggingServer>[]>;
    /**
     * Current state of the logging resource.
     */
    state?: pulumi.Input<string>;
    /**
     * TLS configuration for secure logging.
     */
    tls?: pulumi.Input<inputs.LoggingTls>;
}
